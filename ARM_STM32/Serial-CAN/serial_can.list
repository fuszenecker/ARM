
serial_can:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005290  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  20000000  00005290  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002f8  20000004  00005294  00010004  2**2
                  ALLOC
  3 .debug_abbrev 0000148f  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00004bc0  00000000  00000000  00011493  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00001142  00000000  00000000  00016053  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000016f4  00000000  00000000  00017198  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    000027cb  00000000  00000000  0001888c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001216  00000000  00000000  0001b057  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000240  00000000  00000000  0001c26d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bb8  00000000  00000000  0001c4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      000002f4  00000000  00000000  0001e065  2**0
                  CONTENTS, READONLY
 12 .ARM.attributes 00000031  00000000  00000000  0001e359  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_pointers>:
       0:	20002000 	.word	0x20002000

00000004 <vectors>:
       4:	000000e9 000000e1 000000e1 000000e1     ................
      14:	000000e1 000000e1 000000e1 000000e1     ................
      24:	000000e1 000000e1 000000e1 000000e1     ................
      34:	000000e1 000000e1 000009d5 000000e1     ................
      44:	000000e1 000000e1 000000e1 000000e1     ................
      54:	000000e1 000000e1 000000e1 000000e1     ................
      64:	000000e1 000000e1 000000e1 000000e1     ................
      74:	000000e1 000000e1 000000e1 000000e1     ................
      84:	000000e1 000000e1 000000e1 00000d91     ................
      94:	000000e1 000000e1 000000e1 000000e1     ................
      a4:	000000e1 000000e1 000000e1 000000e1     ................
      b4:	000000e1 000000e1 000000e1 000000e1     ................
      c4:	000000e1 000000e1 000000e1 000000e1     ................
      d4:	00000a1d 000000e1 000000e1              ............

000000e0 <no_handler>:
// ---------------------------------------------------------------------------
// When a non-expected interrupt or exception occurs,
// this routine will "halt" the CPU.
// ---------------------------------------------------------------------------

void no_handler() {
      e0:	b480      	push	{r7}
      e2:	af00      	add	r7, sp, #0
    for(;;);
      e4:	e7fe      	b.n	e4 <no_handler+0x4>
      e6:	bf00      	nop

000000e8 <sysinit>:

// ---------------------------------------------------------------------------
// The function will be started after RESET.
// ---------------------------------------------------------------------------

void sysinit() {
      e8:	b580      	push	{r7, lr}
      ea:	b082      	sub	sp, #8
      ec:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    // Clean RAM area
    unsigned char *p;
    
    for (p = (unsigned char *) RAM_BASE; 
      ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
      f2:	607b      	str	r3, [r7, #4]
      f4:	e007      	b.n	106 <sysinit+0x1e>
            p < ((unsigned char *) RAM_BASE + RAM_SIZE); p++)
        *p = 0;
      f6:	687b      	ldr	r3, [r7, #4]
      f8:	f04f 0200 	mov.w	r2, #0
      fc:	701a      	strb	r2, [r3, #0]

    // Clean RAM area
    unsigned char *p;
    
    for (p = (unsigned char *) RAM_BASE; 
            p < ((unsigned char *) RAM_BASE + RAM_SIZE); p++)
      fe:	687b      	ldr	r3, [r7, #4]
     100:	f103 0301 	add.w	r3, r3, #1
     104:	607b      	str	r3, [r7, #4]
    NVIC_InitTypeDef NVIC_InitStructure;

    // Clean RAM area
    unsigned char *p;
    
    for (p = (unsigned char *) RAM_BASE; 
     106:	687a      	ldr	r2, [r7, #4]
     108:	f641 73ff 	movw	r3, #8191	; 0x1fff
     10c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     110:	429a      	cmp	r2, r3
     112:	d9f0      	bls.n	f6 <sysinit+0xe>
            p < ((unsigned char *) RAM_BASE + RAM_SIZE); p++)
        *p = 0;
    
    // Enable main (Quartz) oscillator
    clock_enable_main_osc();
     114:	f000 ffbe 	bl	1094 <clock_enable_main_osc>
    // Enable PLL: see also PLL_MUL and PLL_DIV constants
    clock_enable_pll();
     118:	f001 f828 	bl	116c <clock_enable_pll>

    // Low level initialization of the GPIO ports
    gpio_init();
     11c:	f001 f852 	bl	11c4 <gpio_init>
    // Low level initialization of the USART
    usart_init(USART_BAUDRATE);
     120:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
     124:	f001 fadc 	bl	16e0 <usart_init>
    // Low level initialization of the CAN
    CAN_init(f_cpu / 32 / CAN_BAUDRATE - 1);
     128:	f245 03ec 	movw	r3, #20716	; 0x50ec
     12c:	f2c0 0300 	movt	r3, #0
     130:	681b      	ldr	r3, [r3, #0]
     132:	ea4f 2213 	mov.w	r2, r3, lsr #8
     136:	f648 3359 	movw	r3, #35673	; 0x8b59
     13a:	f2c0 134f 	movt	r3, #335	; 0x14f
     13e:	fba3 1302 	umull	r1, r3, r3, r2
     142:	ea4f 1313 	mov.w	r3, r3, lsr #4
     146:	f103 33ff 	add.w	r3, r3, #4294967295
     14a:	4618      	mov	r0, r3
     14c:	f001 f8de 	bl	130c <CAN_init>
    CAN_set_filter(0, 0, 0);
     150:	f04f 0000 	mov.w	r0, #0
     154:	f04f 0100 	mov.w	r1, #0
     158:	f04f 0200 	mov.w	r2, #0
     15c:	f001 f97a 	bl	1454 <CAN_set_filter>

    // Initialize global variables (flags and queues)
    cr_needed = line_len = 0;
     160:	f240 23d0 	movw	r3, #720	; 0x2d0
     164:	f2c2 0300 	movt	r3, #8192	; 0x2000
     168:	f04f 0200 	mov.w	r2, #0
     16c:	601a      	str	r2, [r3, #0]
     16e:	f240 23d0 	movw	r3, #720	; 0x2d0
     172:	f2c2 0300 	movt	r3, #8192	; 0x2000
     176:	681a      	ldr	r2, [r3, #0]
     178:	f240 23c8 	movw	r3, #712	; 0x2c8
     17c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     180:	601a      	str	r2, [r3, #0]
    queue_init(&usart2can);
     182:	f240 100c 	movw	r0, #268	; 0x10c
     186:	f2c2 0000 	movt	r0, #8192	; 0x2000
     18a:	f000 fb71 	bl	870 <queue_init>
    queue_init(&can2usart);
     18e:	f240 0004 	movw	r0, #4
     192:	f2c2 0000 	movt	r0, #8192	; 0x2000
     196:	f000 fb6b 	bl	870 <queue_init>

    // Initialization of the Systick Timer
    // Parameter: period time: 1/n sec, where "n" is the parameter
    systick_init(4);
     19a:	f04f 0004 	mov.w	r0, #4
     19e:	f000 fff3 	bl	1188 <systick_init>

    // Enable the USART1 Interrupt
    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQChannel;
     1a2:	f04f 0325 	mov.w	r3, #37	; 0x25
     1a6:	703b      	strb	r3, [r7, #0]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     1a8:	f04f 0301 	mov.w	r3, #1
     1ac:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&NVIC_InitStructure);
     1ae:	463b      	mov	r3, r7
     1b0:	4618      	mov	r0, r3
     1b2:	f004 fadb 	bl	476c <NVIC_Init>
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
     1b6:	f643 0000 	movw	r0, #14336	; 0x3800
     1ba:	f2c4 0001 	movt	r0, #16385	; 0x4001
     1be:	f240 5125 	movw	r1, #1317	; 0x525
     1c2:	f04f 0201 	mov.w	r2, #1
     1c6:	f003 ff13 	bl	3ff0 <USART_ITConfig>

    // Enable CAN RX0 interrupt IRQ channel
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN_RX0_IRQChannel;
     1ca:	f04f 0314 	mov.w	r3, #20
     1ce:	703b      	strb	r3, [r7, #0]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     1d0:	f04f 0301 	mov.w	r3, #1
     1d4:	70fb      	strb	r3, [r7, #3]
    NVIC_Init(&NVIC_InitStructure);
     1d6:	463b      	mov	r3, r7
     1d8:	4618      	mov	r0, r3
     1da:	f004 fac7 	bl	476c <NVIC_Init>

    // CAN FIFO0 and FIFO1 message pending interrupt enable
    CAN_ITConfig(CAN_IT_FMP0, ENABLE);
     1de:	f04f 0002 	mov.w	r0, #2
     1e2:	f04f 0101 	mov.w	r1, #1
     1e6:	f002 ff8d 	bl	3104 <CAN_ITConfig>
    CAN_ITConfig(CAN_IT_FMP1, ENABLE);
     1ea:	f04f 0010 	mov.w	r0, #16
     1ee:	f04f 0101 	mov.w	r1, #1
     1f2:	f002 ff87 	bl	3104 <CAN_ITConfig>

    // Finally, the main function will be started
    while (1)
        main();
     1f6:	f000 f801 	bl	1fc <main>
     1fa:	e7fc      	b.n	1f6 <sysinit+0x10e>

000001fc <main>:
// ---------------------------------------------------------------------------
// The "main()" function is started by the "sysinit()" routine.
// The "sysinit()" is the function that is started when the MCU starts.
// ---------------------------------------------------------------------------

int main() {
     1fc:	b580      	push	{r7, lr}
     1fe:	b094      	sub	sp, #80	; 0x50
     200:	af02      	add	r7, sp, #8
    // A string to store text message to the "upper" CPU or user
    char str[MAX_STR_LEN];

    // The amount of the free RAM
    unsigned int free_mem = 1;
     202:	f04f 0301 	mov.w	r3, #1
     206:	647b      	str	r3, [r7, #68]	; 0x44

    // Pointer to a message in the message queue
    t_message *pmsg;

    // Predefine the value of the CAN baud rate 
    can_baudrate = CAN_BAUDRATE;
     208:	f240 2384 	movw	r3, #644	; 0x284
     20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     210:	f246 12a8 	movw	r2, #25000	; 0x61a8
     214:	601a      	str	r2, [r3, #0]
     216:	e000      	b.n	21a <main+0x1e>

            // The received and processed message should be removed from
            // the queue, so that some space appaers in the queue.
            queue_remove((t_queue *) &can2usart);
        }
    } /* while (1) ... */
     218:	bf00      	nop

    // Until I realize nirvana...
    while (1) {
        // Is there a new message in the USART->CAN queue?
        // The message arrives from the USART ISR.
        if (queue_get_non_blocking((t_queue *) &usart2can, &pmsg) == QUEUE_OK) {
     21a:	463b      	mov	r3, r7
     21c:	f240 100c 	movw	r0, #268	; 0x10c
     220:	f2c2 0000 	movt	r0, #8192	; 0x2000
     224:	4619      	mov	r1, r3
     226:	f000 fb65 	bl	8f4 <queue_get_non_blocking>
     22a:	4603      	mov	r3, r0
     22c:	2b00      	cmp	r3, #0
     22e:	f040 8256 	bne.w	6de <main+0x4e2>
            switch (pmsg->command & 0xffff) {
     232:	683b      	ldr	r3, [r7, #0]
     234:	681b      	ldr	r3, [r3, #0]
     236:	ea4f 4303 	mov.w	r3, r3, lsl #16
     23a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     23e:	2b04      	cmp	r3, #4
     240:	f000 8176 	beq.w	530 <main+0x334>
     244:	2b04      	cmp	r3, #4
     246:	d808      	bhi.n	25a <main+0x5e>
     248:	2b02      	cmp	r3, #2
     24a:	f000 8084 	beq.w	356 <main+0x15a>
     24e:	2b02      	cmp	r3, #2
     250:	f200 80dd 	bhi.w	40e <main+0x212>
     254:	2b00      	cmp	r3, #0
     256:	d03d      	beq.n	2d4 <main+0xd8>
     258:	e227      	b.n	6aa <main+0x4ae>
     25a:	2b07      	cmp	r3, #7
     25c:	d00c      	beq.n	278 <main+0x7c>
     25e:	2b07      	cmp	r3, #7
     260:	d803      	bhi.n	26a <main+0x6e>
     262:	2b05      	cmp	r3, #5
     264:	f000 81f4 	beq.w	650 <main+0x454>
     268:	e21f      	b.n	6aa <main+0x4ae>
     26a:	2b08      	cmp	r3, #8
     26c:	d03f      	beq.n	2ee <main+0xf2>
     26e:	f1b3 3fff 	cmp.w	r3, #4294967295
     272:	f000 8214 	beq.w	69e <main+0x4a2>
     276:	e218      	b.n	6aa <main+0x4ae>
                case USART_SET_BAUD:
                    // Predefined baud rate shall be changed
                    usart_baudrate = pmsg->param1;
     278:	683b      	ldr	r3, [r7, #0]
     27a:	685a      	ldr	r2, [r3, #4]
     27c:	f240 0300 	movw	r3, #0
     280:	f2c2 0300 	movt	r3, #8192	; 0x2000
     284:	601a      	str	r2, [r3, #0]
                    // Set the BAUD rate
                    usart_init(usart_baudrate);
     286:	f240 0300 	movw	r3, #0
     28a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     28e:	681b      	ldr	r3, [r3, #0]
     290:	4618      	mov	r0, r3
     292:	f001 fa25 	bl	16e0 <usart_init>

                    // Human-readable string...
                    usart_send_str("+ USART Baud rate: 0x");
     296:	f245 00f0 	movw	r0, #20720	; 0x50f0
     29a:	f2c0 0000 	movt	r0, #0
     29e:	f001 faeb 	bl	1878 <usart_send_str>
                    // + the numeric of baud rate converted to hexadecimal format
                    num2hex(usart_baudrate, str, 8);
     2a2:	f240 0300 	movw	r3, #0
     2a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2aa:	681a      	ldr	r2, [r3, #0]
     2ac:	f107 0304 	add.w	r3, r7, #4
     2b0:	4610      	mov	r0, r2
     2b2:	4619      	mov	r1, r3
     2b4:	f04f 0208 	mov.w	r2, #8
     2b8:	f000 feb6 	bl	1028 <num2hex>
                    // Send hexadecinal "string"
                    usart_send_str(str);
     2bc:	f107 0304 	add.w	r3, r7, #4
     2c0:	4618      	mov	r0, r3
     2c2:	f001 fad9 	bl	1878 <usart_send_str>
                    usart_send_str(".");
     2c6:	f245 1008 	movw	r0, #20744	; 0x5108
     2ca:	f2c0 0000 	movt	r0, #0
     2ce:	f001 fad3 	bl	1878 <usart_send_str>

                    break;
     2d2:	e1ea      	b.n	6aa <main+0x4ae>
                case CAN_VERSION:
                    // Get version information:
                    // A text message will be sent: 
                    // constant text + VERSION string 
                    // (which can be seen in "config.h")
                    usart_send_str("+ SER_CAN: ");
     2d4:	f245 100c 	movw	r0, #20748	; 0x510c
     2d8:	f2c0 0000 	movt	r0, #0
     2dc:	f001 facc 	bl	1878 <usart_send_str>
                    usart_send_str(DEV_VERSION);
     2e0:	f245 1018 	movw	r0, #20760	; 0x5118
     2e4:	f2c0 0000 	movt	r0, #0
     2e8:	f001 fac6 	bl	1878 <usart_send_str>
                    break;
     2ec:	e1dd      	b.n	6aa <main+0x4ae>

                case GET_FREE_MEM:
                    // Get free memory
                    usart_send_str("+ Free memory: 0x");
     2ee:	f245 1048 	movw	r0, #20808	; 0x5148
     2f2:	f2c0 0000 	movt	r0, #0
     2f6:	f001 fabf 	bl	1878 <usart_send_str>
                    // Convert the number to hexadecimal format
                    free_mem = get_free_mem();
     2fa:	f000 fa7d 	bl	7f8 <get_free_mem>
     2fe:	4603      	mov	r3, r0
     300:	647b      	str	r3, [r7, #68]	; 0x44
                    num2hex(free_mem, str, 8);
     302:	f107 0304 	add.w	r3, r7, #4
     306:	6c78      	ldr	r0, [r7, #68]	; 0x44
     308:	4619      	mov	r1, r3
     30a:	f04f 0208 	mov.w	r2, #8
     30e:	f000 fe8b 	bl	1028 <num2hex>
                    // Print the amount of free memory
                    usart_send_str(str);
     312:	f107 0304 	add.w	r3, r7, #4
     316:	4618      	mov	r0, r3
     318:	f001 faae 	bl	1878 <usart_send_str>

                    // Memory in use
                    usart_send_str(" bytes, memory in use: 0x");
     31c:	f245 105c 	movw	r0, #20828	; 0x515c
     320:	f2c0 0000 	movt	r0, #0
     324:	f001 faa8 	bl	1878 <usart_send_str>
                    // Convert the number to hexadecimal format
                    num2hex(RAM_SIZE - free_mem, str, 8);
     328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     32a:	f5c3 5200 	rsb	r2, r3, #8192	; 0x2000
     32e:	f107 0304 	add.w	r3, r7, #4
     332:	4610      	mov	r0, r2
     334:	4619      	mov	r1, r3
     336:	f04f 0208 	mov.w	r2, #8
     33a:	f000 fe75 	bl	1028 <num2hex>
                    // Print the amount of used memory
                    usart_send_str(str);
     33e:	f107 0304 	add.w	r3, r7, #4
     342:	4618      	mov	r0, r3
     344:	f001 fa98 	bl	1878 <usart_send_str>
                    usart_send_str(" bytes.");
     348:	f245 1078 	movw	r0, #20856	; 0x5178
     34c:	f2c0 0000 	movt	r0, #0
     350:	f001 fa92 	bl	1878 <usart_send_str>

                    break;
     354:	e1a9      	b.n	6aa <main+0x4ae>

                case CAN_SET_BAUD:
                    // Predefined baud rate shall be changed
                    can_baudrate = pmsg->param1;
     356:	683b      	ldr	r3, [r7, #0]
     358:	685a      	ldr	r2, [r3, #4]
     35a:	f240 2384 	movw	r3, #644	; 0x284
     35e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     362:	601a      	str	r2, [r3, #0]
                    // See equation above
                    CAN_set_prescaler(f_cpu / 32 / can_baudrate - 1);
     364:	f245 03ec 	movw	r3, #20716	; 0x50ec
     368:	f2c0 0300 	movt	r3, #0
     36c:	681b      	ldr	r3, [r3, #0]
     36e:	ea4f 1253 	mov.w	r2, r3, lsr #5
     372:	f240 2384 	movw	r3, #644	; 0x284
     376:	f2c2 0300 	movt	r3, #8192	; 0x2000
     37a:	681b      	ldr	r3, [r3, #0]
     37c:	fbb2 f3f3 	udiv	r3, r2, r3
     380:	f103 33ff 	add.w	r3, r3, #4294967295
     384:	4618      	mov	r0, r3
     386:	f001 f82b 	bl	13e0 <CAN_set_prescaler>

                    // Human-readable string...
                    usart_send_str("+ CAN Baud rate: 0x");
     38a:	f245 1080 	movw	r0, #20864	; 0x5180
     38e:	f2c0 0000 	movt	r0, #0
     392:	f001 fa71 	bl	1878 <usart_send_str>
                    // + the numeric of baud rate converted to hexadecimal format
                    num2hex(can_baudrate, str, 8);
     396:	f240 2384 	movw	r3, #644	; 0x284
     39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     39e:	681a      	ldr	r2, [r3, #0]
     3a0:	f107 0304 	add.w	r3, r7, #4
     3a4:	4610      	mov	r0, r2
     3a6:	4619      	mov	r1, r3
     3a8:	f04f 0208 	mov.w	r2, #8
     3ac:	f000 fe3c 	bl	1028 <num2hex>
                    // Send hexadecinal "string"
                    usart_send_str(str);
     3b0:	f107 0304 	add.w	r3, r7, #4
     3b4:	4618      	mov	r0, r3
     3b6:	f001 fa5f 	bl	1878 <usart_send_str>

                    usart_send_str(", divisor: 0x");
     3ba:	f245 1094 	movw	r0, #20884	; 0x5194
     3be:	f2c0 0000 	movt	r0, #0
     3c2:	f001 fa59 	bl	1878 <usart_send_str>
                    num2hex(f_cpu / 32 / can_baudrate - 1, str, 8);
     3c6:	f245 03ec 	movw	r3, #20716	; 0x50ec
     3ca:	f2c0 0300 	movt	r3, #0
     3ce:	681b      	ldr	r3, [r3, #0]
     3d0:	ea4f 1253 	mov.w	r2, r3, lsr #5
     3d4:	f240 2384 	movw	r3, #644	; 0x284
     3d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     3dc:	681b      	ldr	r3, [r3, #0]
     3de:	fbb2 f3f3 	udiv	r3, r2, r3
     3e2:	f103 32ff 	add.w	r2, r3, #4294967295
     3e6:	f107 0304 	add.w	r3, r7, #4
     3ea:	4610      	mov	r0, r2
     3ec:	4619      	mov	r1, r3
     3ee:	f04f 0208 	mov.w	r2, #8
     3f2:	f000 fe19 	bl	1028 <num2hex>
                    usart_send_str(str);
     3f6:	f107 0304 	add.w	r3, r7, #4
     3fa:	4618      	mov	r0, r3
     3fc:	f001 fa3c 	bl	1878 <usart_send_str>
                    usart_send_str(".");
     400:	f245 1008 	movw	r0, #20744	; 0x5108
     404:	f2c0 0000 	movt	r0, #0
     408:	f001 fa36 	bl	1878 <usart_send_str>
                    break;
     40c:	e14d      	b.n	6aa <main+0x4ae>

                case CAN_SET_FILTER:
                    // Set filter mask value:
                    // The filter identifier must be less than 14!
                    if ((pmsg->param1 < 14) && (pmsg->param1 >= 0)) {
     40e:	683b      	ldr	r3, [r7, #0]
     410:	685b      	ldr	r3, [r3, #4]
     412:	2b0d      	cmp	r3, #13
     414:	f200 8085 	bhi.w	522 <main+0x326>
                        // Save mask value to the array defined above
                        can_filter[pmsg->param1] = pmsg->param2 & 0x9fffffff;
     418:	683b      	ldr	r3, [r7, #0]
     41a:	685a      	ldr	r2, [r3, #4]
     41c:	683b      	ldr	r3, [r7, #0]
     41e:	689b      	ldr	r3, [r3, #8]
     420:	f023 41c0 	bic.w	r1, r3, #1610612736	; 0x60000000
     424:	f240 2314 	movw	r3, #532	; 0x214
     428:	f2c2 0300 	movt	r3, #8192	; 0x2000
     42c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        // Set filter according to the saved value
                        CAN_set_filter(pmsg->param1, can_filter[pmsg->param1],
     430:	683b      	ldr	r3, [r7, #0]
     432:	6859      	ldr	r1, [r3, #4]
     434:	683b      	ldr	r3, [r7, #0]
     436:	685a      	ldr	r2, [r3, #4]
     438:	f240 2314 	movw	r3, #532	; 0x214
     43c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     440:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            can_id[pmsg->param1]);
     444:	683b      	ldr	r3, [r7, #0]
     446:	6858      	ldr	r0, [r3, #4]
                    // The filter identifier must be less than 14!
                    if ((pmsg->param1 < 14) && (pmsg->param1 >= 0)) {
                        // Save mask value to the array defined above
                        can_filter[pmsg->param1] = pmsg->param2 & 0x9fffffff;
                        // Set filter according to the saved value
                        CAN_set_filter(pmsg->param1, can_filter[pmsg->param1],
     448:	f240 234c 	movw	r3, #588	; 0x24c
     44c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     450:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     454:	4608      	mov	r0, r1
     456:	4611      	mov	r1, r2
     458:	461a      	mov	r2, r3
     45a:	f000 fffb 	bl	1454 <CAN_set_filter>
                            can_id[pmsg->param1]);

                        // A little string to the user:
                        // The values will be sent back
                        usart_send_str("+ Filter 0x");
     45e:	f245 10a4 	movw	r0, #20900	; 0x51a4
     462:	f2c0 0000 	movt	r0, #0
     466:	f001 fa07 	bl	1878 <usart_send_str>
                        num2hex(pmsg->param1, str, 1);
     46a:	683b      	ldr	r3, [r7, #0]
     46c:	685a      	ldr	r2, [r3, #4]
     46e:	f107 0304 	add.w	r3, r7, #4
     472:	4610      	mov	r0, r2
     474:	4619      	mov	r1, r3
     476:	f04f 0201 	mov.w	r2, #1
     47a:	f000 fdd5 	bl	1028 <num2hex>
                        usart_send_str(str);
     47e:	f107 0304 	add.w	r3, r7, #4
     482:	4618      	mov	r0, r3
     484:	f001 f9f8 	bl	1878 <usart_send_str>

                        usart_send_str(": Mask: 0x");
     488:	f245 10b0 	movw	r0, #20912	; 0x51b0
     48c:	f2c0 0000 	movt	r0, #0
     490:	f001 f9f2 	bl	1878 <usart_send_str>
                        num2hex(can_filter[pmsg->param1], str, 8);
     494:	683b      	ldr	r3, [r7, #0]
     496:	685a      	ldr	r2, [r3, #4]
     498:	f240 2314 	movw	r3, #532	; 0x214
     49c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     4a4:	f107 0304 	add.w	r3, r7, #4
     4a8:	4610      	mov	r0, r2
     4aa:	4619      	mov	r1, r3
     4ac:	f04f 0208 	mov.w	r2, #8
     4b0:	f000 fdba 	bl	1028 <num2hex>
                        usart_send_str(str);
     4b4:	f107 0304 	add.w	r3, r7, #4
     4b8:	4618      	mov	r0, r3
     4ba:	f001 f9dd 	bl	1878 <usart_send_str>

                        usart_send_str(", Id: 0x");
     4be:	f245 10bc 	movw	r0, #20924	; 0x51bc
     4c2:	f2c0 0000 	movt	r0, #0
     4c6:	f001 f9d7 	bl	1878 <usart_send_str>
                        num2hex(can_id[pmsg->param1], str, 8);
     4ca:	683b      	ldr	r3, [r7, #0]
     4cc:	685a      	ldr	r2, [r3, #4]
     4ce:	f240 234c 	movw	r3, #588	; 0x24c
     4d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     4da:	f107 0304 	add.w	r3, r7, #4
     4de:	4610      	mov	r0, r2
     4e0:	4619      	mov	r1, r3
     4e2:	f04f 0208 	mov.w	r2, #8
     4e6:	f000 fd9f 	bl	1028 <num2hex>
                        usart_send_str(str);
     4ea:	f107 0304 	add.w	r3, r7, #4
     4ee:	4618      	mov	r0, r3
     4f0:	f001 f9c2 	bl	1878 <usart_send_str>

                        if (can_filter[pmsg->param1] & 0x80000000)
     4f4:	683b      	ldr	r3, [r7, #0]
     4f6:	685a      	ldr	r2, [r3, #4]
     4f8:	f240 2314 	movw	r3, #532	; 0x214
     4fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     504:	2b00      	cmp	r3, #0
     506:	da05      	bge.n	514 <main+0x318>
                            usart_send_str(", RTR");
     508:	f245 10c8 	movw	r0, #20936	; 0x51c8
     50c:	f2c0 0000 	movt	r0, #0
     510:	f001 f9b2 	bl	1878 <usart_send_str>

                        usart_send_str(".");
     514:	f245 1008 	movw	r0, #20744	; 0x5108
     518:	f2c0 0000 	movt	r0, #0
     51c:	f001 f9ac 	bl	1878 <usart_send_str>
                        // if the filter ID >= 14 or ID < 0, then an
                        // error message should be sent
                        usart_send_str("- Invalid filter number.");
                    }

                    break;
     520:	e0c3      	b.n	6aa <main+0x4ae>

                        usart_send_str(".");
                    } else {
                        // if the filter ID >= 14 or ID < 0, then an
                        // error message should be sent
                        usart_send_str("- Invalid filter number.");
     522:	f245 10d0 	movw	r0, #20944	; 0x51d0
     526:	f2c0 0000 	movt	r0, #0
     52a:	f001 f9a5 	bl	1878 <usart_send_str>
                    }

                    break;
     52e:	e0bc      	b.n	6aa <main+0x4ae>

                case CAN_SET_ID:
                    // Set ID value:
                    // The filter identifier must be less than 14!
                    if ((pmsg->param1 < 14) && (pmsg->param1 >= 0)) {
     530:	683b      	ldr	r3, [r7, #0]
     532:	685b      	ldr	r3, [r3, #4]
     534:	2b0d      	cmp	r3, #13
     536:	f200 8084 	bhi.w	642 <main+0x446>
                        // Save filter ID value to the array defined above
                        can_id[pmsg->param1] = pmsg->param2 & 0x9fffffff;
     53a:	683b      	ldr	r3, [r7, #0]
     53c:	685a      	ldr	r2, [r3, #4]
     53e:	683b      	ldr	r3, [r7, #0]
     540:	689b      	ldr	r3, [r3, #8]
     542:	f023 41c0 	bic.w	r1, r3, #1610612736	; 0x60000000
     546:	f240 234c 	movw	r3, #588	; 0x24c
     54a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     54e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                        // Set filter according to the saved value
                        CAN_set_filter(0, can_filter[pmsg->param1], can_id[pmsg->param1]);
     552:	683b      	ldr	r3, [r7, #0]
     554:	685a      	ldr	r2, [r3, #4]
     556:	f240 2314 	movw	r3, #532	; 0x214
     55a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     55e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     562:	683b      	ldr	r3, [r7, #0]
     564:	6859      	ldr	r1, [r3, #4]
     566:	f240 234c 	movw	r3, #588	; 0x24c
     56a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     56e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
     572:	f04f 0000 	mov.w	r0, #0
     576:	4611      	mov	r1, r2
     578:	461a      	mov	r2, r3
     57a:	f000 ff6b 	bl	1454 <CAN_set_filter>

                        // A little string to the user:
                        // The values will be sent back
                        usart_send_str("+ Filter 0x");
     57e:	f245 10a4 	movw	r0, #20900	; 0x51a4
     582:	f2c0 0000 	movt	r0, #0
     586:	f001 f977 	bl	1878 <usart_send_str>
                        num2hex(pmsg->param1, str, 1);
     58a:	683b      	ldr	r3, [r7, #0]
     58c:	685a      	ldr	r2, [r3, #4]
     58e:	f107 0304 	add.w	r3, r7, #4
     592:	4610      	mov	r0, r2
     594:	4619      	mov	r1, r3
     596:	f04f 0201 	mov.w	r2, #1
     59a:	f000 fd45 	bl	1028 <num2hex>
                        usart_send_str(str);
     59e:	f107 0304 	add.w	r3, r7, #4
     5a2:	4618      	mov	r0, r3
     5a4:	f001 f968 	bl	1878 <usart_send_str>

                        usart_send_str(": Mask: 0x");
     5a8:	f245 10b0 	movw	r0, #20912	; 0x51b0
     5ac:	f2c0 0000 	movt	r0, #0
     5b0:	f001 f962 	bl	1878 <usart_send_str>
                        num2hex(can_filter[pmsg->param1], str, 8);
     5b4:	683b      	ldr	r3, [r7, #0]
     5b6:	685a      	ldr	r2, [r3, #4]
     5b8:	f240 2314 	movw	r3, #532	; 0x214
     5bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     5c4:	f107 0304 	add.w	r3, r7, #4
     5c8:	4610      	mov	r0, r2
     5ca:	4619      	mov	r1, r3
     5cc:	f04f 0208 	mov.w	r2, #8
     5d0:	f000 fd2a 	bl	1028 <num2hex>
                        usart_send_str(str);
     5d4:	f107 0304 	add.w	r3, r7, #4
     5d8:	4618      	mov	r0, r3
     5da:	f001 f94d 	bl	1878 <usart_send_str>

                        usart_send_str(", Id: 0x");
     5de:	f245 10bc 	movw	r0, #20924	; 0x51bc
     5e2:	f2c0 0000 	movt	r0, #0
     5e6:	f001 f947 	bl	1878 <usart_send_str>
                        num2hex(can_id[pmsg->param1], str, 8);
     5ea:	683b      	ldr	r3, [r7, #0]
     5ec:	685a      	ldr	r2, [r3, #4]
     5ee:	f240 234c 	movw	r3, #588	; 0x24c
     5f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
     5fa:	f107 0304 	add.w	r3, r7, #4
     5fe:	4610      	mov	r0, r2
     600:	4619      	mov	r1, r3
     602:	f04f 0208 	mov.w	r2, #8
     606:	f000 fd0f 	bl	1028 <num2hex>
                        usart_send_str(str);
     60a:	f107 0304 	add.w	r3, r7, #4
     60e:	4618      	mov	r0, r3
     610:	f001 f932 	bl	1878 <usart_send_str>

                        if (can_filter[pmsg->param1] & 0x80000000)
     614:	683b      	ldr	r3, [r7, #0]
     616:	685a      	ldr	r2, [r3, #4]
     618:	f240 2314 	movw	r3, #532	; 0x214
     61c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     624:	2b00      	cmp	r3, #0
     626:	da05      	bge.n	634 <main+0x438>
                            usart_send_str(", RTR");
     628:	f245 10c8 	movw	r0, #20936	; 0x51c8
     62c:	f2c0 0000 	movt	r0, #0
     630:	f001 f922 	bl	1878 <usart_send_str>

                        usart_send_str(".");
     634:	f245 1008 	movw	r0, #20744	; 0x5108
     638:	f2c0 0000 	movt	r0, #0
     63c:	f001 f91c 	bl	1878 <usart_send_str>
                        // if the filter ID >= 14 or ID < 0, then an
                        // error message should be sent
                        usart_send_str("- Invalid filter number.");
                    }

                    break;
     640:	e033      	b.n	6aa <main+0x4ae>

                        usart_send_str(".");
                    } else {
                        // if the filter ID >= 14 or ID < 0, then an
                        // error message should be sent
                        usart_send_str("- Invalid filter number.");
     642:	f245 10d0 	movw	r0, #20944	; 0x51d0
     646:	f2c0 0000 	movt	r0, #0
     64a:	f001 f915 	bl	1878 <usart_send_str>
                    }

                    break;
     64e:	e02c      	b.n	6aa <main+0x4ae>

                case CAN_SEND:
                    // Send message through CAN bus:
                    // Try to send the message, on success...
                    if (CAN_send(pmsg->param1 & 0x1fffffff, 
     650:	683b      	ldr	r3, [r7, #0]
     652:	685b      	ldr	r3, [r3, #4]
     654:	f023 4060 	bic.w	r0, r3, #3758096384	; 0xe0000000
                                 pmsg->command >> 16, 
     658:	683b      	ldr	r3, [r7, #0]
                    break;

                case CAN_SEND:
                    // Send message through CAN bus:
                    // Try to send the message, on success...
                    if (CAN_send(pmsg->param1 & 0x1fffffff, 
     65a:	681b      	ldr	r3, [r3, #0]
     65c:	ea4f 4113 	mov.w	r1, r3, lsr #16
                                 pmsg->command >> 16, 
                                 pmsg->param2, pmsg->param3,
     660:	683b      	ldr	r3, [r7, #0]
                    break;

                case CAN_SEND:
                    // Send message through CAN bus:
                    // Try to send the message, on success...
                    if (CAN_send(pmsg->param1 & 0x1fffffff, 
     662:	689a      	ldr	r2, [r3, #8]
                                 pmsg->command >> 16, 
                                 pmsg->param2, pmsg->param3,
     664:	683b      	ldr	r3, [r7, #0]
                    break;

                case CAN_SEND:
                    // Send message through CAN bus:
                    // Try to send the message, on success...
                    if (CAN_send(pmsg->param1 & 0x1fffffff, 
     666:	68db      	ldr	r3, [r3, #12]
                                 pmsg->command >> 16, 
                                 pmsg->param2, pmsg->param3,
                                 pmsg->param1 & 0x80000000) == CANTXOK) {
     668:	f8d7 c000 	ldr.w	ip, [r7]
                    break;

                case CAN_SEND:
                    // Send message through CAN bus:
                    // Try to send the message, on success...
                    if (CAN_send(pmsg->param1 & 0x1fffffff, 
     66c:	f8dc c004 	ldr.w	ip, [ip, #4]
     670:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     674:	f8cd c000 	str.w	ip, [sp]
     678:	f000 ff30 	bl	14dc <CAN_send>
     67c:	4603      	mov	r3, r0
     67e:	2b01      	cmp	r3, #1
     680:	d106      	bne.n	690 <main+0x494>
                                 pmsg->command >> 16, 
                                 pmsg->param2, pmsg->param3,
                                 pmsg->param1 & 0x80000000) == CANTXOK) {
                        // ... a positive acknowledge is sent ...
                        usart_send_str("+ Message successfully sent.");
     682:	f245 10ec 	movw	r0, #20972	; 0x51ec
     686:	f2c0 0000 	movt	r0, #0
     68a:	f001 f8f5 	bl	1878 <usart_send_str>
                    } else {
                        // ... else a warning will be received on USART
                        usart_send_str("- Unable to send message.");
                    }
                    break;
     68e:	e00c      	b.n	6aa <main+0x4ae>
                                 pmsg->param1 & 0x80000000) == CANTXOK) {
                        // ... a positive acknowledge is sent ...
                        usart_send_str("+ Message successfully sent.");
                    } else {
                        // ... else a warning will be received on USART
                        usart_send_str("- Unable to send message.");
     690:	f245 200c 	movw	r0, #21004	; 0x520c
     694:	f2c0 0000 	movt	r0, #0
     698:	f001 f8ee 	bl	1878 <usart_send_str>
                    }
                    break;
     69c:	e005      	b.n	6aa <main+0x4ae>

                case CAN_UNKNOWN:
                    // When an unknown CAN message arrives, a warning should appear
                    usart_send_str("- Invalid command.");
     69e:	f245 2028 	movw	r0, #21032	; 0x5228
     6a2:	f2c0 0000 	movt	r0, #0
     6a6:	f001 f8e7 	bl	1878 <usart_send_str>
            }

            // After sending the message(s), a newline should be sent, as well.
            // But what kind of newline? CR+LF or LF only? 
            // It depends on the "upper" device or on the user.
            if (cr_needed)
     6aa:	f240 23c8 	movw	r3, #712	; 0x2c8
     6ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
     6b2:	681b      	ldr	r3, [r3, #0]
     6b4:	2b00      	cmp	r3, #0
     6b6:	d006      	beq.n	6c6 <main+0x4ca>
                usart_send_str("\r\n");
     6b8:	f245 203c 	movw	r0, #21052	; 0x523c
     6bc:	f2c0 0000 	movt	r0, #0
     6c0:	f001 f8da 	bl	1878 <usart_send_str>
     6c4:	e005      	b.n	6d2 <main+0x4d6>
            else
                usart_send_str("\n");
     6c6:	f245 2040 	movw	r0, #21056	; 0x5240
     6ca:	f2c0 0000 	movt	r0, #0
     6ce:	f001 f8d3 	bl	1878 <usart_send_str>

            // The received and processed message should be removed from
            // the queue, so that some space appaers in the queue.
            queue_remove((t_queue *) &usart2can);
     6d2:	f240 100c 	movw	r0, #268	; 0x10c
     6d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
     6da:	f000 f969 	bl	9b0 <queue_remove>
        }

        // If there is a message in the CAN queue arrived from the CAN ISR...
        if (queue_get_non_blocking((t_queue *)&can2usart, &pmsg) == QUEUE_OK) {
     6de:	463b      	mov	r3, r7
     6e0:	f240 0004 	movw	r0, #4
     6e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
     6e8:	4619      	mov	r1, r3
     6ea:	f000 f903 	bl	8f4 <queue_get_non_blocking>
     6ee:	4603      	mov	r3, r0
     6f0:	2b00      	cmp	r3, #0
     6f2:	f47f ad91 	bne.w	218 <main+0x1c>
            // Provide a string that contains the ID, ...
            usart_send_str("# id: 0x");
     6f6:	f245 2044 	movw	r0, #21060	; 0x5244
     6fa:	f2c0 0000 	movt	r0, #0
     6fe:	f001 f8bb 	bl	1878 <usart_send_str>
            num2hex(pmsg->param1 & 0x1fffffff, str, 8);
     702:	683b      	ldr	r3, [r7, #0]
     704:	685b      	ldr	r3, [r3, #4]
     706:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
     70a:	f107 0304 	add.w	r3, r7, #4
     70e:	4610      	mov	r0, r2
     710:	4619      	mov	r1, r3
     712:	f04f 0208 	mov.w	r2, #8
     716:	f000 fc87 	bl	1028 <num2hex>
            usart_send_str(str);
     71a:	f107 0304 	add.w	r3, r7, #4
     71e:	4618      	mov	r0, r3
     720:	f001 f8aa 	bl	1878 <usart_send_str>

            // ... length ...
            usart_send_str(", length: ");
     724:	f245 2050 	movw	r0, #21072	; 0x5250
     728:	f2c0 0000 	movt	r0, #0
     72c:	f001 f8a4 	bl	1878 <usart_send_str>
            num2hex(pmsg->command & 0xffff, str, 1);
     730:	683b      	ldr	r3, [r7, #0]
     732:	681b      	ldr	r3, [r3, #0]
     734:	ea4f 4303 	mov.w	r3, r3, lsl #16
     738:	ea4f 4313 	mov.w	r3, r3, lsr #16
     73c:	f107 0204 	add.w	r2, r7, #4
     740:	4618      	mov	r0, r3
     742:	4611      	mov	r1, r2
     744:	f04f 0201 	mov.w	r2, #1
     748:	f000 fc6e 	bl	1028 <num2hex>
            usart_send_str(str);
     74c:	f107 0304 	add.w	r3, r7, #4
     750:	4618      	mov	r0, r3
     752:	f001 f891 	bl	1878 <usart_send_str>

            // ... and data field.
            usart_send_str(", data: 0x");
     756:	f245 205c 	movw	r0, #21084	; 0x525c
     75a:	f2c0 0000 	movt	r0, #0
     75e:	f001 f88b 	bl	1878 <usart_send_str>
            num2hex(pmsg->param2, str, 8);
     762:	683b      	ldr	r3, [r7, #0]
     764:	689a      	ldr	r2, [r3, #8]
     766:	f107 0304 	add.w	r3, r7, #4
     76a:	4610      	mov	r0, r2
     76c:	4619      	mov	r1, r3
     76e:	f04f 0208 	mov.w	r2, #8
     772:	f000 fc59 	bl	1028 <num2hex>
            usart_send_str(str);
     776:	f107 0304 	add.w	r3, r7, #4
     77a:	4618      	mov	r0, r3
     77c:	f001 f87c 	bl	1878 <usart_send_str>
            num2hex(pmsg->param3, str, 8);
     780:	683b      	ldr	r3, [r7, #0]
     782:	68da      	ldr	r2, [r3, #12]
     784:	f107 0304 	add.w	r3, r7, #4
     788:	4610      	mov	r0, r2
     78a:	4619      	mov	r1, r3
     78c:	f04f 0208 	mov.w	r2, #8
     790:	f000 fc4a 	bl	1028 <num2hex>
            usart_send_str(str);
     794:	f107 0304 	add.w	r3, r7, #4
     798:	4618      	mov	r0, r3
     79a:	f001 f86d 	bl	1878 <usart_send_str>

            // Remote frame?
            if (pmsg->command >> 16)
     79e:	683b      	ldr	r3, [r7, #0]
     7a0:	681b      	ldr	r3, [r3, #0]
     7a2:	ea4f 4313 	mov.w	r3, r3, lsr #16
     7a6:	2b00      	cmp	r3, #0
     7a8:	d005      	beq.n	7b6 <main+0x5ba>
                usart_send_str(", RTR");
     7aa:	f245 10c8 	movw	r0, #20936	; 0x51c8
     7ae:	f2c0 0000 	movt	r0, #0
     7b2:	f001 f861 	bl	1878 <usart_send_str>

            usart_send_str(".");
     7b6:	f245 1008 	movw	r0, #20744	; 0x5108
     7ba:	f2c0 0000 	movt	r0, #0
     7be:	f001 f85b 	bl	1878 <usart_send_str>

            // The string will be terminated as described above.
            if (cr_needed)
     7c2:	f240 23c8 	movw	r3, #712	; 0x2c8
     7c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     7ca:	681b      	ldr	r3, [r3, #0]
     7cc:	2b00      	cmp	r3, #0
     7ce:	d006      	beq.n	7de <main+0x5e2>
                usart_send_str("\r\n");
     7d0:	f245 203c 	movw	r0, #21052	; 0x523c
     7d4:	f2c0 0000 	movt	r0, #0
     7d8:	f001 f84e 	bl	1878 <usart_send_str>
     7dc:	e005      	b.n	7ea <main+0x5ee>
            else
                usart_send_str("\n");
     7de:	f245 2040 	movw	r0, #21056	; 0x5240
     7e2:	f2c0 0000 	movt	r0, #0
     7e6:	f001 f847 	bl	1878 <usart_send_str>

            // The received and processed message should be removed from
            // the queue, so that some space appaers in the queue.
            queue_remove((t_queue *) &can2usart);
     7ea:	f240 0004 	movw	r0, #4
     7ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
     7f2:	f000 f8dd 	bl	9b0 <queue_remove>
        }
    } /* while (1) ... */
     7f6:	e510      	b.n	21a <main+0x1e>

000007f8 <get_free_mem>:

// ---------------------------------------------------------------------------
// The get_free_mem() function determines the free memory (RAM).
// ---------------------------------------------------------------------------

unsigned int get_free_mem() {
     7f8:	b480      	push	{r7}
     7fa:	b085      	sub	sp, #20
     7fc:	af00      	add	r7, sp, #0
    unsigned char *p = (unsigned char *) RAM_BASE;
     7fe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     802:	603b      	str	r3, [r7, #0]
    unsigned int i, flag, free = 0;
     804:	f04f 0300 	mov.w	r3, #0
     808:	60fb      	str	r3, [r7, #12]

    for (; p < ((unsigned char *) RAM_BASE + RAM_SIZE); p += PAGE_SIZE) {
     80a:	e021      	b.n	850 <get_free_mem+0x58>
        for (flag = 1, i = 0; i < PAGE_SIZE; i++)
     80c:	f04f 0301 	mov.w	r3, #1
     810:	60bb      	str	r3, [r7, #8]
     812:	f04f 0300 	mov.w	r3, #0
     816:	607b      	str	r3, [r7, #4]
     818:	e00c      	b.n	834 <get_free_mem+0x3c>
            if (p[i] != 0)
     81a:	683a      	ldr	r2, [r7, #0]
     81c:	687b      	ldr	r3, [r7, #4]
     81e:	4413      	add	r3, r2
     820:	781b      	ldrb	r3, [r3, #0]
     822:	2b00      	cmp	r3, #0
     824:	d002      	beq.n	82c <get_free_mem+0x34>
                flag = 0;
     826:	f04f 0300 	mov.w	r3, #0
     82a:	60bb      	str	r3, [r7, #8]
unsigned int get_free_mem() {
    unsigned char *p = (unsigned char *) RAM_BASE;
    unsigned int i, flag, free = 0;

    for (; p < ((unsigned char *) RAM_BASE + RAM_SIZE); p += PAGE_SIZE) {
        for (flag = 1, i = 0; i < PAGE_SIZE; i++)
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	f103 0301 	add.w	r3, r3, #1
     832:	607b      	str	r3, [r7, #4]
     834:	687b      	ldr	r3, [r7, #4]
     836:	2bff      	cmp	r3, #255	; 0xff
     838:	d9ef      	bls.n	81a <get_free_mem+0x22>
            if (p[i] != 0)
                flag = 0;

        if (flag)
     83a:	68bb      	ldr	r3, [r7, #8]
     83c:	2b00      	cmp	r3, #0
     83e:	d003      	beq.n	848 <get_free_mem+0x50>
            free++;
     840:	68fb      	ldr	r3, [r7, #12]
     842:	f103 0301 	add.w	r3, r3, #1
     846:	60fb      	str	r3, [r7, #12]

unsigned int get_free_mem() {
    unsigned char *p = (unsigned char *) RAM_BASE;
    unsigned int i, flag, free = 0;

    for (; p < ((unsigned char *) RAM_BASE + RAM_SIZE); p += PAGE_SIZE) {
     848:	683b      	ldr	r3, [r7, #0]
     84a:	f503 7380 	add.w	r3, r3, #256	; 0x100
     84e:	603b      	str	r3, [r7, #0]
     850:	683a      	ldr	r2, [r7, #0]
     852:	f641 73ff 	movw	r3, #8191	; 0x1fff
     856:	f2c2 0300 	movt	r3, #8192	; 0x2000
     85a:	429a      	cmp	r2, r3
     85c:	d9d6      	bls.n	80c <get_free_mem+0x14>

        if (flag)
            free++;
    }

    return free * PAGE_SIZE;
     85e:	68fb      	ldr	r3, [r7, #12]
     860:	ea4f 2303 	mov.w	r3, r3, lsl #8
}
     864:	4618      	mov	r0, r3
     866:	f107 0714 	add.w	r7, r7, #20
     86a:	46bd      	mov	sp, r7
     86c:	bc80      	pop	{r7}
     86e:	4770      	bx	lr

00000870 <queue_init>:
// ---------------------------------------------------------------------------
// Function to initialize the queue
// The parameter is the pointer to the queue
// ---------------------------------------------------------------------------

void queue_init (t_queue *queue) {
     870:	b480      	push	{r7}
     872:	b083      	sub	sp, #12
     874:	af00      	add	r7, sp, #0
     876:	6078      	str	r0, [r7, #4]
    queue->rd_ptr = 0;
     878:	687b      	ldr	r3, [r7, #4]
     87a:	f04f 0200 	mov.w	r2, #0
     87e:	611a      	str	r2, [r3, #16]
    queue->wr_ptr = 0;
     880:	687b      	ldr	r3, [r7, #4]
     882:	f04f 0200 	mov.w	r2, #0
     886:	615a      	str	r2, [r3, #20]
}
     888:	f107 070c 	add.w	r7, r7, #12
     88c:	46bd      	mov	sp, r7
     88e:	bc80      	pop	{r7}
     890:	4770      	bx	lr
     892:	bf00      	nop

00000894 <queue_put_non_blocking>:
// (return value is QUEUE_OK).
// If the queue is full, the return value will be QUEUE_FULL.
// Parameters: pointer to the queue, pointer to the message structure
// ---------------------------------------------------------------------------

t_queue_result queue_put_non_blocking(t_queue *queue, t_message *msg) {
     894:	b480      	push	{r7}
     896:	b085      	sub	sp, #20
     898:	af00      	add	r7, sp, #0
     89a:	6078      	str	r0, [r7, #4]
     89c:	6039      	str	r1, [r7, #0]
    int k;

    // If the rd_ptr == wr_ptr, the queue is empty.
    // If the rd_ptr != wr_ptr, and both of them point to the same item, 
    // the queue is full.
    if ((queue->wr_ptr != queue->rd_ptr) && ((queue->wr_ptr % QUEUE_SIZE) 
     89e:	687b      	ldr	r3, [r7, #4]
     8a0:	695a      	ldr	r2, [r3, #20]
     8a2:	687b      	ldr	r3, [r7, #4]
     8a4:	691b      	ldr	r3, [r3, #16]
     8a6:	429a      	cmp	r2, r3
     8a8:	d002      	beq.n	8b0 <queue_put_non_blocking+0x1c>
            == (queue->rd_ptr % QUEUE_SIZE))) {
        return QUEUE_FULL;
     8aa:	f04f 0301 	mov.w	r3, #1
     8ae:	e01b      	b.n	8e8 <queue_put_non_blocking+0x54>
    } else {
        // Copy the message into the queue
        for (k = 0; k < sizeof(t_message); k++)
     8b0:	f04f 0300 	mov.w	r3, #0
     8b4:	60fb      	str	r3, [r7, #12]
     8b6:	e00c      	b.n	8d2 <queue_put_non_blocking+0x3e>
            ((char *)(&(queue->data[queue->wr_ptr % QUEUE_SIZE])))[k] = 
     8b8:	687b      	ldr	r3, [r7, #4]
     8ba:	461a      	mov	r2, r3
     8bc:	68fb      	ldr	r3, [r7, #12]
     8be:	4413      	add	r3, r2
                ((char *)msg)[k];
     8c0:	6839      	ldr	r1, [r7, #0]
     8c2:	68fa      	ldr	r2, [r7, #12]
     8c4:	440a      	add	r2, r1
     8c6:	7812      	ldrb	r2, [r2, #0]
            == (queue->rd_ptr % QUEUE_SIZE))) {
        return QUEUE_FULL;
    } else {
        // Copy the message into the queue
        for (k = 0; k < sizeof(t_message); k++)
            ((char *)(&(queue->data[queue->wr_ptr % QUEUE_SIZE])))[k] = 
     8c8:	701a      	strb	r2, [r3, #0]
    if ((queue->wr_ptr != queue->rd_ptr) && ((queue->wr_ptr % QUEUE_SIZE) 
            == (queue->rd_ptr % QUEUE_SIZE))) {
        return QUEUE_FULL;
    } else {
        // Copy the message into the queue
        for (k = 0; k < sizeof(t_message); k++)
     8ca:	68fb      	ldr	r3, [r7, #12]
     8cc:	f103 0301 	add.w	r3, r3, #1
     8d0:	60fb      	str	r3, [r7, #12]
     8d2:	68fb      	ldr	r3, [r7, #12]
     8d4:	2b0f      	cmp	r3, #15
     8d6:	d9ef      	bls.n	8b8 <queue_put_non_blocking+0x24>
            ((char *)(&(queue->data[queue->wr_ptr % QUEUE_SIZE])))[k] = 
                ((char *)msg)[k];

        // increment write pointer
        queue->wr_ptr++;
     8d8:	687b      	ldr	r3, [r7, #4]
     8da:	695b      	ldr	r3, [r3, #20]
     8dc:	f103 0201 	add.w	r2, r3, #1
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	615a      	str	r2, [r3, #20]

        return QUEUE_OK;
     8e4:	f04f 0300 	mov.w	r3, #0
    }
}
     8e8:	4618      	mov	r0, r3
     8ea:	f107 0714 	add.w	r7, r7, #20
     8ee:	46bd      	mov	sp, r7
     8f0:	bc80      	pop	{r7}
     8f2:	4770      	bx	lr

000008f4 <queue_get_non_blocking>:
// If the queue is empty, the return value will be QUEUE_EMPTY.
// Parameters: pointer to the queue, POINTER TO A POINTER_to_the_message
// structure.
// ---------------------------------------------------------------------------

t_queue_result queue_get_non_blocking(t_queue *queue, t_message **msg) {
     8f4:	b480      	push	{r7}
     8f6:	b083      	sub	sp, #12
     8f8:	af00      	add	r7, sp, #0
     8fa:	6078      	str	r0, [r7, #4]
     8fc:	6039      	str	r1, [r7, #0]
    if (queue->rd_ptr == queue->wr_ptr) {
     8fe:	687b      	ldr	r3, [r7, #4]
     900:	691a      	ldr	r2, [r3, #16]
     902:	687b      	ldr	r3, [r7, #4]
     904:	695b      	ldr	r3, [r3, #20]
     906:	429a      	cmp	r2, r3
     908:	d102      	bne.n	910 <queue_get_non_blocking+0x1c>
        return QUEUE_EMPTY;
     90a:	f04f 0302 	mov.w	r3, #2
     90e:	e004      	b.n	91a <queue_get_non_blocking+0x26>
    } else {
        *msg = &(queue->data[queue->rd_ptr % QUEUE_SIZE]);
     910:	687a      	ldr	r2, [r7, #4]
     912:	683b      	ldr	r3, [r7, #0]
     914:	601a      	str	r2, [r3, #0]
        return QUEUE_OK;
     916:	f04f 0300 	mov.w	r3, #0
    }
}
     91a:	4618      	mov	r0, r3
     91c:	f107 070c 	add.w	r7, r7, #12
     920:	46bd      	mov	sp, r7
     922:	bc80      	pop	{r7}
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <queue_remove_non_blocking>:
// Removes the last message from the queue.
// Parameter: pointer to the queue.
// If the queue is not empty the return value is QUEUE_OK, else QUEUE_EMPTY.
// ---------------------------------------------------------------------------

t_queue_result queue_remove_non_blocking(t_queue *queue) {
     928:	b480      	push	{r7}
     92a:	b083      	sub	sp, #12
     92c:	af00      	add	r7, sp, #0
     92e:	6078      	str	r0, [r7, #4]
    if (queue->rd_ptr == queue->wr_ptr) {
     930:	687b      	ldr	r3, [r7, #4]
     932:	691a      	ldr	r2, [r3, #16]
     934:	687b      	ldr	r3, [r7, #4]
     936:	695b      	ldr	r3, [r3, #20]
     938:	429a      	cmp	r2, r3
     93a:	d102      	bne.n	942 <queue_remove_non_blocking+0x1a>
        return QUEUE_EMPTY;
     93c:	f04f 0302 	mov.w	r3, #2
     940:	e007      	b.n	952 <queue_remove_non_blocking+0x2a>
    } else {
        queue->rd_ptr++;
     942:	687b      	ldr	r3, [r7, #4]
     944:	691b      	ldr	r3, [r3, #16]
     946:	f103 0201 	add.w	r2, r3, #1
     94a:	687b      	ldr	r3, [r7, #4]
     94c:	611a      	str	r2, [r3, #16]
        return QUEUE_OK;
     94e:	f04f 0300 	mov.w	r3, #0
    }
}
     952:	4618      	mov	r0, r3
     954:	f107 070c 	add.w	r7, r7, #12
     958:	46bd      	mov	sp, r7
     95a:	bc80      	pop	{r7}
     95c:	4770      	bx	lr
     95e:	bf00      	nop

00000960 <queue_put>:
// ---------------------------------------------------------------------------
// The same as "queue_put_non_blocking()", but this function waits while
// the queue if full.
// ---------------------------------------------------------------------------

t_queue_result queue_put(t_queue *queue, t_message *msg) {
     960:	b580      	push	{r7, lr}
     962:	b082      	sub	sp, #8
     964:	af00      	add	r7, sp, #0
     966:	6078      	str	r0, [r7, #4]
     968:	6039      	str	r1, [r7, #0]
    while (queue_put_non_blocking(queue, msg) == QUEUE_FULL);
     96a:	6878      	ldr	r0, [r7, #4]
     96c:	6839      	ldr	r1, [r7, #0]
     96e:	f7ff ff91 	bl	894 <queue_put_non_blocking>
     972:	4603      	mov	r3, r0
     974:	2b01      	cmp	r3, #1
     976:	d0f8      	beq.n	96a <queue_put+0xa>
    return QUEUE_OK;
     978:	f04f 0300 	mov.w	r3, #0
}
     97c:	4618      	mov	r0, r3
     97e:	f107 0708 	add.w	r7, r7, #8
     982:	46bd      	mov	sp, r7
     984:	bd80      	pop	{r7, pc}
     986:	bf00      	nop

00000988 <queue_get>:
// ---------------------------------------------------------------------------
// The same as "queue_get_non_blocking()", but this function waits while
// the queue is empty.
// ---------------------------------------------------------------------------

t_queue_result queue_get(t_queue *queue, t_message **msg) {
     988:	b580      	push	{r7, lr}
     98a:	b082      	sub	sp, #8
     98c:	af00      	add	r7, sp, #0
     98e:	6078      	str	r0, [r7, #4]
     990:	6039      	str	r1, [r7, #0]
    while (queue_get_non_blocking(queue, msg) == QUEUE_EMPTY);
     992:	6878      	ldr	r0, [r7, #4]
     994:	6839      	ldr	r1, [r7, #0]
     996:	f7ff ffad 	bl	8f4 <queue_get_non_blocking>
     99a:	4603      	mov	r3, r0
     99c:	2b02      	cmp	r3, #2
     99e:	d0f8      	beq.n	992 <queue_get+0xa>
    return QUEUE_OK;
     9a0:	f04f 0300 	mov.w	r3, #0
}
     9a4:	4618      	mov	r0, r3
     9a6:	f107 0708 	add.w	r7, r7, #8
     9aa:	46bd      	mov	sp, r7
     9ac:	bd80      	pop	{r7, pc}
     9ae:	bf00      	nop

000009b0 <queue_remove>:
// ---------------------------------------------------------------------------
// The same as "queue_remove_non_blocking()", but this function waits while
// the queue is empty.
// ---------------------------------------------------------------------------

t_queue_result queue_remove(t_queue *queue) {
     9b0:	b580      	push	{r7, lr}
     9b2:	b082      	sub	sp, #8
     9b4:	af00      	add	r7, sp, #0
     9b6:	6078      	str	r0, [r7, #4]
    while (queue_remove_non_blocking(queue) == QUEUE_EMPTY);
     9b8:	6878      	ldr	r0, [r7, #4]
     9ba:	f7ff ffb5 	bl	928 <queue_remove_non_blocking>
     9be:	4603      	mov	r3, r0
     9c0:	2b02      	cmp	r3, #2
     9c2:	d0f9      	beq.n	9b8 <queue_remove+0x8>
    return QUEUE_OK;
     9c4:	f04f 0300 	mov.w	r3, #0
}
     9c8:	4618      	mov	r0, r3
     9ca:	f107 0708 	add.w	r7, r7, #8
     9ce:	46bd      	mov	sp, r7
     9d0:	bd80      	pop	{r7, pc}
     9d2:	bf00      	nop

000009d4 <systick>:

// ---------------------------------------------------------------------------
// ISR of the SYSTICK timer (makes the LED blibking).
// ---------------------------------------------------------------------------

void systick() {
     9d4:	b580      	push	{r7, lr}
     9d6:	af00      	add	r7, sp, #0
    counter++;
     9d8:	f240 23cc 	movw	r3, #716	; 0x2cc
     9dc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9e0:	681b      	ldr	r3, [r3, #0]
     9e2:	f103 0201 	add.w	r2, r3, #1
     9e6:	f240 23cc 	movw	r3, #716	; 0x2cc
     9ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9ee:	601a      	str	r2, [r3, #0]

    if (counter % 2 == 1) {
     9f0:	f240 23cc 	movw	r3, #716	; 0x2cc
     9f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	f003 0301 	and.w	r3, r3, #1
     9fe:	b2db      	uxtb	r3, r3
     a00:	2b00      	cmp	r3, #0
     a02:	d004      	beq.n	a0e <systick+0x3a>
        gpio_set(LED_SYSTICK);
     a04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     a08:	f000 fc38 	bl	127c <gpio_set>
     a0c:	e003      	b.n	a16 <systick+0x42>
    } else {
        gpio_clear(LED_SYSTICK);
     a0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     a12:	f000 fc57 	bl	12c4 <gpio_clear>
    }
}
     a16:	46bd      	mov	sp, r7
     a18:	bd80      	pop	{r7, pc}
     a1a:	bf00      	nop

00000a1c <usart_rx_handler>:

// ---------------------------------------------------------------------------
// When a character has been received through USART...
// ---------------------------------------------------------------------------

void usart_rx_handler() {
     a1c:	b580      	push	{r7, lr}
     a1e:	b086      	sub	sp, #24
     a20:	af00      	add	r7, sp, #0
    char ch;
    t_message msg;

    // If a new character is received
    if (USART_GetITStatus(USART1, USART_IT_RXNE) != RESET) {
     a22:	f643 0000 	movw	r0, #14336	; 0x3800
     a26:	f2c4 0001 	movt	r0, #16385	; 0x4001
     a2a:	f240 5125 	movw	r1, #1317	; 0x525
     a2e:	f003 fd5d 	bl	44ec <USART_GetITStatus>
     a32:	4603      	mov	r3, r0
     a34:	2b00      	cmp	r3, #0
     a36:	f000 819f 	beq.w	d78 <usart_rx_handler+0x35c>
        // Switch on "Receiving..." LED
        gpio_set(LED_USART);
     a3a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     a3e:	f000 fc1d 	bl	127c <gpio_set>

        // Read the character from the USART FIFO
        ch = usart_recv_char();
     a42:	f000 feeb 	bl	181c <usart_recv_char>
     a46:	4603      	mov	r3, r0
     a48:	75fb      	strb	r3, [r7, #23]

        // A CR (Cursor Return) indicates that CR must be sent after
        // the answer string.

        if (ch == '\r') {
     a4a:	7dfb      	ldrb	r3, [r7, #23]
     a4c:	2b0d      	cmp	r3, #13
     a4e:	d106      	bne.n	a5e <usart_rx_handler+0x42>
            cr_needed = 1;
     a50:	f240 23c8 	movw	r3, #712	; 0x2c8
     a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a58:	f04f 0201 	mov.w	r2, #1
     a5c:	601a      	str	r2, [r3, #0]
        }

        // At the end of the command line...
        if ((ch == '\n') || (ch == '\r')) {
     a5e:	7dfb      	ldrb	r3, [r7, #23]
     a60:	2b0a      	cmp	r3, #10
     a62:	d003      	beq.n	a6c <usart_rx_handler+0x50>
     a64:	7dfb      	ldrb	r3, [r7, #23]
     a66:	2b0d      	cmp	r3, #13
     a68:	f040 815f 	bne.w	d2a <usart_rx_handler+0x30e>
            // ... when the command starts with...
            switch (line[0]) {
     a6c:	f240 2388 	movw	r3, #648	; 0x288
     a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a74:	781b      	ldrb	r3, [r3, #0]
     a76:	b2db      	uxtb	r3, r3
     a78:	f1a3 0342 	sub.w	r3, r3, #66	; 0x42
     a7c:	2b34      	cmp	r3, #52	; 0x34
     a7e:	f200 812c 	bhi.w	cda <usart_rx_handler+0x2be>
     a82:	a201      	add	r2, pc, #4	; (adr r2, a88 <usart_rx_handler+0x6c>)
     a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a88:	00000ba9 	.word	0x00000ba9
     a8c:	00000cdb 	.word	0x00000cdb
     a90:	00000cdb 	.word	0x00000cdb
     a94:	00000cdb 	.word	0x00000cdb
     a98:	00000bc9 	.word	0x00000bc9
     a9c:	00000cdb 	.word	0x00000cdb
     aa0:	00000cdb 	.word	0x00000cdb
     aa4:	00000c1b 	.word	0x00000c1b
     aa8:	00000cdb 	.word	0x00000cdb
     aac:	00000cdb 	.word	0x00000cdb
     ab0:	00000cdb 	.word	0x00000cdb
     ab4:	00000b73 	.word	0x00000b73
     ab8:	00000cdb 	.word	0x00000cdb
     abc:	00000cdb 	.word	0x00000cdb
     ac0:	00000cdb 	.word	0x00000cdb
     ac4:	00000cdb 	.word	0x00000cdb
     ac8:	00000cdb 	.word	0x00000cdb
     acc:	00000c6d 	.word	0x00000c6d
     ad0:	00000cdb 	.word	0x00000cdb
     ad4:	00000b89 	.word	0x00000b89
     ad8:	00000b5d 	.word	0x00000b5d
     adc:	00000cdb 	.word	0x00000cdb
     ae0:	00000cdb 	.word	0x00000cdb
     ae4:	00000cdb 	.word	0x00000cdb
     ae8:	00000cdb 	.word	0x00000cdb
     aec:	00000cdb 	.word	0x00000cdb
     af0:	00000cdb 	.word	0x00000cdb
     af4:	00000cdb 	.word	0x00000cdb
     af8:	00000cdb 	.word	0x00000cdb
     afc:	00000cdb 	.word	0x00000cdb
     b00:	00000cdb 	.word	0x00000cdb
     b04:	00000cdb 	.word	0x00000cdb
     b08:	00000ba9 	.word	0x00000ba9
     b0c:	00000cdb 	.word	0x00000cdb
     b10:	00000cdb 	.word	0x00000cdb
     b14:	00000cdb 	.word	0x00000cdb
     b18:	00000bc9 	.word	0x00000bc9
     b1c:	00000cdb 	.word	0x00000cdb
     b20:	00000cdb 	.word	0x00000cdb
     b24:	00000c1b 	.word	0x00000c1b
     b28:	00000cdb 	.word	0x00000cdb
     b2c:	00000cdb 	.word	0x00000cdb
     b30:	00000cdb 	.word	0x00000cdb
     b34:	00000b73 	.word	0x00000b73
     b38:	00000cdb 	.word	0x00000cdb
     b3c:	00000cdb 	.word	0x00000cdb
     b40:	00000cdb 	.word	0x00000cdb
     b44:	00000cdb 	.word	0x00000cdb
     b48:	00000cdb 	.word	0x00000cdb
     b4c:	00000c6d 	.word	0x00000c6d
     b50:	00000cdb 	.word	0x00000cdb
     b54:	00000b89 	.word	0x00000b89
     b58:	00000b5d 	.word	0x00000b5d
                case 'v':
                case 'V':
                    // Version info
                    // One character expected
                    msg.command = CAN_VERSION;
     b5c:	f04f 0300 	mov.w	r3, #0
     b60:	607b      	str	r3, [r7, #4]
                    msg.param1 = msg.param2 = msg.param3 = 0;
     b62:	f04f 0300 	mov.w	r3, #0
     b66:	613b      	str	r3, [r7, #16]
     b68:	693b      	ldr	r3, [r7, #16]
     b6a:	60fb      	str	r3, [r7, #12]
     b6c:	68fb      	ldr	r3, [r7, #12]
     b6e:	60bb      	str	r3, [r7, #8]
                    break;
     b70:	e0bf      	b.n	cf2 <usart_rx_handler+0x2d6>

                case 'm':
                case 'M':
                    // Get free memory
                    // Format: M
                    msg.command = GET_FREE_MEM;
     b72:	f04f 0308 	mov.w	r3, #8
     b76:	607b      	str	r3, [r7, #4]
                    msg.param1 = msg.param2 = msg.param3 = 0;
     b78:	f04f 0300 	mov.w	r3, #0
     b7c:	613b      	str	r3, [r7, #16]
     b7e:	693b      	ldr	r3, [r7, #16]
     b80:	60fb      	str	r3, [r7, #12]
     b82:	68fb      	ldr	r3, [r7, #12]
     b84:	60bb      	str	r3, [r7, #8]
                    break;
     b86:	e0b4      	b.n	cf2 <usart_rx_handler+0x2d6>
                case 'U':
                    // Set USART baud rate
                    // Format: U_xxxxxxxx
                    // where 'x' is a hexadecimal digit
                    // and '_' is "don't care"
                    msg.command = USART_SET_BAUD;
     b88:	f04f 0307 	mov.w	r3, #7
     b8c:	607b      	str	r3, [r7, #4]
                    msg.param1 = hex2num((char *) line+2, 8);
     b8e:	487c      	ldr	r0, [pc, #496]	; (d80 <usart_rx_handler+0x364>)
     b90:	f04f 0108 	mov.w	r1, #8
     b94:	f000 fa1e 	bl	fd4 <hex2num>
     b98:	4603      	mov	r3, r0
     b9a:	60bb      	str	r3, [r7, #8]
                    msg.param2 = msg.param3 = 0;
     b9c:	f04f 0300 	mov.w	r3, #0
     ba0:	613b      	str	r3, [r7, #16]
     ba2:	693b      	ldr	r3, [r7, #16]
     ba4:	60fb      	str	r3, [r7, #12]
                    break;
     ba6:	e0a4      	b.n	cf2 <usart_rx_handler+0x2d6>
                case 'B':
                    // Set CAN baud rate
                    // Format: B_xxxxxxxx
                    // where 'x' is a hexadecimal digit
                    // and '_' is "don't care"
                    msg.command = CAN_SET_BAUD;
     ba8:	f04f 0302 	mov.w	r3, #2
     bac:	607b      	str	r3, [r7, #4]
                    msg.param1 = hex2num((char *) line+2, 8);
     bae:	4874      	ldr	r0, [pc, #464]	; (d80 <usart_rx_handler+0x364>)
     bb0:	f04f 0108 	mov.w	r1, #8
     bb4:	f000 fa0e 	bl	fd4 <hex2num>
     bb8:	4603      	mov	r3, r0
     bba:	60bb      	str	r3, [r7, #8]
                    msg.param2 = msg.param3 = 0;
     bbc:	f04f 0300 	mov.w	r3, #0
     bc0:	613b      	str	r3, [r7, #16]
     bc2:	693b      	ldr	r3, [r7, #16]
     bc4:	60fb      	str	r3, [r7, #12]
                    break;
     bc6:	e094      	b.n	cf2 <usart_rx_handler+0x2d6>
                    // Format: Fnxxxxxxxxr or Fnxxxxxxxxd
                    // where 'xxxxxxxx' is the mask in hexadecimal format
                    // 'r' is the RTR bit (can be: "r", "R" or empty)
                    // 'd' is the DATA bit (can be: "d", "D" or empty)
                    // 'n' is the filter's number (0 ... 13) in hexadecimal
                    msg.command = CAN_SET_FILTER;
     bc8:	f04f 0303 	mov.w	r3, #3
     bcc:	607b      	str	r3, [r7, #4]
                    msg.param1 = hex2num((char *) line+1, 1);
     bce:	486d      	ldr	r0, [pc, #436]	; (d84 <usart_rx_handler+0x368>)
     bd0:	f04f 0101 	mov.w	r1, #1
     bd4:	f000 f9fe 	bl	fd4 <hex2num>
     bd8:	4603      	mov	r3, r0
     bda:	60bb      	str	r3, [r7, #8]
                    msg.param2 = hex2num((char *) line+2, 8);
     bdc:	4868      	ldr	r0, [pc, #416]	; (d80 <usart_rx_handler+0x364>)
     bde:	f04f 0108 	mov.w	r1, #8
     be2:	f000 f9f7 	bl	fd4 <hex2num>
     be6:	4603      	mov	r3, r0
     be8:	60fb      	str	r3, [r7, #12]

                    if ((line[10] == 'r') || (line[10] == 'R'))
     bea:	f240 2388 	movw	r3, #648	; 0x288
     bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
     bf2:	7a9b      	ldrb	r3, [r3, #10]
     bf4:	b2db      	uxtb	r3, r3
     bf6:	2b72      	cmp	r3, #114	; 0x72
     bf8:	d007      	beq.n	c0a <usart_rx_handler+0x1ee>
     bfa:	f240 2388 	movw	r3, #648	; 0x288
     bfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c02:	7a9b      	ldrb	r3, [r3, #10]
     c04:	b2db      	uxtb	r3, r3
     c06:	2b52      	cmp	r3, #82	; 0x52
     c08:	d103      	bne.n	c12 <usart_rx_handler+0x1f6>
                        msg.param2 |= 0x80000000;
     c0a:	68fb      	ldr	r3, [r7, #12]
     c0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c10:	60fb      	str	r3, [r7, #12]

                    msg.param3 = 0;
     c12:	f04f 0300 	mov.w	r3, #0
     c16:	613b      	str	r3, [r7, #16]

                    break;
     c18:	e06b      	b.n	cf2 <usart_rx_handler+0x2d6>
                    // Format: Inxxxxxxxxr or Inxxxxxxxxd
                    // where 'xxxxxxxx' is the ID value in hexadecimal
                    // 'r' is the RTR bit (can be: "r", "R" or empty)
                    // 'd' is the DATA bit (can be: "d", "D" or empty)
                    // 'n' is the filter's number (0 ... 13) in hexadecimal
                    msg.command = CAN_SET_ID;
     c1a:	f04f 0304 	mov.w	r3, #4
     c1e:	607b      	str	r3, [r7, #4]
                    msg.param1 = hex2num((char *) line+1, 1);
     c20:	4858      	ldr	r0, [pc, #352]	; (d84 <usart_rx_handler+0x368>)
     c22:	f04f 0101 	mov.w	r1, #1
     c26:	f000 f9d5 	bl	fd4 <hex2num>
     c2a:	4603      	mov	r3, r0
     c2c:	60bb      	str	r3, [r7, #8]
                    msg.param2 = hex2num((char *) line+2, 8);
     c2e:	4854      	ldr	r0, [pc, #336]	; (d80 <usart_rx_handler+0x364>)
     c30:	f04f 0108 	mov.w	r1, #8
     c34:	f000 f9ce 	bl	fd4 <hex2num>
     c38:	4603      	mov	r3, r0
     c3a:	60fb      	str	r3, [r7, #12]

                    if ((line[10] == 'r') || (line[10] == 'R'))
     c3c:	f240 2388 	movw	r3, #648	; 0x288
     c40:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c44:	7a9b      	ldrb	r3, [r3, #10]
     c46:	b2db      	uxtb	r3, r3
     c48:	2b72      	cmp	r3, #114	; 0x72
     c4a:	d007      	beq.n	c5c <usart_rx_handler+0x240>
     c4c:	f240 2388 	movw	r3, #648	; 0x288
     c50:	f2c2 0300 	movt	r3, #8192	; 0x2000
     c54:	7a9b      	ldrb	r3, [r3, #10]
     c56:	b2db      	uxtb	r3, r3
     c58:	2b52      	cmp	r3, #82	; 0x52
     c5a:	d103      	bne.n	c64 <usart_rx_handler+0x248>
                        msg.param2 |= 0x80000000;
     c5c:	68fb      	ldr	r3, [r7, #12]
     c5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     c62:	60fb      	str	r3, [r7, #12]

                    msg.param3 = 0;
     c64:	f04f 0300 	mov.w	r3, #0
     c68:	613b      	str	r3, [r7, #16]

                    break;
     c6a:	e042      	b.n	cf2 <usart_rx_handler+0x2d6>
                    //      it is not possible to send 0 byte of data!
                    // 'iiiiiiii' is the destination id in HEXADECIMAL
                    // 'vv ... vv' is the data. 16 digits (8 bytes) expected.
                    // 'r' the RTR bit (can be: "r", "R" or empty)
                    // 'd' is the DATA bit (can be: "d", "D" or empty)
                    msg.command = CAN_SEND | (hex2num((char *) line+1, 1) << 16);
     c6c:	4845      	ldr	r0, [pc, #276]	; (d84 <usart_rx_handler+0x368>)
     c6e:	f04f 0101 	mov.w	r1, #1
     c72:	f000 f9af 	bl	fd4 <hex2num>
     c76:	4603      	mov	r3, r0
     c78:	ea4f 4303 	mov.w	r3, r3, lsl #16
     c7c:	f043 0305 	orr.w	r3, r3, #5
     c80:	607b      	str	r3, [r7, #4]

                    msg.param1 = hex2num((char *) line+2, 8) & 0x1fffffff;
     c82:	483f      	ldr	r0, [pc, #252]	; (d80 <usart_rx_handler+0x364>)
     c84:	f04f 0108 	mov.w	r1, #8
     c88:	f000 f9a4 	bl	fd4 <hex2num>
     c8c:	4603      	mov	r3, r0
     c8e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
     c92:	60bb      	str	r3, [r7, #8]
                    msg.param2 = hex2num((char *) line+10, 8);
     c94:	483c      	ldr	r0, [pc, #240]	; (d88 <usart_rx_handler+0x36c>)
     c96:	f04f 0108 	mov.w	r1, #8
     c9a:	f000 f99b 	bl	fd4 <hex2num>
     c9e:	4603      	mov	r3, r0
     ca0:	60fb      	str	r3, [r7, #12]
                    msg.param3 = hex2num((char *) line+18, 8);
     ca2:	483a      	ldr	r0, [pc, #232]	; (d8c <usart_rx_handler+0x370>)
     ca4:	f04f 0108 	mov.w	r1, #8
     ca8:	f000 f994 	bl	fd4 <hex2num>
     cac:	4603      	mov	r3, r0
     cae:	613b      	str	r3, [r7, #16]

                    if ((line[26] == 'r') || (line[26] == 'R'))
     cb0:	f240 2388 	movw	r3, #648	; 0x288
     cb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cb8:	7e9b      	ldrb	r3, [r3, #26]
     cba:	b2db      	uxtb	r3, r3
     cbc:	2b72      	cmp	r3, #114	; 0x72
     cbe:	d007      	beq.n	cd0 <usart_rx_handler+0x2b4>
     cc0:	f240 2388 	movw	r3, #648	; 0x288
     cc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
     cc8:	7e9b      	ldrb	r3, [r3, #26]
     cca:	b2db      	uxtb	r3, r3
     ccc:	2b52      	cmp	r3, #82	; 0x52
     cce:	d10f      	bne.n	cf0 <usart_rx_handler+0x2d4>
                        msg.param1 |= 0x80000000;
     cd0:	68bb      	ldr	r3, [r7, #8]
     cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     cd6:	60bb      	str	r3, [r7, #8]

                    break;
     cd8:	e00b      	b.n	cf2 <usart_rx_handler+0x2d6>

                default:
                    // When received an invalid command
                    msg.command = CAN_UNKNOWN;
     cda:	f04f 33ff 	mov.w	r3, #4294967295
     cde:	607b      	str	r3, [r7, #4]
                    msg.param1 = msg.param2 = msg.param3 = 0;
     ce0:	f04f 0300 	mov.w	r3, #0
     ce4:	613b      	str	r3, [r7, #16]
     ce6:	693b      	ldr	r3, [r7, #16]
     ce8:	60fb      	str	r3, [r7, #12]
     cea:	68fb      	ldr	r3, [r7, #12]
     cec:	60bb      	str	r3, [r7, #8]
     cee:	e000      	b.n	cf2 <usart_rx_handler+0x2d6>
                    msg.param3 = hex2num((char *) line+18, 8);

                    if ((line[26] == 'r') || (line[26] == 'R'))
                        msg.param1 |= 0x80000000;

                    break;
     cf0:	bf00      	nop
                    break;
            }
        
            // Sending the CAN command to the routine that
            // utilizes CAN controller
            queue_put_non_blocking(&usart2can, &msg);
     cf2:	f107 0304 	add.w	r3, r7, #4
     cf6:	f240 100c 	movw	r0, #268	; 0x10c
     cfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
     cfe:	4619      	mov	r1, r3
     d00:	f7ff fdc8 	bl	894 <queue_put_non_blocking>
            // Switch off the "Receiving..." LED
            // at the end of the command line
            gpio_clear(LED_USART);
     d04:	f44f 4080 	mov.w	r0, #16384	; 0x4000
     d08:	f000 fadc 	bl	12c4 <gpio_clear>
            // Line is to be invalidated
            line_len = 0;
     d0c:	f240 23d0 	movw	r3, #720	; 0x2d0
     d10:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d14:	f04f 0200 	mov.w	r2, #0
     d18:	601a      	str	r2, [r3, #0]
            line[0] = 0;
     d1a:	f240 2388 	movw	r3, #648	; 0x288
     d1e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d22:	f04f 0200 	mov.w	r2, #0
     d26:	701a      	strb	r2, [r3, #0]
            return;
     d28:	e026      	b.n	d78 <usart_rx_handler+0x35c>
        } else {
            // If one more character can be attached to the string 
            // (command line)...
            if (line_len + 1 < MAX_STR_LEN) {
     d2a:	f240 23d0 	movw	r3, #720	; 0x2d0
     d2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	f103 0301 	add.w	r3, r3, #1
     d38:	2b3f      	cmp	r3, #63	; 0x3f
     d3a:	d81d      	bhi.n	d78 <usart_rx_handler+0x35c>
                // ... attach the character, and the terminator "zero"
                line[line_len++] = ch;
     d3c:	f240 23d0 	movw	r3, #720	; 0x2d0
     d40:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d44:	681a      	ldr	r2, [r3, #0]
     d46:	f240 2388 	movw	r3, #648	; 0x288
     d4a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d4e:	7df9      	ldrb	r1, [r7, #23]
     d50:	5499      	strb	r1, [r3, r2]
     d52:	f102 0201 	add.w	r2, r2, #1
     d56:	f240 23d0 	movw	r3, #720	; 0x2d0
     d5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d5e:	601a      	str	r2, [r3, #0]
                line[line_len] = 0;
     d60:	f240 23d0 	movw	r3, #720	; 0x2d0
     d64:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d68:	681a      	ldr	r2, [r3, #0]
     d6a:	f240 2388 	movw	r3, #648	; 0x288
     d6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     d72:	f04f 0100 	mov.w	r1, #0
     d76:	5499      	strb	r1, [r3, r2]
            }
        }
    }
}
     d78:	f107 0718 	add.w	r7, r7, #24
     d7c:	46bd      	mov	sp, r7
     d7e:	bd80      	pop	{r7, pc}
     d80:	2000028a 	.word	0x2000028a
     d84:	20000289 	.word	0x20000289
     d88:	20000292 	.word	0x20000292
     d8c:	2000029a 	.word	0x2000029a

00000d90 <CAN_rx_handler>:

// ---------------------------------------------------------------------------
// When a message (frame) has been received through CAN controller...
// ---------------------------------------------------------------------------

void CAN_rx_handler() {
     d90:	b580      	push	{r7, lr}
     d92:	b08a      	sub	sp, #40	; 0x28
     d94:	af00      	add	r7, sp, #0
    t_message msg;
    CanRxMsg RxMessage;

    // Clean invalid data from the structure
    RxMessage.StdId = 0x00;
     d96:	f04f 0300 	mov.w	r3, #0
     d9a:	607b      	str	r3, [r7, #4]
    RxMessage.ExtId = 0x00;
     d9c:	f04f 0300 	mov.w	r3, #0
     da0:	60bb      	str	r3, [r7, #8]
    RxMessage.IDE = 0;
     da2:	f04f 0300 	mov.w	r3, #0
     da6:	733b      	strb	r3, [r7, #12]
    RxMessage.DLC = 0;
     da8:	f04f 0300 	mov.w	r3, #0
     dac:	73bb      	strb	r3, [r7, #14]
    RxMessage.FMI = 0;
     dae:	f04f 0300 	mov.w	r3, #0
     db2:	75fb      	strb	r3, [r7, #23]
    RxMessage.Data[0] = 0x00;
     db4:	f04f 0300 	mov.w	r3, #0
     db8:	73fb      	strb	r3, [r7, #15]
    RxMessage.Data[1] = 0x00;
     dba:	f04f 0300 	mov.w	r3, #0
     dbe:	743b      	strb	r3, [r7, #16]
    RxMessage.Data[2] = 0x00;
     dc0:	f04f 0300 	mov.w	r3, #0
     dc4:	747b      	strb	r3, [r7, #17]
    RxMessage.Data[3] = 0x00;
     dc6:	f04f 0300 	mov.w	r3, #0
     dca:	74bb      	strb	r3, [r7, #18]
    RxMessage.Data[4] = 0x00;
     dcc:	f04f 0300 	mov.w	r3, #0
     dd0:	74fb      	strb	r3, [r7, #19]
    RxMessage.Data[5] = 0x00;
     dd2:	f04f 0300 	mov.w	r3, #0
     dd6:	753b      	strb	r3, [r7, #20]
    RxMessage.Data[6] = 0x00;
     dd8:	f04f 0300 	mov.w	r3, #0
     ddc:	757b      	strb	r3, [r7, #21]
    RxMessage.Data[7] = 0x00;
     dde:	f04f 0300 	mov.w	r3, #0
     de2:	75bb      	strb	r3, [r7, #22]

    // Copy data from CAN FIFO to structure
    CAN_Receive(CAN_FIFO0, &RxMessage);
     de4:	f107 0304 	add.w	r3, r7, #4
     de8:	f04f 0000 	mov.w	r0, #0
     dec:	4619      	mov	r1, r3
     dee:	f002 fc39 	bl	3664 <CAN_Receive>

    // If it is in the acceptable format (with 29 bit addresses)...
    if (RxMessage.IDE == CAN_ID_EXT) {
     df2:	7b3b      	ldrb	r3, [r7, #12]
     df4:	2b04      	cmp	r3, #4
     df6:	d134      	bne.n	e62 <CAN_rx_handler+0xd2>
        // Preparing the message to be sent to "main()" function
        msg.command = RxMessage.DLC | (RxMessage.RTR << 16);
     df8:	7bbb      	ldrb	r3, [r7, #14]
     dfa:	461a      	mov	r2, r3
     dfc:	7b7b      	ldrb	r3, [r7, #13]
     dfe:	ea4f 4303 	mov.w	r3, r3, lsl #16
     e02:	ea42 0303 	orr.w	r3, r2, r3
     e06:	61bb      	str	r3, [r7, #24]
        msg.param1 = RxMessage.ExtId;
     e08:	68bb      	ldr	r3, [r7, #8]
     e0a:	61fb      	str	r3, [r7, #28]
        msg.param2 = (RxMessage.Data[0] << 24) | (RxMessage.Data[1] << 16) |
     e0c:	7bfb      	ldrb	r3, [r7, #15]
     e0e:	ea4f 6203 	mov.w	r2, r3, lsl #24
     e12:	7c3b      	ldrb	r3, [r7, #16]
     e14:	ea4f 4303 	mov.w	r3, r3, lsl #16
     e18:	ea42 0203 	orr.w	r2, r2, r3
                     (RxMessage.Data[2] << 8) | RxMessage.Data[3];
     e1c:	7c7b      	ldrb	r3, [r7, #17]
     e1e:	ea4f 2303 	mov.w	r3, r3, lsl #8
     e22:	ea42 0203 	orr.w	r2, r2, r3
     e26:	7cbb      	ldrb	r3, [r7, #18]
    // If it is in the acceptable format (with 29 bit addresses)...
    if (RxMessage.IDE == CAN_ID_EXT) {
        // Preparing the message to be sent to "main()" function
        msg.command = RxMessage.DLC | (RxMessage.RTR << 16);
        msg.param1 = RxMessage.ExtId;
        msg.param2 = (RxMessage.Data[0] << 24) | (RxMessage.Data[1] << 16) |
     e28:	ea42 0303 	orr.w	r3, r2, r3
     e2c:	623b      	str	r3, [r7, #32]
                     (RxMessage.Data[2] << 8) | RxMessage.Data[3];
        msg.param3 = (RxMessage.Data[4] << 24) | (RxMessage.Data[5] << 16) |
     e2e:	7cfb      	ldrb	r3, [r7, #19]
     e30:	ea4f 6203 	mov.w	r2, r3, lsl #24
     e34:	7d3b      	ldrb	r3, [r7, #20]
     e36:	ea4f 4303 	mov.w	r3, r3, lsl #16
     e3a:	ea42 0203 	orr.w	r2, r2, r3
                     (RxMessage.Data[6] << 8) | RxMessage.Data[7];
     e3e:	7d7b      	ldrb	r3, [r7, #21]
     e40:	ea4f 2303 	mov.w	r3, r3, lsl #8
     e44:	ea42 0203 	orr.w	r2, r2, r3
     e48:	7dbb      	ldrb	r3, [r7, #22]
        // Preparing the message to be sent to "main()" function
        msg.command = RxMessage.DLC | (RxMessage.RTR << 16);
        msg.param1 = RxMessage.ExtId;
        msg.param2 = (RxMessage.Data[0] << 24) | (RxMessage.Data[1] << 16) |
                     (RxMessage.Data[2] << 8) | RxMessage.Data[3];
        msg.param3 = (RxMessage.Data[4] << 24) | (RxMessage.Data[5] << 16) |
     e4a:	ea42 0303 	orr.w	r3, r2, r3
     e4e:	627b      	str	r3, [r7, #36]	; 0x24
                     (RxMessage.Data[6] << 8) | RxMessage.Data[7];

        // Send message to "main()", which will send it to "upper"
        // controller
        queue_put_non_blocking(&can2usart, &msg);
     e50:	f107 0318 	add.w	r3, r7, #24
     e54:	f240 0004 	movw	r0, #4
     e58:	f2c2 0000 	movt	r0, #8192	; 0x2000
     e5c:	4619      	mov	r1, r3
     e5e:	f7ff fd19 	bl	894 <queue_put_non_blocking>
    }
}
     e62:	f107 0728 	add.w	r7, r7, #40	; 0x28
     e66:	46bd      	mov	sp, r7
     e68:	bd80      	pop	{r7, pc}
     e6a:	bf00      	nop

00000e6c <hex_decode>:
// ---------------------------------------------------------------------------
// The function converts a characher (0123456789aAbBcCdDeEfF) to numeric 
// value.
// ---------------------------------------------------------------------------

unsigned int hex_decode(char digit) {
     e6c:	b480      	push	{r7}
     e6e:	b083      	sub	sp, #12
     e70:	af00      	add	r7, sp, #0
     e72:	4603      	mov	r3, r0
     e74:	71fb      	strb	r3, [r7, #7]
    switch(digit) {
     e76:	79fb      	ldrb	r3, [r7, #7]
     e78:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
     e7c:	2b36      	cmp	r3, #54	; 0x36
     e7e:	f200 80a1 	bhi.w	fc4 <hex_decode+0x158>
     e82:	a201      	add	r2, pc, #4	; (adr r2, e88 <hex_decode+0x1c>)
     e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     e88:	00000f65 	.word	0x00000f65
     e8c:	00000f6b 	.word	0x00000f6b
     e90:	00000f71 	.word	0x00000f71
     e94:	00000f77 	.word	0x00000f77
     e98:	00000f7d 	.word	0x00000f7d
     e9c:	00000f83 	.word	0x00000f83
     ea0:	00000f89 	.word	0x00000f89
     ea4:	00000f8f 	.word	0x00000f8f
     ea8:	00000f95 	.word	0x00000f95
     eac:	00000f9b 	.word	0x00000f9b
     eb0:	00000fc5 	.word	0x00000fc5
     eb4:	00000fc5 	.word	0x00000fc5
     eb8:	00000fc5 	.word	0x00000fc5
     ebc:	00000fc5 	.word	0x00000fc5
     ec0:	00000fc5 	.word	0x00000fc5
     ec4:	00000fc5 	.word	0x00000fc5
     ec8:	00000fc5 	.word	0x00000fc5
     ecc:	00000fa1 	.word	0x00000fa1
     ed0:	00000fa7 	.word	0x00000fa7
     ed4:	00000fad 	.word	0x00000fad
     ed8:	00000fb3 	.word	0x00000fb3
     edc:	00000fb9 	.word	0x00000fb9
     ee0:	00000fbf 	.word	0x00000fbf
     ee4:	00000fc5 	.word	0x00000fc5
     ee8:	00000fc5 	.word	0x00000fc5
     eec:	00000fc5 	.word	0x00000fc5
     ef0:	00000fc5 	.word	0x00000fc5
     ef4:	00000fc5 	.word	0x00000fc5
     ef8:	00000fc5 	.word	0x00000fc5
     efc:	00000fc5 	.word	0x00000fc5
     f00:	00000fc5 	.word	0x00000fc5
     f04:	00000fc5 	.word	0x00000fc5
     f08:	00000fc5 	.word	0x00000fc5
     f0c:	00000fc5 	.word	0x00000fc5
     f10:	00000fc5 	.word	0x00000fc5
     f14:	00000fc5 	.word	0x00000fc5
     f18:	00000fc5 	.word	0x00000fc5
     f1c:	00000fc5 	.word	0x00000fc5
     f20:	00000fc5 	.word	0x00000fc5
     f24:	00000fc5 	.word	0x00000fc5
     f28:	00000fc5 	.word	0x00000fc5
     f2c:	00000fc5 	.word	0x00000fc5
     f30:	00000fc5 	.word	0x00000fc5
     f34:	00000fc5 	.word	0x00000fc5
     f38:	00000fc5 	.word	0x00000fc5
     f3c:	00000fc5 	.word	0x00000fc5
     f40:	00000fc5 	.word	0x00000fc5
     f44:	00000fc5 	.word	0x00000fc5
     f48:	00000fc5 	.word	0x00000fc5
     f4c:	00000fa1 	.word	0x00000fa1
     f50:	00000fa7 	.word	0x00000fa7
     f54:	00000fad 	.word	0x00000fad
     f58:	00000fb3 	.word	0x00000fb3
     f5c:	00000fb9 	.word	0x00000fb9
     f60:	00000fbf 	.word	0x00000fbf
        case '0':
            return 0;
     f64:	f04f 0300 	mov.w	r3, #0
     f68:	e02e      	b.n	fc8 <hex_decode+0x15c>
        case '1':
            return 1;
     f6a:	f04f 0301 	mov.w	r3, #1
     f6e:	e02b      	b.n	fc8 <hex_decode+0x15c>
        case '2':
            return 2;
     f70:	f04f 0302 	mov.w	r3, #2
     f74:	e028      	b.n	fc8 <hex_decode+0x15c>
        case '3':
            return 3;
     f76:	f04f 0303 	mov.w	r3, #3
     f7a:	e025      	b.n	fc8 <hex_decode+0x15c>
        case '4':
            return 4;
     f7c:	f04f 0304 	mov.w	r3, #4
     f80:	e022      	b.n	fc8 <hex_decode+0x15c>
        case '5':
            return 5;
     f82:	f04f 0305 	mov.w	r3, #5
     f86:	e01f      	b.n	fc8 <hex_decode+0x15c>
        case '6':
            return 6;
     f88:	f04f 0306 	mov.w	r3, #6
     f8c:	e01c      	b.n	fc8 <hex_decode+0x15c>
        case '7':
            return 7;
     f8e:	f04f 0307 	mov.w	r3, #7
     f92:	e019      	b.n	fc8 <hex_decode+0x15c>
        case '8':
            return 8;
     f94:	f04f 0308 	mov.w	r3, #8
     f98:	e016      	b.n	fc8 <hex_decode+0x15c>
        case '9':
            return 9;
     f9a:	f04f 0309 	mov.w	r3, #9
     f9e:	e013      	b.n	fc8 <hex_decode+0x15c>
        case 'A':
        case 'a':
            return 10;
     fa0:	f04f 030a 	mov.w	r3, #10
     fa4:	e010      	b.n	fc8 <hex_decode+0x15c>
        case 'B':
        case 'b':
            return 11;
     fa6:	f04f 030b 	mov.w	r3, #11
     faa:	e00d      	b.n	fc8 <hex_decode+0x15c>
        case 'C':
        case 'c':
            return 12;
     fac:	f04f 030c 	mov.w	r3, #12
     fb0:	e00a      	b.n	fc8 <hex_decode+0x15c>
        case 'D':
        case 'd':
            return 13;
     fb2:	f04f 030d 	mov.w	r3, #13
     fb6:	e007      	b.n	fc8 <hex_decode+0x15c>
        case 'E':
        case 'e':
            return 14;
     fb8:	f04f 030e 	mov.w	r3, #14
     fbc:	e004      	b.n	fc8 <hex_decode+0x15c>
        case 'F':
        case 'f':
            return 15;
     fbe:	f04f 030f 	mov.w	r3, #15
     fc2:	e001      	b.n	fc8 <hex_decode+0x15c>
        default:
            return -1;
     fc4:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
     fc8:	4618      	mov	r0, r3
     fca:	f107 070c 	add.w	r7, r7, #12
     fce:	46bd      	mov	sp, r7
     fd0:	bc80      	pop	{r7}
     fd2:	4770      	bx	lr

00000fd4 <hex2num>:
// Converts hex string to numeric value:
// 1st argument: pointer to the string
// 2nd argument: the number of the digits to be processed
// ---------------------------------------------------------------------------

unsigned int hex2num(char *str, int digits) {
     fd4:	b580      	push	{r7, lr}
     fd6:	b084      	sub	sp, #16
     fd8:	af00      	add	r7, sp, #0
     fda:	6078      	str	r0, [r7, #4]
     fdc:	6039      	str	r1, [r7, #0]
    int k;
    unsigned int value = 0;
     fde:	f04f 0300 	mov.w	r3, #0
     fe2:	60fb      	str	r3, [r7, #12]

    for (k = 0; k < digits; k++) {
     fe4:	f04f 0300 	mov.w	r3, #0
     fe8:	60bb      	str	r3, [r7, #8]
     fea:	e013      	b.n	1014 <hex2num+0x40>
        value <<= 4;
     fec:	68fb      	ldr	r3, [r7, #12]
     fee:	ea4f 1303 	mov.w	r3, r3, lsl #4
     ff2:	60fb      	str	r3, [r7, #12]
        value |= hex_decode(str[k]);
     ff4:	68ba      	ldr	r2, [r7, #8]
     ff6:	687b      	ldr	r3, [r7, #4]
     ff8:	4413      	add	r3, r2
     ffa:	781b      	ldrb	r3, [r3, #0]
     ffc:	4618      	mov	r0, r3
     ffe:	f7ff ff35 	bl	e6c <hex_decode>
    1002:	4603      	mov	r3, r0
    1004:	68fa      	ldr	r2, [r7, #12]
    1006:	ea42 0303 	orr.w	r3, r2, r3
    100a:	60fb      	str	r3, [r7, #12]

unsigned int hex2num(char *str, int digits) {
    int k;
    unsigned int value = 0;

    for (k = 0; k < digits; k++) {
    100c:	68bb      	ldr	r3, [r7, #8]
    100e:	f103 0301 	add.w	r3, r3, #1
    1012:	60bb      	str	r3, [r7, #8]
    1014:	68ba      	ldr	r2, [r7, #8]
    1016:	683b      	ldr	r3, [r7, #0]
    1018:	429a      	cmp	r2, r3
    101a:	dbe7      	blt.n	fec <hex2num+0x18>
        value <<= 4;
        value |= hex_decode(str[k]);
    }

    return value;
    101c:	68fb      	ldr	r3, [r7, #12]
}
    101e:	4618      	mov	r0, r3
    1020:	f107 0710 	add.w	r7, r7, #16
    1024:	46bd      	mov	sp, r7
    1026:	bd80      	pop	{r7, pc}

00001028 <num2hex>:
// 3rd argument: the number of the digits to be "displayed"
// ---------------------------------------------------------------------------

const char xtab[] = "0123456789ABCDEF";

unsigned int num2hex(unsigned int num, char *str, unsigned int digits) {
    1028:	b480      	push	{r7}
    102a:	b087      	sub	sp, #28
    102c:	af00      	add	r7, sp, #0
    102e:	60f8      	str	r0, [r7, #12]
    1030:	60b9      	str	r1, [r7, #8]
    1032:	607a      	str	r2, [r7, #4]
    int k;

    for (k = digits - 1; k >= 0; k--) {
    1034:	687b      	ldr	r3, [r7, #4]
    1036:	f103 33ff 	add.w	r3, r3, #4294967295
    103a:	617b      	str	r3, [r7, #20]
    103c:	e019      	b.n	1072 <num2hex+0x4a>
        str[digits - k - 1] = xtab[(num >> (4 * k)) & 0x0f];
    103e:	697b      	ldr	r3, [r7, #20]
    1040:	687a      	ldr	r2, [r7, #4]
    1042:	ebc3 0302 	rsb	r3, r3, r2
    1046:	f103 32ff 	add.w	r2, r3, #4294967295
    104a:	68bb      	ldr	r3, [r7, #8]
    104c:	441a      	add	r2, r3
    104e:	697b      	ldr	r3, [r7, #20]
    1050:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1054:	68f9      	ldr	r1, [r7, #12]
    1056:	fa21 f303 	lsr.w	r3, r1, r3
    105a:	f003 010f 	and.w	r1, r3, #15
    105e:	f245 2368 	movw	r3, #21096	; 0x5268
    1062:	f2c0 0300 	movt	r3, #0
    1066:	5c5b      	ldrb	r3, [r3, r1]
    1068:	7013      	strb	r3, [r2, #0]
const char xtab[] = "0123456789ABCDEF";

unsigned int num2hex(unsigned int num, char *str, unsigned int digits) {
    int k;

    for (k = digits - 1; k >= 0; k--) {
    106a:	697b      	ldr	r3, [r7, #20]
    106c:	f103 33ff 	add.w	r3, r3, #4294967295
    1070:	617b      	str	r3, [r7, #20]
    1072:	697b      	ldr	r3, [r7, #20]
    1074:	2b00      	cmp	r3, #0
    1076:	dae2      	bge.n	103e <num2hex+0x16>
        str[digits - k - 1] = xtab[(num >> (4 * k)) & 0x0f];
    }

    str[digits] = 0;
    1078:	68ba      	ldr	r2, [r7, #8]
    107a:	687b      	ldr	r3, [r7, #4]
    107c:	4413      	add	r3, r2
    107e:	f04f 0200 	mov.w	r2, #0
    1082:	701a      	strb	r2, [r3, #0]

    return 0;
    1084:	f04f 0300 	mov.w	r3, #0
}
    1088:	4618      	mov	r0, r3
    108a:	f107 071c 	add.w	r7, r7, #28
    108e:	46bd      	mov	sp, r7
    1090:	bc80      	pop	{r7}
    1092:	4770      	bx	lr

00001094 <clock_enable_main_osc>:

// ---------------------------------------------------------------------------
// This function enables the "main" (Quartz) oscillator
// ---------------------------------------------------------------------------

int clock_enable_main_osc() {
    1094:	b580      	push	{r7, lr}
    1096:	b082      	sub	sp, #8
    1098:	af00      	add	r7, sp, #0
    ErrorStatus HSEStartUpStatus;

    /* RCC system reset(for debug purpose) */
    RCC_DeInit();
    109a:	f000 fc0d 	bl	18b8 <RCC_DeInit>

    /* Enable HSE */
    RCC_HSEConfig(RCC_HSE_ON);
    109e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    10a2:	f000 fc57 	bl	1954 <RCC_HSEConfig>

    /* Wait till HSE is ready */
    HSEStartUpStatus = RCC_WaitForHSEStartUp();
    10a6:	f000 fc97 	bl	19d8 <RCC_WaitForHSEStartUp>
    10aa:	4603      	mov	r3, r0
    10ac:	71fb      	strb	r3, [r7, #7]

    if (HSEStartUpStatus == SUCCESS) {
    10ae:	79fb      	ldrb	r3, [r7, #7]
    10b0:	2b01      	cmp	r3, #1
    10b2:	d11b      	bne.n	10ec <clock_enable_main_osc+0x58>
        /* Enable Prefetch Buffer */
        FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
    10b4:	f04f 0010 	mov.w	r0, #16
    10b8:	f001 f944 	bl	2344 <FLASH_PrefetchBufferCmd>
    
        /* HCLK = SYSCLK */
        RCC_HCLKConfig(RCC_SYSCLK_Div1); 
    10bc:	f04f 0000 	mov.w	r0, #0
    10c0:	f000 fd56 	bl	1b70 <RCC_HCLKConfig>
  
        /* PCLK2 = HCLK */
        RCC_PCLK2Config(RCC_HCLK_Div1); 
    10c4:	f04f 0000 	mov.w	r0, #0
    10c8:	f000 fd96 	bl	1bf8 <RCC_PCLK2Config>

        /* PCLK1 = HCLK */
        RCC_PCLK1Config(RCC_HCLK_Div1);
    10cc:	f04f 0000 	mov.w	r0, #0
    10d0:	f000 fd70 	bl	1bb4 <RCC_PCLK1Config>

        /* Select HSE as system clock source */
        RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
    10d4:	f04f 0001 	mov.w	r0, #1
    10d8:	f000 fd1a 	bl	1b10 <RCC_SYSCLKConfig>

        /* Wait till HSE is used as system clock source */
        while(RCC_GetSYSCLKSource() != 0x04);
    10dc:	f000 fd3a 	bl	1b54 <RCC_GetSYSCLKSource>
    10e0:	4603      	mov	r3, r0
    10e2:	2b04      	cmp	r3, #4
    10e4:	d1fa      	bne.n	10dc <clock_enable_main_osc+0x48>
    
        return 0;
    10e6:	f04f 0300 	mov.w	r3, #0
    10ea:	e001      	b.n	10f0 <clock_enable_main_osc+0x5c>
    }

    return 1;
    10ec:	f04f 0301 	mov.w	r3, #1
}
    10f0:	4618      	mov	r0, r3
    10f2:	f107 0708 	add.w	r7, r7, #8
    10f6:	46bd      	mov	sp, r7
    10f8:	bd80      	pop	{r7, pc}
    10fa:	bf00      	nop

000010fc <__clock_enable_pll>:
// This function enables the PLL.
// Input parameters are: PLL divisor, PLL multiplier
// The CPU frequency is: f_quartz * PLL_multiplier / PLL_divisor
// ---------------------------------------------------------------------------

int __clock_enable_pll(unsigned int divisor, unsigned int multiplier) {
    10fc:	b580      	push	{r7, lr}
    10fe:	b082      	sub	sp, #8
    1100:	af00      	add	r7, sp, #0
    1102:	6078      	str	r0, [r7, #4]
    1104:	6039      	str	r1, [r7, #0]
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
    1106:	f04f 0010 	mov.w	r0, #16
    110a:	f001 f91b 	bl	2344 <FLASH_PrefetchBufferCmd>

    /* Flash 2 wait state */
    FLASH_SetLatency(FLASH_Latency_2);
    110e:	f04f 0002 	mov.w	r0, #2
    1112:	f001 f8d3 	bl	22bc <FLASH_SetLatency>

    /* HCLK = SYSCLK */
    RCC_HCLKConfig(RCC_SYSCLK_Div1);
    1116:	f04f 0000 	mov.w	r0, #0
    111a:	f000 fd29 	bl	1b70 <RCC_HCLKConfig>

    /* PCLK2 = HCLK */
    RCC_PCLK2Config(RCC_HCLK_Div1);
    111e:	f04f 0000 	mov.w	r0, #0
    1122:	f000 fd69 	bl	1bf8 <RCC_PCLK2Config>

    /* PCLK1 = HCLK/2 */
    RCC_PCLK1Config(RCC_HCLK_Div2);
    1126:	f44f 6080 	mov.w	r0, #1024	; 0x400
    112a:	f000 fd43 	bl	1bb4 <RCC_PCLK1Config>

    /* PLLCLK = 8MHz * 9 = 72 MHz */
    RCC_PLLConfig(divisor, multiplier);
    112e:	6878      	ldr	r0, [r7, #4]
    1130:	6839      	ldr	r1, [r7, #0]
    1132:	f000 fcb7 	bl	1aa4 <RCC_PLLConfig>

    /* Enable PLL */
    RCC_PLLCmd(ENABLE);
    1136:	f04f 0001 	mov.w	r0, #1
    113a:	f000 fcd9 	bl	1af0 <RCC_PLLCmd>

    /* Wait till PLL is ready */
    while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);
    113e:	f04f 0039 	mov.w	r0, #57	; 0x39
    1142:	f001 f831 	bl	21a8 <RCC_GetFlagStatus>
    1146:	4603      	mov	r3, r0
    1148:	2b00      	cmp	r3, #0
    114a:	d0f8      	beq.n	113e <__clock_enable_pll+0x42>

    /* Select PLL as system clock source */
    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
    114c:	f04f 0002 	mov.w	r0, #2
    1150:	f000 fcde 	bl	1b10 <RCC_SYSCLKConfig>

    /* Wait till PLL is used as system clock source */
    while(RCC_GetSYSCLKSource() != 0x08);
    1154:	f000 fcfe 	bl	1b54 <RCC_GetSYSCLKSource>
    1158:	4603      	mov	r3, r0
    115a:	2b08      	cmp	r3, #8
    115c:	d1fa      	bne.n	1154 <__clock_enable_pll+0x58>

    return 0;
    115e:	f04f 0300 	mov.w	r3, #0
}
    1162:	4618      	mov	r0, r3
    1164:	f107 0708 	add.w	r7, r7, #8
    1168:	46bd      	mov	sp, r7
    116a:	bd80      	pop	{r7, pc}

0000116c <clock_enable_pll>:
// ---------------------------------------------------------------------------
// This function enables the PLL.
// The CPU frequency is: f_quartz * PLL_multiplier / PLL_divisor
// ---------------------------------------------------------------------------

int clock_enable_pll() {
    116c:	b580      	push	{r7, lr}
    116e:	af00      	add	r7, sp, #0
    __clock_enable_pll(PLL_DIV, PLL_MUL);
    1170:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    1174:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    1178:	f7ff ffc0 	bl	10fc <__clock_enable_pll>
    return 0;
    117c:	f04f 0300 	mov.w	r3, #0
}
    1180:	4618      	mov	r0, r3
    1182:	46bd      	mov	sp, r7
    1184:	bd80      	pop	{r7, pc}
    1186:	bf00      	nop

00001188 <systick_init>:
// ---------------------------------------------------------------------------
// This function initializes the SYSTICK timer. The period contains the
// "FREQUENCY" of the timer interrupt
// ---------------------------------------------------------------------------

int systick_init(unsigned int freq) {
    1188:	b580      	push	{r7, lr}
    118a:	b082      	sub	sp, #8
    118c:	af00      	add	r7, sp, #0
    118e:	6078      	str	r0, [r7, #4]
    SysTick_SetReload(CLOCK_FREQ * PLL_FACTOR / freq / 8);
    1190:	f245 4340 	movw	r3, #21568	; 0x5440
    1194:	f2c0 0389 	movt	r3, #137	; 0x89
    1198:	687a      	ldr	r2, [r7, #4]
    119a:	fbb3 f3f2 	udiv	r3, r3, r2
    119e:	4618      	mov	r0, r3
    11a0:	f001 f918 	bl	23d4 <SysTick_SetReload>
    SysTick_ITConfig(ENABLE);
    11a4:	f04f 0001 	mov.w	r0, #1
    11a8:	f001 f956 	bl	2458 <SysTick_ITConfig>
    SysTick_CounterCmd(SysTick_Counter_Enable);
    11ac:	f04f 0001 	mov.w	r0, #1
    11b0:	f001 f920 	bl	23f4 <SysTick_CounterCmd>
    
    return 0;
    11b4:	f04f 0300 	mov.w	r3, #0
}
    11b8:	4618      	mov	r0, r3
    11ba:	f107 0708 	add.w	r7, r7, #8
    11be:	46bd      	mov	sp, r7
    11c0:	bd80      	pop	{r7, pc}
    11c2:	bf00      	nop

000011c4 <gpio_init>:

// ---------------------------------------------------------------------------
// This function initializes the PORT B port.
// ---------------------------------------------------------------------------

void gpio_init() {
    11c4:	b580      	push	{r7, lr}
    11c6:	b082      	sub	sp, #8
    11c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
    11ca:	f04f 0008 	mov.w	r0, #8
    11ce:	f04f 0101 	mov.w	r1, #1
    11d2:	f000 ff09 	bl	1fe8 <RCC_APB2PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
    11d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    11da:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    11dc:	f04f 0300 	mov.w	r3, #0
    11e0:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    11e2:	f107 0304 	add.w	r3, r7, #4
    11e6:	f640 4000 	movw	r0, #3072	; 0xc00
    11ea:	f2c4 0001 	movt	r0, #16385	; 0x4001
    11ee:	4619      	mov	r1, r3
    11f0:	f001 fa46 	bl	2680 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15 | GPIO_Pin_4;
    11f4:	f24f 0310 	movw	r3, #61456	; 0xf010
    11f8:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    11fa:	f04f 0310 	mov.w	r3, #16
    11fe:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    1200:	f04f 0303 	mov.w	r3, #3
    1204:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    1206:	f107 0304 	add.w	r3, r7, #4
    120a:	f640 4000 	movw	r0, #3072	; 0xc00
    120e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1212:	4619      	mov	r1, r3
    1214:	f001 fa34 	bl	2680 <GPIO_Init>
}
    1218:	f107 0708 	add.w	r7, r7, #8
    121c:	46bd      	mov	sp, r7
    121e:	bd80      	pop	{r7, pc}

00001220 <gpioa_init>:

void gpioa_init() {
    1220:	b580      	push	{r7, lr}
    1222:	b082      	sub	sp, #8
    1224:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
    
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1226:	f04f 0004 	mov.w	r0, #4
    122a:	f04f 0101 	mov.w	r1, #1
    122e:	f000 fedb 	bl	1fe8 <RCC_APB2PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;
    1232:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1236:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    1238:	f04f 0300 	mov.w	r3, #0
    123c:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    123e:	f107 0304 	add.w	r3, r7, #4
    1242:	f640 0000 	movw	r0, #2048	; 0x800
    1246:	f2c4 0001 	movt	r0, #16385	; 0x4001
    124a:	4619      	mov	r1, r3
    124c:	f001 fa18 	bl	2680 <GPIO_Init>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_4;
    1250:	f44f 63e2 	mov.w	r3, #1808	; 0x710
    1254:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    1256:	f04f 0310 	mov.w	r3, #16
    125a:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    125c:	f04f 0303 	mov.w	r3, #3
    1260:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    1262:	f107 0304 	add.w	r3, r7, #4
    1266:	f640 0000 	movw	r0, #2048	; 0x800
    126a:	f2c4 0001 	movt	r0, #16385	; 0x4001
    126e:	4619      	mov	r1, r3
    1270:	f001 fa06 	bl	2680 <GPIO_Init>
}
    1274:	f107 0708 	add.w	r7, r7, #8
    1278:	46bd      	mov	sp, r7
    127a:	bd80      	pop	{r7, pc}

0000127c <gpio_set>:
// ---------------------------------------------------------------------------
// Sets the bits of PORTB according to "data"
// PORTB |= data
// ---------------------------------------------------------------------------

void gpio_set(unsigned int data) {
    127c:	b580      	push	{r7, lr}
    127e:	b082      	sub	sp, #8
    1280:	af00      	add	r7, sp, #0
    1282:	6078      	str	r0, [r7, #4]
    GPIO_SetBits(GPIOB, data);
    1284:	687b      	ldr	r3, [r7, #4]
    1286:	b29b      	uxth	r3, r3
    1288:	f640 4000 	movw	r0, #3072	; 0xc00
    128c:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1290:	4619      	mov	r1, r3
    1292:	f001 fb43 	bl	291c <GPIO_SetBits>
}
    1296:	f107 0708 	add.w	r7, r7, #8
    129a:	46bd      	mov	sp, r7
    129c:	bd80      	pop	{r7, pc}
    129e:	bf00      	nop

000012a0 <gpioa_set>:

void gpioa_set(unsigned int data) {
    12a0:	b580      	push	{r7, lr}
    12a2:	b082      	sub	sp, #8
    12a4:	af00      	add	r7, sp, #0
    12a6:	6078      	str	r0, [r7, #4]
    GPIO_SetBits(GPIOA, data);
    12a8:	687b      	ldr	r3, [r7, #4]
    12aa:	b29b      	uxth	r3, r3
    12ac:	f640 0000 	movw	r0, #2048	; 0x800
    12b0:	f2c4 0001 	movt	r0, #16385	; 0x4001
    12b4:	4619      	mov	r1, r3
    12b6:	f001 fb31 	bl	291c <GPIO_SetBits>
}
    12ba:	f107 0708 	add.w	r7, r7, #8
    12be:	46bd      	mov	sp, r7
    12c0:	bd80      	pop	{r7, pc}
    12c2:	bf00      	nop

000012c4 <gpio_clear>:
// ---------------------------------------------------------------------------
// Clears the bits of PORTB according to "data"
// PORTB &= ~data
// ---------------------------------------------------------------------------

void gpio_clear(unsigned int data) {
    12c4:	b580      	push	{r7, lr}
    12c6:	b082      	sub	sp, #8
    12c8:	af00      	add	r7, sp, #0
    12ca:	6078      	str	r0, [r7, #4]
    GPIO_ResetBits(GPIOB, data);
    12cc:	687b      	ldr	r3, [r7, #4]
    12ce:	b29b      	uxth	r3, r3
    12d0:	f640 4000 	movw	r0, #3072	; 0xc00
    12d4:	f2c4 0001 	movt	r0, #16385	; 0x4001
    12d8:	4619      	mov	r1, r3
    12da:	f001 fb2d 	bl	2938 <GPIO_ResetBits>
}
    12de:	f107 0708 	add.w	r7, r7, #8
    12e2:	46bd      	mov	sp, r7
    12e4:	bd80      	pop	{r7, pc}
    12e6:	bf00      	nop

000012e8 <gpioa_clear>:

void gpioa_clear(unsigned int data) {
    12e8:	b580      	push	{r7, lr}
    12ea:	b082      	sub	sp, #8
    12ec:	af00      	add	r7, sp, #0
    12ee:	6078      	str	r0, [r7, #4]
    GPIO_ResetBits(GPIOA, data);
    12f0:	687b      	ldr	r3, [r7, #4]
    12f2:	b29b      	uxth	r3, r3
    12f4:	f640 0000 	movw	r0, #2048	; 0x800
    12f8:	f2c4 0001 	movt	r0, #16385	; 0x4001
    12fc:	4619      	mov	r1, r3
    12fe:	f001 fb1b 	bl	2938 <GPIO_ResetBits>
}
    1302:	f107 0708 	add.w	r7, r7, #8
    1306:	46bd      	mov	sp, r7
    1308:	bd80      	pop	{r7, pc}
    130a:	bf00      	nop

0000130c <CAN_init>:

// ---------------------------------------------------------------------------
// Initializes CAN controller using a prescaler value
// ---------------------------------------------------------------------------

int CAN_init(unsigned int prescaler) {
    130c:	b580      	push	{r7, lr}
    130e:	b086      	sub	sp, #24
    1310:	af00      	add	r7, sp, #0
    1312:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;
    CAN_InitTypeDef  CAN_InitStructure;

    /* CAN register init */
    CAN_DeInit();
    1314:	f001 fc80 	bl	2c18 <CAN_DeInit>
    CAN_StructInit(&CAN_InitStructure);
    1318:	f107 0308 	add.w	r3, r7, #8
    131c:	4618      	mov	r0, r3
    131e:	f001 febb 	bl	3098 <CAN_StructInit>

    /* CAN Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN, ENABLE);
    1322:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    1326:	f04f 0101 	mov.w	r1, #1
    132a:	f000 fe89 	bl	2040 <RCC_APB1PeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    132e:	f04f 0004 	mov.w	r0, #4
    1332:	f04f 0101 	mov.w	r1, #1
    1336:	f000 fe57 	bl	1fe8 <RCC_APB2PeriphClockCmd>

    /* Configure CAN pin: RX */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
    133a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    133e:	82bb      	strh	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    1340:	f04f 0348 	mov.w	r3, #72	; 0x48
    1344:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    1346:	f107 0314 	add.w	r3, r7, #20
    134a:	f640 0000 	movw	r0, #2048	; 0x800
    134e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1352:	4619      	mov	r1, r3
    1354:	f001 f994 	bl	2680 <GPIO_Init>
  
    /* Configure CAN pin: TX */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
    1358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    135c:	82bb      	strh	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    135e:	f04f 0318 	mov.w	r3, #24
    1362:	75fb      	strb	r3, [r7, #23]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    1364:	f04f 0303 	mov.w	r3, #3
    1368:	75bb      	strb	r3, [r7, #22]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    136a:	f107 0314 	add.w	r3, r7, #20
    136e:	f640 0000 	movw	r0, #2048	; 0x800
    1372:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1376:	4619      	mov	r1, r3
    1378:	f001 f982 	bl	2680 <GPIO_Init>

    /* CAN cell init */
    CAN_InitStructure.CAN_TTCM = DISABLE;
    137c:	f04f 0300 	mov.w	r3, #0
    1380:	723b      	strb	r3, [r7, #8]
    CAN_InitStructure.CAN_ABOM = DISABLE;
    1382:	f04f 0300 	mov.w	r3, #0
    1386:	727b      	strb	r3, [r7, #9]
    CAN_InitStructure.CAN_AWUM = DISABLE;
    1388:	f04f 0300 	mov.w	r3, #0
    138c:	72bb      	strb	r3, [r7, #10]
#ifdef CAN_NO_AUTORETRANSMIT
    CAN_InitStructure.CAN_NART = ENABLE;
    138e:	f04f 0301 	mov.w	r3, #1
    1392:	72fb      	strb	r3, [r7, #11]
#else
#warning Use gcc ... -DCAN_NO_AUTORETRANSMIT ...
    CAN_InitStructure.CAN_NART = DISABLE;
#endif
    CAN_InitStructure.CAN_RFLM = DISABLE;
    1394:	f04f 0300 	mov.w	r3, #0
    1398:	733b      	strb	r3, [r7, #12]
    CAN_InitStructure.CAN_TXFP = DISABLE;
    139a:	f04f 0300 	mov.w	r3, #0
    139e:	737b      	strb	r3, [r7, #13]
#ifdef CAN_LOOPBACK
    CAN_InitStructure.CAN_Mode = CAN_Mode_LoopBack;
#else
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
    13a0:	f04f 0300 	mov.w	r3, #0
    13a4:	73bb      	strb	r3, [r7, #14]
#endif
    CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
    13a6:	f04f 0300 	mov.w	r3, #0
    13aa:	73fb      	strb	r3, [r7, #15]
    CAN_InitStructure.CAN_BS1 = CAN_BS1_8tq;
    13ac:	f04f 0307 	mov.w	r3, #7
    13b0:	743b      	strb	r3, [r7, #16]
    CAN_InitStructure.CAN_BS2 = CAN_BS2_7tq;
    13b2:	f04f 0306 	mov.w	r3, #6
    13b6:	747b      	strb	r3, [r7, #17]
    CAN_InitStructure.CAN_Prescaler = prescaler & 0x3ff;
    13b8:	687b      	ldr	r3, [r7, #4]
    13ba:	b29b      	uxth	r3, r3
    13bc:	ea4f 5383 	mov.w	r3, r3, lsl #22
    13c0:	ea4f 5393 	mov.w	r3, r3, lsr #22
    13c4:	827b      	strh	r3, [r7, #18]
    CAN_Init(&CAN_InitStructure);
    13c6:	f107 0308 	add.w	r3, r7, #8
    13ca:	4618      	mov	r0, r3
    13cc:	f001 fc34 	bl	2c38 <CAN_Init>

    return 0;
    13d0:	f04f 0300 	mov.w	r3, #0
}
    13d4:	4618      	mov	r0, r3
    13d6:	f107 0718 	add.w	r7, r7, #24
    13da:	46bd      	mov	sp, r7
    13dc:	bd80      	pop	{r7, pc}
    13de:	bf00      	nop

000013e0 <CAN_set_prescaler>:

// ---------------------------------------------------------------------------
// Doesn't initialize the controller, just changes the prescaler value.
// ---------------------------------------------------------------------------

int CAN_set_prescaler(unsigned int prescaler) {
    13e0:	b580      	push	{r7, lr}
    13e2:	b086      	sub	sp, #24
    13e4:	af00      	add	r7, sp, #0
    13e6:	6078      	str	r0, [r7, #4]
    CAN_InitTypeDef  CAN_InitStructure;

    /* CAN register init */
    CAN_StructInit(&CAN_InitStructure);
    13e8:	f107 030c 	add.w	r3, r7, #12
    13ec:	4618      	mov	r0, r3
    13ee:	f001 fe53 	bl	3098 <CAN_StructInit>

    /* CAN cell init */
    CAN_InitStructure.CAN_TTCM = DISABLE;
    13f2:	f04f 0300 	mov.w	r3, #0
    13f6:	733b      	strb	r3, [r7, #12]
    CAN_InitStructure.CAN_ABOM = DISABLE;
    13f8:	f04f 0300 	mov.w	r3, #0
    13fc:	737b      	strb	r3, [r7, #13]
    CAN_InitStructure.CAN_AWUM = DISABLE;
    13fe:	f04f 0300 	mov.w	r3, #0
    1402:	73bb      	strb	r3, [r7, #14]
#ifdef CAN_NO_AUTORETRANSMIT
    CAN_InitStructure.CAN_NART = ENABLE;
    1404:	f04f 0301 	mov.w	r3, #1
    1408:	73fb      	strb	r3, [r7, #15]
#else
#warning Use CAN_NO_AUTORETRANSMIT
    CAN_InitStructure.CAN_NART = DISABLE;
#endif
    CAN_InitStructure.CAN_RFLM = DISABLE;
    140a:	f04f 0300 	mov.w	r3, #0
    140e:	743b      	strb	r3, [r7, #16]
    CAN_InitStructure.CAN_TXFP = DISABLE;
    1410:	f04f 0300 	mov.w	r3, #0
    1414:	747b      	strb	r3, [r7, #17]
#ifdef CAN_LOOPBACK
    CAN_InitStructure.CAN_Mode = CAN_Mode_LoopBack;
#else
    CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;
    1416:	f04f 0300 	mov.w	r3, #0
    141a:	74bb      	strb	r3, [r7, #18]
#endif
    CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
    141c:	f04f 0300 	mov.w	r3, #0
    1420:	74fb      	strb	r3, [r7, #19]
    CAN_InitStructure.CAN_BS1 = CAN_BS1_8tq;
    1422:	f04f 0307 	mov.w	r3, #7
    1426:	753b      	strb	r3, [r7, #20]
    CAN_InitStructure.CAN_BS2 = CAN_BS2_7tq;
    1428:	f04f 0306 	mov.w	r3, #6
    142c:	757b      	strb	r3, [r7, #21]
    CAN_InitStructure.CAN_Prescaler = prescaler & 0x3ff;
    142e:	687b      	ldr	r3, [r7, #4]
    1430:	b29b      	uxth	r3, r3
    1432:	ea4f 5383 	mov.w	r3, r3, lsl #22
    1436:	ea4f 5393 	mov.w	r3, r3, lsr #22
    143a:	82fb      	strh	r3, [r7, #22]
    CAN_Init(&CAN_InitStructure);
    143c:	f107 030c 	add.w	r3, r7, #12
    1440:	4618      	mov	r0, r3
    1442:	f001 fbf9 	bl	2c38 <CAN_Init>

    return 0;
    1446:	f04f 0300 	mov.w	r3, #0
}
    144a:	4618      	mov	r0, r3
    144c:	f107 0718 	add.w	r7, r7, #24
    1450:	46bd      	mov	sp, r7
    1452:	bd80      	pop	{r7, pc}

00001454 <CAN_set_filter>:
// Sets the filter mask (Filter: the number if the filter to be used [0..13],
// mask and ID are 29-bit values (0x00000000 ... 0x1fffffff), 
// The MSB is the RTR bit.
// ---------------------------------------------------------------------------

void CAN_set_filter(unsigned int filter, unsigned int mask, unsigned int id) {
    1454:	b580      	push	{r7, lr}
    1456:	b08a      	sub	sp, #40	; 0x28
    1458:	af00      	add	r7, sp, #0
    145a:	60f8      	str	r0, [r7, #12]
    145c:	60b9      	str	r1, [r7, #8]
    145e:	607a      	str	r2, [r7, #4]
    CAN_FilterInitTypeDef CAN_FilterInitStructure;

    unsigned int new_id = (id << 3) | (id >> 30) | CAN_ID_EXT;
    1460:	687b      	ldr	r3, [r7, #4]
    1462:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    1466:	687b      	ldr	r3, [r7, #4]
    1468:	ea4f 7393 	mov.w	r3, r3, lsr #30
    146c:	ea42 0303 	orr.w	r3, r2, r3
    1470:	f043 0304 	orr.w	r3, r3, #4
    1474:	623b      	str	r3, [r7, #32]
    unsigned int new_mask = (mask << 3) | (mask >> 30) | CAN_ID_EXT;
    1476:	68bb      	ldr	r3, [r7, #8]
    1478:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    147c:	68bb      	ldr	r3, [r7, #8]
    147e:	ea4f 7393 	mov.w	r3, r3, lsr #30
    1482:	ea42 0303 	orr.w	r3, r2, r3
    1486:	f043 0304 	orr.w	r3, r3, #4
    148a:	627b      	str	r3, [r7, #36]	; 0x24

    /* CAN filter init */
    CAN_FilterInitStructure.CAN_FilterNumber = filter;
    148c:	68fb      	ldr	r3, [r7, #12]
    148e:	b2db      	uxtb	r3, r3
    1490:	743b      	strb	r3, [r7, #16]
    CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
    1492:	f04f 0300 	mov.w	r3, #0
    1496:	747b      	strb	r3, [r7, #17]
    CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
    1498:	f04f 0301 	mov.w	r3, #1
    149c:	74bb      	strb	r3, [r7, #18]
    CAN_FilterInitStructure.CAN_FilterIdHigh = new_id >> 16;
    149e:	6a3b      	ldr	r3, [r7, #32]
    14a0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    14a4:	b29b      	uxth	r3, r3
    14a6:	82bb      	strh	r3, [r7, #20]
    CAN_FilterInitStructure.CAN_FilterIdLow = new_id & 0xffff;
    14a8:	6a3b      	ldr	r3, [r7, #32]
    14aa:	b29b      	uxth	r3, r3
    14ac:	82fb      	strh	r3, [r7, #22]
    CAN_FilterInitStructure.CAN_FilterMaskIdHigh = new_mask >> 16;
    14ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14b0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    14b4:	b29b      	uxth	r3, r3
    14b6:	833b      	strh	r3, [r7, #24]
    CAN_FilterInitStructure.CAN_FilterMaskIdLow = new_mask & 0xffff;
    14b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    14ba:	b29b      	uxth	r3, r3
    14bc:	837b      	strh	r3, [r7, #26]
    CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_FIFO0;
    14be:	f04f 0300 	mov.w	r3, #0
    14c2:	83bb      	strh	r3, [r7, #28]
    CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
    14c4:	f04f 0301 	mov.w	r3, #1
    14c8:	77bb      	strb	r3, [r7, #30]
    CAN_FilterInit(&CAN_FilterInitStructure);
    14ca:	f107 0310 	add.w	r3, r7, #16
    14ce:	4618      	mov	r0, r3
    14d0:	f001 fcce 	bl	2e70 <CAN_FilterInit>
}
    14d4:	f107 0728 	add.w	r7, r7, #40	; 0x28
    14d8:	46bd      	mov	sp, r7
    14da:	bd80      	pop	{r7, pc}

000014dc <CAN_send>:
// "length" contains the number of data bytes to be sent,
// "data_h" and "data_l" are 32 bit values = 8 bytes of data.
// ---------------------------------------------------------------------------

int CAN_send(unsigned int id, unsigned int length, unsigned int data_h, 
    unsigned int data_l, unsigned int rtr) {
    14dc:	b580      	push	{r7, lr}
    14de:	b088      	sub	sp, #32
    14e0:	af00      	add	r7, sp, #0
    14e2:	60f8      	str	r0, [r7, #12]
    14e4:	60b9      	str	r1, [r7, #8]
    14e6:	607a      	str	r2, [r7, #4]
    14e8:	603b      	str	r3, [r7, #0]

    unsigned char TransmitMailbox;
    unsigned int retval = -1, i = 0;
    14ea:	f04f 33ff 	mov.w	r3, #4294967295
    14ee:	61bb      	str	r3, [r7, #24]
    14f0:	f04f 0300 	mov.w	r3, #0
    14f4:	61fb      	str	r3, [r7, #28]

    /* transmit */
    TxMessage.ExtId = id;
    14f6:	f240 23d4 	movw	r3, #724	; 0x2d4
    14fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    14fe:	68fa      	ldr	r2, [r7, #12]
    1500:	605a      	str	r2, [r3, #4]

    if (rtr)
    1502:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1504:	2b00      	cmp	r3, #0
    1506:	d007      	beq.n	1518 <CAN_send+0x3c>
        TxMessage.RTR = CAN_RTR_REMOTE;
    1508:	f240 23d4 	movw	r3, #724	; 0x2d4
    150c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1510:	f04f 0202 	mov.w	r2, #2
    1514:	725a      	strb	r2, [r3, #9]
    1516:	e006      	b.n	1526 <CAN_send+0x4a>
    else
        TxMessage.RTR = CAN_RTR_DATA;
    1518:	f240 23d4 	movw	r3, #724	; 0x2d4
    151c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1520:	f04f 0200 	mov.w	r2, #0
    1524:	725a      	strb	r2, [r3, #9]

    TxMessage.IDE = CAN_ID_EXT;
    1526:	f240 23d4 	movw	r3, #724	; 0x2d4
    152a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    152e:	f04f 0204 	mov.w	r2, #4
    1532:	721a      	strb	r2, [r3, #8]
    TxMessage.DLC = length;
    1534:	68bb      	ldr	r3, [r7, #8]
    1536:	b2da      	uxtb	r2, r3
    1538:	f240 23d4 	movw	r3, #724	; 0x2d4
    153c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1540:	729a      	strb	r2, [r3, #10]
    TxMessage.Data[0] = (data_h >> 24) & 0xff;
    1542:	687b      	ldr	r3, [r7, #4]
    1544:	ea4f 6313 	mov.w	r3, r3, lsr #24
    1548:	b2da      	uxtb	r2, r3
    154a:	f240 23d4 	movw	r3, #724	; 0x2d4
    154e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1552:	72da      	strb	r2, [r3, #11]
    TxMessage.Data[1] = (data_h >> 16) & 0xff;
    1554:	687b      	ldr	r3, [r7, #4]
    1556:	ea4f 4313 	mov.w	r3, r3, lsr #16
    155a:	b2da      	uxtb	r2, r3
    155c:	f240 23d4 	movw	r3, #724	; 0x2d4
    1560:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1564:	731a      	strb	r2, [r3, #12]
    TxMessage.Data[2] = (data_h >> 8) & 0xff;
    1566:	687b      	ldr	r3, [r7, #4]
    1568:	ea4f 2313 	mov.w	r3, r3, lsr #8
    156c:	b2da      	uxtb	r2, r3
    156e:	f240 23d4 	movw	r3, #724	; 0x2d4
    1572:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1576:	735a      	strb	r2, [r3, #13]
    TxMessage.Data[3] = (data_h >> 0) & 0xff;
    1578:	687b      	ldr	r3, [r7, #4]
    157a:	b2da      	uxtb	r2, r3
    157c:	f240 23d4 	movw	r3, #724	; 0x2d4
    1580:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1584:	739a      	strb	r2, [r3, #14]
    TxMessage.Data[4] = (data_l >> 24) & 0xff;
    1586:	683b      	ldr	r3, [r7, #0]
    1588:	ea4f 6313 	mov.w	r3, r3, lsr #24
    158c:	b2da      	uxtb	r2, r3
    158e:	f240 23d4 	movw	r3, #724	; 0x2d4
    1592:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1596:	73da      	strb	r2, [r3, #15]
    TxMessage.Data[5] = (data_l >> 16) & 0xff;
    1598:	683b      	ldr	r3, [r7, #0]
    159a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    159e:	b2da      	uxtb	r2, r3
    15a0:	f240 23d4 	movw	r3, #724	; 0x2d4
    15a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15a8:	741a      	strb	r2, [r3, #16]
    TxMessage.Data[6] = (data_l >> 8) & 0xff;
    15aa:	683b      	ldr	r3, [r7, #0]
    15ac:	ea4f 2313 	mov.w	r3, r3, lsr #8
    15b0:	b2da      	uxtb	r2, r3
    15b2:	f240 23d4 	movw	r3, #724	; 0x2d4
    15b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15ba:	745a      	strb	r2, [r3, #17]
    TxMessage.Data[7] = (data_l >> 0) & 0xff;
    15bc:	683b      	ldr	r3, [r7, #0]
    15be:	b2da      	uxtb	r2, r3
    15c0:	f240 23d4 	movw	r3, #724	; 0x2d4
    15c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    15c8:	749a      	strb	r2, [r3, #18]

    // Try to send message
    do {
        TransmitMailbox = CAN_Transmit(&TxMessage);
    15ca:	f240 20d4 	movw	r0, #724	; 0x2d4
    15ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
    15d2:	f001 fdc3 	bl	315c <CAN_Transmit>
    15d6:	4603      	mov	r3, r0
    15d8:	75fb      	strb	r3, [r7, #23]
        
        // Waits until the result arrives.
        if (TransmitMailbox != CAN_NO_MB)
    15da:	7dfb      	ldrb	r3, [r7, #23]
    15dc:	2b04      	cmp	r3, #4
    15de:	d008      	beq.n	15f2 <CAN_send+0x116>
            while ((retval = CAN_TransmitStatus(TransmitMailbox)) == CANTXPENDING);
    15e0:	7dfb      	ldrb	r3, [r7, #23]
    15e2:	4618      	mov	r0, r3
    15e4:	f001 ff0a 	bl	33fc <CAN_TransmitStatus>
    15e8:	4603      	mov	r3, r0
    15ea:	61bb      	str	r3, [r7, #24]
    15ec:	69bb      	ldr	r3, [r7, #24]
    15ee:	2b02      	cmp	r3, #2
    15f0:	d0f6      	beq.n	15e0 <CAN_send+0x104>

        i++;
    15f2:	69fb      	ldr	r3, [r7, #28]
    15f4:	f103 0301 	add.w	r3, r3, #1
    15f8:	61fb      	str	r3, [r7, #28]
    // Tries to send message as many times necessary
    } while ((retval != CANTXOK) && (i <= CAN_RETRIES));
    15fa:	69bb      	ldr	r3, [r7, #24]
    15fc:	2b01      	cmp	r3, #1
    15fe:	d003      	beq.n	1608 <CAN_send+0x12c>
    1600:	69fb      	ldr	r3, [r7, #28]
    1602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    1606:	d9e0      	bls.n	15ca <CAN_send+0xee>

    return retval;
    1608:	69bb      	ldr	r3, [r7, #24]
}
    160a:	4618      	mov	r0, r3
    160c:	f107 0720 	add.w	r7, r7, #32
    1610:	46bd      	mov	sp, r7
    1612:	bd80      	pop	{r7, pc}

00001614 <CAN_recv>:
// ---------------------------------------------------------------------------
// Gets the information from the CAN RX fifo. The return value is a 
// pointer to the structrure that contains the received and processed data.
// ---------------------------------------------------------------------------

CanRxMsg *CAN_recv() {
    1614:	b580      	push	{r7, lr}
    1616:	af00      	add	r7, sp, #0
    /* receive */
    RxMessage.StdId = 0x00;
    1618:	f240 23e8 	movw	r3, #744	; 0x2e8
    161c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1620:	f04f 0200 	mov.w	r2, #0
    1624:	601a      	str	r2, [r3, #0]
    RxMessage.IDE = CAN_ID_EXT;
    1626:	f240 23e8 	movw	r3, #744	; 0x2e8
    162a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    162e:	f04f 0204 	mov.w	r2, #4
    1632:	721a      	strb	r2, [r3, #8]
    RxMessage.DLC = 0;
    1634:	f240 23e8 	movw	r3, #744	; 0x2e8
    1638:	f2c2 0300 	movt	r3, #8192	; 0x2000
    163c:	f04f 0200 	mov.w	r2, #0
    1640:	729a      	strb	r2, [r3, #10]
    RxMessage.RTR = 0;
    1642:	f240 23e8 	movw	r3, #744	; 0x2e8
    1646:	f2c2 0300 	movt	r3, #8192	; 0x2000
    164a:	f04f 0200 	mov.w	r2, #0
    164e:	725a      	strb	r2, [r3, #9]
    RxMessage.Data[0] = 0x00;
    1650:	f240 23e8 	movw	r3, #744	; 0x2e8
    1654:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1658:	f04f 0200 	mov.w	r2, #0
    165c:	72da      	strb	r2, [r3, #11]
    RxMessage.Data[1] = 0x00;
    165e:	f240 23e8 	movw	r3, #744	; 0x2e8
    1662:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1666:	f04f 0200 	mov.w	r2, #0
    166a:	731a      	strb	r2, [r3, #12]
    RxMessage.Data[2] = 0x00;
    166c:	f240 23e8 	movw	r3, #744	; 0x2e8
    1670:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1674:	f04f 0200 	mov.w	r2, #0
    1678:	735a      	strb	r2, [r3, #13]
    RxMessage.Data[3] = 0x00;
    167a:	f240 23e8 	movw	r3, #744	; 0x2e8
    167e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1682:	f04f 0200 	mov.w	r2, #0
    1686:	739a      	strb	r2, [r3, #14]
    RxMessage.Data[4] = 0x00;
    1688:	f240 23e8 	movw	r3, #744	; 0x2e8
    168c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1690:	f04f 0200 	mov.w	r2, #0
    1694:	73da      	strb	r2, [r3, #15]
    RxMessage.Data[5] = 0x00;
    1696:	f240 23e8 	movw	r3, #744	; 0x2e8
    169a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    169e:	f04f 0200 	mov.w	r2, #0
    16a2:	741a      	strb	r2, [r3, #16]
    RxMessage.Data[6] = 0x00;
    16a4:	f240 23e8 	movw	r3, #744	; 0x2e8
    16a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    16ac:	f04f 0200 	mov.w	r2, #0
    16b0:	745a      	strb	r2, [r3, #17]
    RxMessage.Data[7] = 0x00;
    16b2:	f240 23e8 	movw	r3, #744	; 0x2e8
    16b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    16ba:	f04f 0200 	mov.w	r2, #0
    16be:	749a      	strb	r2, [r3, #18]

    CAN_Receive(CAN_FIFO0, &RxMessage);
    16c0:	f04f 0000 	mov.w	r0, #0
    16c4:	f240 21e8 	movw	r1, #744	; 0x2e8
    16c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    16cc:	f001 ffca 	bl	3664 <CAN_Receive>

    return &RxMessage;
    16d0:	f240 23e8 	movw	r3, #744	; 0x2e8
    16d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
    16d8:	4618      	mov	r0, r3
    16da:	46bd      	mov	sp, r7
    16dc:	bd80      	pop	{r7, pc}
    16de:	bf00      	nop

000016e0 <usart_init>:

// ---------------------------------------------------------------------------
// Initializes the USART controller using a baud rate value
// ---------------------------------------------------------------------------

int usart_init(unsigned int baudrate) {
    16e0:	b580      	push	{r7, lr}
    16e2:	b088      	sub	sp, #32
    16e4:	af00      	add	r7, sp, #0
    16e6:	6078      	str	r0, [r7, #4]
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable USART1, GPIOA and AFIO clocks */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
    16e8:	f244 0005 	movw	r0, #16389	; 0x4005
    16ec:	f04f 0101 	mov.w	r1, #1
    16f0:	f000 fc7a 	bl	1fe8 <RCC_APB2PeriphClockCmd>

    /* Configure USART1 Tx (PA.09) as alternate function push-pull */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    16f4:	f44f 7300 	mov.w	r3, #512	; 0x200
    16f8:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    16fa:	f04f 0303 	mov.w	r3, #3
    16fe:	73bb      	strb	r3, [r7, #14]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    1700:	f04f 0318 	mov.w	r3, #24
    1704:	73fb      	strb	r3, [r7, #15]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    1706:	f107 030c 	add.w	r3, r7, #12
    170a:	f640 0000 	movw	r0, #2048	; 0x800
    170e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1712:	4619      	mov	r1, r3
    1714:	f000 ffb4 	bl	2680 <GPIO_Init>

    /* Configure USART1 Rx (PA.10) as input floating */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    1718:	f44f 6380 	mov.w	r3, #1024	; 0x400
    171c:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
    171e:	f04f 0304 	mov.w	r3, #4
    1722:	73fb      	strb	r3, [r7, #15]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
    1724:	f107 030c 	add.w	r3, r7, #12
    1728:	f640 0000 	movw	r0, #2048	; 0x800
    172c:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1730:	4619      	mov	r1, r3
    1732:	f000 ffa5 	bl	2680 <GPIO_Init>
        - One Stop Bit
        - Even parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
    */
    USART_InitStructure.USART_BaudRate = baudrate;
    1736:	687b      	ldr	r3, [r7, #4]
    1738:	613b      	str	r3, [r7, #16]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    173a:	f04f 0300 	mov.w	r3, #0
    173e:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    1740:	f04f 0300 	mov.w	r3, #0
    1744:	82fb      	strh	r3, [r7, #22]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    1746:	f04f 0300 	mov.w	r3, #0
    174a:	833b      	strh	r3, [r7, #24]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    174c:	f04f 0300 	mov.w	r3, #0
    1750:	83bb      	strh	r3, [r7, #28]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    1752:	f04f 030c 	mov.w	r3, #12
    1756:	837b      	strh	r3, [r7, #26]

    /* Configure USART1 */
    USART_Init(USART1, &USART_InitStructure);
    1758:	f107 0310 	add.w	r3, r7, #16
    175c:	f643 0000 	movw	r0, #14336	; 0x3800
    1760:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1764:	4619      	mov	r1, r3
    1766:	f002 fafb 	bl	3d60 <USART_Init>

    /* Enable the USART1 */
    USART_Cmd(USART1, ENABLE);
    176a:	f643 0000 	movw	r0, #14336	; 0x3800
    176e:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1772:	f04f 0101 	mov.w	r1, #1
    1776:	f002 fc17 	bl	3fa8 <USART_Cmd>

    return 0;
    177a:	f04f 0300 	mov.w	r3, #0
}
    177e:	4618      	mov	r0, r3
    1780:	f107 0720 	add.w	r7, r7, #32
    1784:	46bd      	mov	sp, r7
    1786:	bd80      	pop	{r7, pc}

00001788 <usart_send_char>:

// ---------------------------------------------------------------------------
// Sends a characher through USART.
// ---------------------------------------------------------------------------

int usart_send_char(char ch) {
    1788:	b580      	push	{r7, lr}
    178a:	b082      	sub	sp, #8
    178c:	af00      	add	r7, sp, #0
    178e:	4603      	mov	r3, r0
    1790:	71fb      	strb	r3, [r7, #7]
    while(USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
    1792:	f643 0000 	movw	r0, #14336	; 0x3800
    1796:	f2c4 0001 	movt	r0, #16385	; 0x4001
    179a:	f04f 0140 	mov.w	r1, #64	; 0x40
    179e:	f002 fe73 	bl	4488 <USART_GetFlagStatus>
    17a2:	4603      	mov	r3, r0
    17a4:	2b00      	cmp	r3, #0
    17a6:	d0f4      	beq.n	1792 <usart_send_char+0xa>
    USART_SendData(USART1, ch);
    17a8:	79fb      	ldrb	r3, [r7, #7]
    17aa:	f643 0000 	movw	r0, #14336	; 0x3800
    17ae:	f2c4 0001 	movt	r0, #16385	; 0x4001
    17b2:	4619      	mov	r1, r3
    17b4:	f002 fd46 	bl	4244 <USART_SendData>

    return 0;
    17b8:	f04f 0300 	mov.w	r3, #0
}
    17bc:	4618      	mov	r0, r3
    17be:	f107 0708 	add.w	r7, r7, #8
    17c2:	46bd      	mov	sp, r7
    17c4:	bd80      	pop	{r7, pc}
    17c6:	bf00      	nop

000017c8 <usart_send_char_non_blocking>:

int usart_send_char_non_blocking(char ch) {
    17c8:	b580      	push	{r7, lr}
    17ca:	b082      	sub	sp, #8
    17cc:	af00      	add	r7, sp, #0
    17ce:	4603      	mov	r3, r0
    17d0:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
    17d2:	f643 0000 	movw	r0, #14336	; 0x3800
    17d6:	f2c4 0001 	movt	r0, #16385	; 0x4001
    17da:	f04f 0140 	mov.w	r1, #64	; 0x40
    17de:	f002 fe53 	bl	4488 <USART_GetFlagStatus>
        return 0x800000;
    17e2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000

    USART_SendData(USART1, ch);

    return 0;
}
    17e6:	4618      	mov	r0, r3
    17e8:	f107 0708 	add.w	r7, r7, #8
    17ec:	46bd      	mov	sp, r7
    17ee:	bd80      	pop	{r7, pc}

000017f0 <usart_tx_ready>:
// ---------------------------------------------------------------------------
// Return with "true" if the USART is ready to send a message,
// else returns with "false".
// ---------------------------------------------------------------------------

int usart_tx_ready() {
    17f0:	b580      	push	{r7, lr}
    17f2:	af00      	add	r7, sp, #0
    if (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
    17f4:	f643 0000 	movw	r0, #14336	; 0x3800
    17f8:	f2c4 0001 	movt	r0, #16385	; 0x4001
    17fc:	f04f 0140 	mov.w	r1, #64	; 0x40
    1800:	f002 fe42 	bl	4488 <USART_GetFlagStatus>
    1804:	4603      	mov	r3, r0
    1806:	2b00      	cmp	r3, #0
    1808:	d102      	bne.n	1810 <usart_tx_ready+0x20>
        return 0;
    180a:	f04f 0300 	mov.w	r3, #0
    180e:	e001      	b.n	1814 <usart_tx_ready+0x24>
    else
        return 1;
    1810:	f04f 0301 	mov.w	r3, #1
}
    1814:	4618      	mov	r0, r3
    1816:	46bd      	mov	sp, r7
    1818:	bd80      	pop	{r7, pc}
    181a:	bf00      	nop

0000181c <usart_recv_char>:

// ---------------------------------------------------------------------------
// Receives a characher through USART.
// ---------------------------------------------------------------------------

char usart_recv_char() {
    181c:	b580      	push	{r7, lr}
    181e:	af00      	add	r7, sp, #0
    while(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
    1820:	f643 0000 	movw	r0, #14336	; 0x3800
    1824:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1828:	f04f 0120 	mov.w	r1, #32
    182c:	f002 fe2c 	bl	4488 <USART_GetFlagStatus>
    1830:	4603      	mov	r3, r0
    1832:	2b00      	cmp	r3, #0
    1834:	d0f4      	beq.n	1820 <usart_recv_char+0x4>
    return USART_ReceiveData(USART1);
    1836:	f643 0000 	movw	r0, #14336	; 0x3800
    183a:	f2c4 0001 	movt	r0, #16385	; 0x4001
    183e:	f002 fd13 	bl	4268 <USART_ReceiveData>
    1842:	4603      	mov	r3, r0
    1844:	b2db      	uxtb	r3, r3
}
    1846:	4618      	mov	r0, r3
    1848:	46bd      	mov	sp, r7
    184a:	bd80      	pop	{r7, pc}

0000184c <usart_rx_ready>:
// ---------------------------------------------------------------------------
// Return with "true" if the USART is ready to receive a message,
// else returns with "false".
// ---------------------------------------------------------------------------

int usart_rx_ready() {
    184c:	b580      	push	{r7, lr}
    184e:	af00      	add	r7, sp, #0
    if (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET)
    1850:	f643 0000 	movw	r0, #14336	; 0x3800
    1854:	f2c4 0001 	movt	r0, #16385	; 0x4001
    1858:	f04f 0120 	mov.w	r1, #32
    185c:	f002 fe14 	bl	4488 <USART_GetFlagStatus>
    1860:	4603      	mov	r3, r0
    1862:	2b00      	cmp	r3, #0
    1864:	d102      	bne.n	186c <usart_rx_ready+0x20>
        return 0;
    1866:	f04f 0300 	mov.w	r3, #0
    186a:	e001      	b.n	1870 <usart_rx_ready+0x24>
    else
        return 1;
    186c:	f04f 0301 	mov.w	r3, #1
}
    1870:	4618      	mov	r0, r3
    1872:	46bd      	mov	sp, r7
    1874:	bd80      	pop	{r7, pc}
    1876:	bf00      	nop

00001878 <usart_send_str>:

// ---------------------------------------------------------------------------
// Sends a characher string through USART.
// ---------------------------------------------------------------------------

int usart_send_str(char *str) {
    1878:	b580      	push	{r7, lr}
    187a:	b084      	sub	sp, #16
    187c:	af00      	add	r7, sp, #0
    187e:	6078      	str	r0, [r7, #4]
    unsigned int counter;

    for (counter = 0; str[counter]; counter++)
    1880:	f04f 0300 	mov.w	r3, #0
    1884:	60fb      	str	r3, [r7, #12]
    1886:	e00a      	b.n	189e <usart_send_str+0x26>
        usart_send_char(str[counter]);
    1888:	687a      	ldr	r2, [r7, #4]
    188a:	68fb      	ldr	r3, [r7, #12]
    188c:	4413      	add	r3, r2
    188e:	781b      	ldrb	r3, [r3, #0]
    1890:	4618      	mov	r0, r3
    1892:	f7ff ff79 	bl	1788 <usart_send_char>
// ---------------------------------------------------------------------------

int usart_send_str(char *str) {
    unsigned int counter;

    for (counter = 0; str[counter]; counter++)
    1896:	68fb      	ldr	r3, [r7, #12]
    1898:	f103 0301 	add.w	r3, r3, #1
    189c:	60fb      	str	r3, [r7, #12]
    189e:	687a      	ldr	r2, [r7, #4]
    18a0:	68fb      	ldr	r3, [r7, #12]
    18a2:	4413      	add	r3, r2
    18a4:	781b      	ldrb	r3, [r3, #0]
    18a6:	2b00      	cmp	r3, #0
    18a8:	d1ee      	bne.n	1888 <usart_send_str+0x10>
        usart_send_char(str[counter]);

    return 0;
    18aa:	f04f 0300 	mov.w	r3, #0
}
    18ae:	4618      	mov	r0, r3
    18b0:	f107 0710 	add.w	r7, r7, #16
    18b4:	46bd      	mov	sp, r7
    18b6:	bd80      	pop	{r7, pc}

000018b8 <RCC_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
    18b8:	b480      	push	{r7}
    18ba:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
    18bc:	f241 0300 	movw	r3, #4096	; 0x1000
    18c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    18c4:	f241 0200 	movw	r2, #4096	; 0x1000
    18c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
    18cc:	6812      	ldr	r2, [r2, #0]
    18ce:	f042 0201 	orr.w	r2, r2, #1
    18d2:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
    18d4:	f241 0200 	movw	r2, #4096	; 0x1000
    18d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
    18dc:	f241 0300 	movw	r3, #4096	; 0x1000
    18e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    18e4:	6859      	ldr	r1, [r3, #4]
    18e6:	f240 0300 	movw	r3, #0
    18ea:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
    18ee:	ea01 0303 	and.w	r3, r1, r3
    18f2:	6053      	str	r3, [r2, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
    18f4:	f241 0300 	movw	r3, #4096	; 0x1000
    18f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    18fc:	f241 0200 	movw	r2, #4096	; 0x1000
    1900:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1904:	6812      	ldr	r2, [r2, #0]
    1906:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
    190a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    190e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
    1910:	f241 0300 	movw	r3, #4096	; 0x1000
    1914:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1918:	f241 0200 	movw	r2, #4096	; 0x1000
    191c:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1920:	6812      	ldr	r2, [r2, #0]
    1922:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    1926:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
    1928:	f241 0300 	movw	r3, #4096	; 0x1000
    192c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1930:	f241 0200 	movw	r2, #4096	; 0x1000
    1934:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1938:	6852      	ldr	r2, [r2, #4]
    193a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
    193e:	605a      	str	r2, [r3, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
    1940:	f241 0300 	movw	r3, #4096	; 0x1000
    1944:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1948:	f04f 0200 	mov.w	r2, #0
    194c:	609a      	str	r2, [r3, #8]
}
    194e:	46bd      	mov	sp, r7
    1950:	bc80      	pop	{r7}
    1952:	4770      	bx	lr

00001954 <RCC_HSEConfig>:
*                         clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HSEConfig(u32 RCC_HSE)
{
    1954:	b480      	push	{r7}
    1956:	b083      	sub	sp, #12
    1958:	af00      	add	r7, sp, #0
    195a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    195c:	f241 0300 	movw	r3, #4096	; 0x1000
    1960:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1964:	f241 0200 	movw	r2, #4096	; 0x1000
    1968:	f2c4 0202 	movt	r2, #16386	; 0x4002
    196c:	6812      	ldr	r2, [r2, #0]
    196e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    1972:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    1974:	f241 0300 	movw	r3, #4096	; 0x1000
    1978:	f2c4 0302 	movt	r3, #16386	; 0x4002
    197c:	f241 0200 	movw	r2, #4096	; 0x1000
    1980:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1984:	6812      	ldr	r2, [r2, #0]
    1986:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    198a:	601a      	str	r2, [r3, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    1992:	d003      	beq.n	199c <RCC_HSEConfig+0x48>
    1994:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1998:	d00d      	beq.n	19b6 <RCC_HSEConfig+0x62>
    199a:	e018      	b.n	19ce <RCC_HSEConfig+0x7a>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
    199c:	f241 0300 	movw	r3, #4096	; 0x1000
    19a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    19a4:	f241 0200 	movw	r2, #4096	; 0x1000
    19a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
    19ac:	6812      	ldr	r2, [r2, #0]
    19ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    19b2:	601a      	str	r2, [r3, #0]
      break;
    19b4:	e00b      	b.n	19ce <RCC_HSEConfig+0x7a>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    19b6:	f241 0300 	movw	r3, #4096	; 0x1000
    19ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
    19be:	f241 0200 	movw	r2, #4096	; 0x1000
    19c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
    19c6:	6812      	ldr	r2, [r2, #0]
    19c8:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
    19cc:	601a      	str	r2, [r3, #0]
      break;            
      
    default:
      break;      
  }
}
    19ce:	f107 070c 	add.w	r7, r7, #12
    19d2:	46bd      	mov	sp, r7
    19d4:	bc80      	pop	{r7}
    19d6:	4770      	bx	lr

000019d8 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    19d8:	b580      	push	{r7, lr}
    19da:	b082      	sub	sp, #8
    19dc:	af00      	add	r7, sp, #0
  vu32 StartUpCounter = 0;
    19de:	f04f 0300 	mov.w	r3, #0
    19e2:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    19e4:	f04f 0300 	mov.w	r3, #0
    19e8:	71bb      	strb	r3, [r7, #6]
  FlagStatus HSEStatus = RESET;
    19ea:	f04f 0300 	mov.w	r3, #0
    19ee:	71fb      	strb	r3, [r7, #7]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    19f0:	f04f 0031 	mov.w	r0, #49	; 0x31
    19f4:	f000 fbd8 	bl	21a8 <RCC_GetFlagStatus>
    19f8:	4603      	mov	r3, r0
    19fa:	71fb      	strb	r3, [r7, #7]
    StartUpCounter++;  
    19fc:	683b      	ldr	r3, [r7, #0]
    19fe:	f103 0301 	add.w	r3, r3, #1
    1a02:	603b      	str	r3, [r7, #0]
  } while((HSEStatus == RESET) && (StartUpCounter != HSEStartUp_TimeOut));
    1a04:	79fb      	ldrb	r3, [r7, #7]
    1a06:	2b00      	cmp	r3, #0
    1a08:	d103      	bne.n	1a12 <RCC_WaitForHSEStartUp+0x3a>
    1a0a:	683b      	ldr	r3, [r7, #0]
    1a0c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1a10:	d1ee      	bne.n	19f0 <RCC_WaitForHSEStartUp+0x18>


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    1a12:	f04f 0031 	mov.w	r0, #49	; 0x31
    1a16:	f000 fbc7 	bl	21a8 <RCC_GetFlagStatus>
    1a1a:	4603      	mov	r3, r0
    1a1c:	2b00      	cmp	r3, #0
    1a1e:	d003      	beq.n	1a28 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
    1a20:	f04f 0301 	mov.w	r3, #1
    1a24:	71bb      	strb	r3, [r7, #6]
    1a26:	e002      	b.n	1a2e <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
    1a28:	f04f 0300 	mov.w	r3, #0
    1a2c:	71bb      	strb	r3, [r7, #6]
  }  

  return (status);
    1a2e:	79bb      	ldrb	r3, [r7, #6]
}
    1a30:	4618      	mov	r0, r3
    1a32:	f107 0708 	add.w	r7, r7, #8
    1a36:	46bd      	mov	sp, r7
    1a38:	bd80      	pop	{r7, pc}
    1a3a:	bf00      	nop

00001a3c <RCC_AdjustHSICalibrationValue>:
*                    This parameter must be a number between 0 and 0x1F.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_AdjustHSICalibrationValue(u8 HSICalibrationValue)
{
    1a3c:	b480      	push	{r7}
    1a3e:	b085      	sub	sp, #20
    1a40:	af00      	add	r7, sp, #0
    1a42:	4603      	mov	r3, r0
    1a44:	71fb      	strb	r3, [r7, #7]
  u32 tmpreg = 0;
    1a46:	f04f 0300 	mov.w	r3, #0
    1a4a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
    1a4c:	f241 0300 	movw	r3, #4096	; 0x1000
    1a50:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1a54:	681b      	ldr	r3, [r3, #0]
    1a56:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1a58:	68fb      	ldr	r3, [r7, #12]
    1a5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    1a5e:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (u32)HSICalibrationValue << 3;
    1a60:	79fb      	ldrb	r3, [r7, #7]
    1a62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1a66:	68fa      	ldr	r2, [r7, #12]
    1a68:	ea42 0303 	orr.w	r3, r2, r3
    1a6c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
    1a6e:	f241 0300 	movw	r3, #4096	; 0x1000
    1a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1a76:	68fa      	ldr	r2, [r7, #12]
    1a78:	601a      	str	r2, [r3, #0]
}
    1a7a:	f107 0714 	add.w	r7, r7, #20
    1a7e:	46bd      	mov	sp, r7
    1a80:	bc80      	pop	{r7}
    1a82:	4770      	bx	lr

00001a84 <RCC_HSICmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HSICmd(FunctionalState NewState)
{
    1a84:	b480      	push	{r7}
    1a86:	b083      	sub	sp, #12
    1a88:	af00      	add	r7, sp, #0
    1a8a:	4603      	mov	r3, r0
    1a8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_HSION_BB = (u32)NewState;
    1a8e:	f240 0300 	movw	r3, #0
    1a92:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1a96:	79fa      	ldrb	r2, [r7, #7]
    1a98:	601a      	str	r2, [r3, #0]
}
    1a9a:	f107 070c 	add.w	r7, r7, #12
    1a9e:	46bd      	mov	sp, r7
    1aa0:	bc80      	pop	{r7}
    1aa2:	4770      	bx	lr

00001aa4 <RCC_PLLConfig>:
*                    This parameter can be RCC_PLLMul_x where x:[2,16]
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLLConfig(u32 RCC_PLLSource, u32 RCC_PLLMul)
{
    1aa4:	b480      	push	{r7}
    1aa6:	b085      	sub	sp, #20
    1aa8:	af00      	add	r7, sp, #0
    1aaa:	6078      	str	r0, [r7, #4]
    1aac:	6039      	str	r1, [r7, #0]
  u32 tmpreg = 0;
    1aae:	f04f 0300 	mov.w	r3, #0
    1ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1ab4:	f241 0300 	movw	r3, #4096	; 0x1000
    1ab8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1abc:	685b      	ldr	r3, [r3, #4]
    1abe:	60fb      	str	r3, [r7, #12]

  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    1ac0:	68fb      	ldr	r3, [r7, #12]
    1ac2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    1ac6:	60fb      	str	r3, [r7, #12]

  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    1ac8:	687a      	ldr	r2, [r7, #4]
    1aca:	683b      	ldr	r3, [r7, #0]
    1acc:	ea42 0303 	orr.w	r3, r2, r3
    1ad0:	68fa      	ldr	r2, [r7, #12]
    1ad2:	ea42 0303 	orr.w	r3, r2, r3
    1ad6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
    1ad8:	f241 0300 	movw	r3, #4096	; 0x1000
    1adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1ae0:	68fa      	ldr	r2, [r7, #12]
    1ae2:	605a      	str	r2, [r3, #4]
}
    1ae4:	f107 0714 	add.w	r7, r7, #20
    1ae8:	46bd      	mov	sp, r7
    1aea:	bc80      	pop	{r7}
    1aec:	4770      	bx	lr
    1aee:	bf00      	nop

00001af0 <RCC_PLLCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLLCmd(FunctionalState NewState)
{
    1af0:	b480      	push	{r7}
    1af2:	b083      	sub	sp, #12
    1af4:	af00      	add	r7, sp, #0
    1af6:	4603      	mov	r3, r0
    1af8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
    1afa:	f240 0360 	movw	r3, #96	; 0x60
    1afe:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1b02:	79fa      	ldrb	r2, [r7, #7]
    1b04:	601a      	str	r2, [r3, #0]
}
    1b06:	f107 070c 	add.w	r7, r7, #12
    1b0a:	46bd      	mov	sp, r7
    1b0c:	bc80      	pop	{r7}
    1b0e:	4770      	bx	lr

00001b10 <RCC_SYSCLKConfig>:
*                       - RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_SYSCLKConfig(u32 RCC_SYSCLKSource)
{
    1b10:	b480      	push	{r7}
    1b12:	b085      	sub	sp, #20
    1b14:	af00      	add	r7, sp, #0
    1b16:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
    1b18:	f04f 0300 	mov.w	r3, #0
    1b1c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
    1b1e:	f241 0300 	movw	r3, #4096	; 0x1000
    1b22:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1b26:	685b      	ldr	r3, [r3, #4]
    1b28:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    1b2a:	68fb      	ldr	r3, [r7, #12]
    1b2c:	f023 0303 	bic.w	r3, r3, #3
    1b30:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    1b32:	68fa      	ldr	r2, [r7, #12]
    1b34:	687b      	ldr	r3, [r7, #4]
    1b36:	ea42 0303 	orr.w	r3, r2, r3
    1b3a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
    1b3c:	f241 0300 	movw	r3, #4096	; 0x1000
    1b40:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1b44:	68fa      	ldr	r2, [r7, #12]
    1b46:	605a      	str	r2, [r3, #4]
}
    1b48:	f107 0714 	add.w	r7, r7, #20
    1b4c:	46bd      	mov	sp, r7
    1b4e:	bc80      	pop	{r7}
    1b50:	4770      	bx	lr
    1b52:	bf00      	nop

00001b54 <RCC_GetSYSCLKSource>:
*                       - 0x00: HSI used as system clock
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
    1b54:	b480      	push	{r7}
    1b56:	af00      	add	r7, sp, #0
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
    1b58:	f241 0300 	movw	r3, #4096	; 0x1000
    1b5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1b60:	685b      	ldr	r3, [r3, #4]
    1b62:	b2db      	uxtb	r3, r3
    1b64:	f003 030c 	and.w	r3, r3, #12
}
    1b68:	4618      	mov	r0, r3
    1b6a:	46bd      	mov	sp, r7
    1b6c:	bc80      	pop	{r7}
    1b6e:	4770      	bx	lr

00001b70 <RCC_HCLKConfig>:
*                       - RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HCLKConfig(u32 RCC_SYSCLK)
{
    1b70:	b480      	push	{r7}
    1b72:	b085      	sub	sp, #20
    1b74:	af00      	add	r7, sp, #0
    1b76:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
    1b78:	f04f 0300 	mov.w	r3, #0
    1b7c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
    1b7e:	f241 0300 	movw	r3, #4096	; 0x1000
    1b82:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1b86:	685b      	ldr	r3, [r3, #4]
    1b88:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    1b8a:	68fb      	ldr	r3, [r7, #12]
    1b8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1b90:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    1b92:	68fa      	ldr	r2, [r7, #12]
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	ea42 0303 	orr.w	r3, r2, r3
    1b9a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
    1b9c:	f241 0300 	movw	r3, #4096	; 0x1000
    1ba0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1ba4:	68fa      	ldr	r2, [r7, #12]
    1ba6:	605a      	str	r2, [r3, #4]
}
    1ba8:	f107 0714 	add.w	r7, r7, #20
    1bac:	46bd      	mov	sp, r7
    1bae:	bc80      	pop	{r7}
    1bb0:	4770      	bx	lr
    1bb2:	bf00      	nop

00001bb4 <RCC_PCLK1Config>:
*                       - RCC_HCLK_Div16: APB1 clock = HCLK/16
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PCLK1Config(u32 RCC_HCLK)
{
    1bb4:	b480      	push	{r7}
    1bb6:	b085      	sub	sp, #20
    1bb8:	af00      	add	r7, sp, #0
    1bba:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
    1bbc:	f04f 0300 	mov.w	r3, #0
    1bc0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
    1bc2:	f241 0300 	movw	r3, #4096	; 0x1000
    1bc6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1bca:	685b      	ldr	r3, [r3, #4]
    1bcc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    1bce:	68fb      	ldr	r3, [r7, #12]
    1bd0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    1bd4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    1bd6:	68fa      	ldr	r2, [r7, #12]
    1bd8:	687b      	ldr	r3, [r7, #4]
    1bda:	ea42 0303 	orr.w	r3, r2, r3
    1bde:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
    1be0:	f241 0300 	movw	r3, #4096	; 0x1000
    1be4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1be8:	68fa      	ldr	r2, [r7, #12]
    1bea:	605a      	str	r2, [r3, #4]
}
    1bec:	f107 0714 	add.w	r7, r7, #20
    1bf0:	46bd      	mov	sp, r7
    1bf2:	bc80      	pop	{r7}
    1bf4:	4770      	bx	lr
    1bf6:	bf00      	nop

00001bf8 <RCC_PCLK2Config>:
*                       - RCC_HCLK_Div16: APB2 clock = HCLK/16
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PCLK2Config(u32 RCC_HCLK)
{
    1bf8:	b480      	push	{r7}
    1bfa:	b085      	sub	sp, #20
    1bfc:	af00      	add	r7, sp, #0
    1bfe:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
    1c00:	f04f 0300 	mov.w	r3, #0
    1c04:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
    1c06:	f241 0300 	movw	r3, #4096	; 0x1000
    1c0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1c0e:	685b      	ldr	r3, [r3, #4]
    1c10:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    1c12:	68fb      	ldr	r3, [r7, #12]
    1c14:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    1c18:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    1c1a:	687b      	ldr	r3, [r7, #4]
    1c1c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1c20:	68fa      	ldr	r2, [r7, #12]
    1c22:	ea42 0303 	orr.w	r3, r2, r3
    1c26:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
    1c28:	f241 0300 	movw	r3, #4096	; 0x1000
    1c2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1c30:	68fa      	ldr	r2, [r7, #12]
    1c32:	605a      	str	r2, [r3, #4]
}
    1c34:	f107 0714 	add.w	r7, r7, #20
    1c38:	46bd      	mov	sp, r7
    1c3a:	bc80      	pop	{r7}
    1c3c:	4770      	bx	lr
    1c3e:	bf00      	nop

00001c40 <RCC_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ITConfig(u8 RCC_IT, FunctionalState NewState)
{
    1c40:	b480      	push	{r7}
    1c42:	b083      	sub	sp, #12
    1c44:	af00      	add	r7, sp, #0
    1c46:	4602      	mov	r2, r0
    1c48:	460b      	mov	r3, r1
    1c4a:	71fa      	strb	r2, [r7, #7]
    1c4c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1c4e:	79bb      	ldrb	r3, [r7, #6]
    1c50:	2b00      	cmp	r3, #0
    1c52:	d00f      	beq.n	1c74 <RCC_ITConfig+0x34>
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to enable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS |= RCC_IT;
    1c54:	f241 0309 	movw	r3, #4105	; 0x1009
    1c58:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1c5c:	f241 0209 	movw	r2, #4105	; 0x1009
    1c60:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1c64:	7812      	ldrb	r2, [r2, #0]
    1c66:	b2d1      	uxtb	r1, r2
    1c68:	79fa      	ldrb	r2, [r7, #7]
    1c6a:	ea41 0202 	orr.w	r2, r1, r2
    1c6e:	b2d2      	uxtb	r2, r2
    1c70:	701a      	strb	r2, [r3, #0]
    1c72:	e011      	b.n	1c98 <RCC_ITConfig+0x58>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[12:8] bits to disable the selected interrupts */
    *(vu8 *) CIR_BYTE2_ADDRESS &= (u8)~RCC_IT;
    1c74:	f241 0309 	movw	r3, #4105	; 0x1009
    1c78:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1c7c:	f241 0209 	movw	r2, #4105	; 0x1009
    1c80:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1c84:	7812      	ldrb	r2, [r2, #0]
    1c86:	b2d1      	uxtb	r1, r2
    1c88:	79fa      	ldrb	r2, [r7, #7]
    1c8a:	ea6f 0202 	mvn.w	r2, r2
    1c8e:	b2d2      	uxtb	r2, r2
    1c90:	ea01 0202 	and.w	r2, r1, r2
    1c94:	b2d2      	uxtb	r2, r2
    1c96:	701a      	strb	r2, [r3, #0]
  }
}
    1c98:	f107 070c 	add.w	r7, r7, #12
    1c9c:	46bd      	mov	sp, r7
    1c9e:	bc80      	pop	{r7}
    1ca0:	4770      	bx	lr
    1ca2:	bf00      	nop

00001ca4 <RCC_USBCLKConfig>:
*                         clock source
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_USBCLKConfig(u32 RCC_USBCLKSource)
{
    1ca4:	b480      	push	{r7}
    1ca6:	b083      	sub	sp, #12
    1ca8:	af00      	add	r7, sp, #0
    1caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(vu32 *) CFGR_USBPRE_BB = RCC_USBCLKSource;
    1cac:	f240 03d8 	movw	r3, #216	; 0xd8
    1cb0:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1cb4:	687a      	ldr	r2, [r7, #4]
    1cb6:	601a      	str	r2, [r3, #0]
}
    1cb8:	f107 070c 	add.w	r7, r7, #12
    1cbc:	46bd      	mov	sp, r7
    1cbe:	bc80      	pop	{r7}
    1cc0:	4770      	bx	lr
    1cc2:	bf00      	nop

00001cc4 <RCC_ADCCLKConfig>:
*                       - RCC_PCLK2_Div8: ADC clock = PCLK2/8
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ADCCLKConfig(u32 RCC_PCLK2)
{
    1cc4:	b480      	push	{r7}
    1cc6:	b085      	sub	sp, #20
    1cc8:	af00      	add	r7, sp, #0
    1cca:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
    1ccc:	f04f 0300 	mov.w	r3, #0
    1cd0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
    1cd2:	f241 0300 	movw	r3, #4096	; 0x1000
    1cd6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1cda:	685b      	ldr	r3, [r3, #4]
    1cdc:	60fb      	str	r3, [r7, #12]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    1cde:	68fb      	ldr	r3, [r7, #12]
    1ce0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    1ce4:	60fb      	str	r3, [r7, #12]

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    1ce6:	68fa      	ldr	r2, [r7, #12]
    1ce8:	687b      	ldr	r3, [r7, #4]
    1cea:	ea42 0303 	orr.w	r3, r2, r3
    1cee:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
    1cf0:	f241 0300 	movw	r3, #4096	; 0x1000
    1cf4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1cf8:	68fa      	ldr	r2, [r7, #12]
    1cfa:	605a      	str	r2, [r3, #4]
}
    1cfc:	f107 0714 	add.w	r7, r7, #20
    1d00:	46bd      	mov	sp, r7
    1d02:	bc80      	pop	{r7}
    1d04:	4770      	bx	lr
    1d06:	bf00      	nop

00001d08 <RCC_LSEConfig>:
*                         clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_LSEConfig(u8 RCC_LSE)
{
    1d08:	b480      	push	{r7}
    1d0a:	b083      	sub	sp, #12
    1d0c:	af00      	add	r7, sp, #0
    1d0e:	4603      	mov	r3, r0
    1d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
    1d12:	f241 0320 	movw	r3, #4128	; 0x1020
    1d16:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1d1a:	f04f 0200 	mov.w	r2, #0
    1d1e:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(vu8 *) BDCR_ADDRESS = RCC_LSE_OFF;
    1d20:	f241 0320 	movw	r3, #4128	; 0x1020
    1d24:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1d28:	f04f 0200 	mov.w	r2, #0
    1d2c:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    1d2e:	79fb      	ldrb	r3, [r7, #7]
    1d30:	2b01      	cmp	r3, #1
    1d32:	d002      	beq.n	1d3a <RCC_LSEConfig+0x32>
    1d34:	2b04      	cmp	r3, #4
    1d36:	d008      	beq.n	1d4a <RCC_LSEConfig+0x42>
    1d38:	e00e      	b.n	1d58 <RCC_LSEConfig+0x50>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_ON;
    1d3a:	f241 0320 	movw	r3, #4128	; 0x1020
    1d3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1d42:	f04f 0201 	mov.w	r2, #1
    1d46:	701a      	strb	r2, [r3, #0]
      break;
    1d48:	e006      	b.n	1d58 <RCC_LSEConfig+0x50>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(vu8 *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    1d4a:	f241 0320 	movw	r3, #4128	; 0x1020
    1d4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1d52:	f04f 0205 	mov.w	r2, #5
    1d56:	701a      	strb	r2, [r3, #0]
      break;            
      
    default:
      break;      
  }
}
    1d58:	f107 070c 	add.w	r7, r7, #12
    1d5c:	46bd      	mov	sp, r7
    1d5e:	bc80      	pop	{r7}
    1d60:	4770      	bx	lr
    1d62:	bf00      	nop

00001d64 <RCC_LSICmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_LSICmd(FunctionalState NewState)
{
    1d64:	b480      	push	{r7}
    1d66:	b083      	sub	sp, #12
    1d68:	af00      	add	r7, sp, #0
    1d6a:	4603      	mov	r3, r0
    1d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CSR_LSION_BB = (u32)NewState;
    1d6e:	f240 4380 	movw	r3, #1152	; 0x480
    1d72:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1d76:	79fa      	ldrb	r2, [r7, #7]
    1d78:	601a      	str	r2, [r3, #0]
}
    1d7a:	f107 070c 	add.w	r7, r7, #12
    1d7e:	46bd      	mov	sp, r7
    1d80:	bc80      	pop	{r7}
    1d82:	4770      	bx	lr

00001d84 <RCC_RTCCLKConfig>:
*                         selected as RTC clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_RTCCLKConfig(u32 RCC_RTCCLKSource)
{
    1d84:	b480      	push	{r7}
    1d86:	b083      	sub	sp, #12
    1d88:	af00      	add	r7, sp, #0
    1d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    1d8c:	f241 0300 	movw	r3, #4096	; 0x1000
    1d90:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1d94:	f241 0200 	movw	r2, #4096	; 0x1000
    1d98:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1d9c:	6a11      	ldr	r1, [r2, #32]
    1d9e:	687a      	ldr	r2, [r7, #4]
    1da0:	ea41 0202 	orr.w	r2, r1, r2
    1da4:	621a      	str	r2, [r3, #32]
}
    1da6:	f107 070c 	add.w	r7, r7, #12
    1daa:	46bd      	mov	sp, r7
    1dac:	bc80      	pop	{r7}
    1dae:	4770      	bx	lr

00001db0 <RCC_RTCCLKCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    1db0:	b480      	push	{r7}
    1db2:	b083      	sub	sp, #12
    1db4:	af00      	add	r7, sp, #0
    1db6:	4603      	mov	r3, r0
    1db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_RTCEN_BB = (u32)NewState;
    1dba:	f240 433c 	movw	r3, #1084	; 0x43c
    1dbe:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1dc2:	79fa      	ldrb	r2, [r7, #7]
    1dc4:	601a      	str	r2, [r3, #0]
}
    1dc6:	f107 070c 	add.w	r7, r7, #12
    1dca:	46bd      	mov	sp, r7
    1dcc:	bc80      	pop	{r7}
    1dce:	4770      	bx	lr

00001dd0 <RCC_GetClocksFreq>:
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    1dd0:	b480      	push	{r7}
    1dd2:	b087      	sub	sp, #28
    1dd4:	af00      	add	r7, sp, #0
    1dd6:	6078      	str	r0, [r7, #4]
  u32 tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    1dd8:	f04f 0300 	mov.w	r3, #0
    1ddc:	60bb      	str	r3, [r7, #8]
    1dde:	f04f 0300 	mov.w	r3, #0
    1de2:	60fb      	str	r3, [r7, #12]
    1de4:	f04f 0300 	mov.w	r3, #0
    1de8:	613b      	str	r3, [r7, #16]
    1dea:	f04f 0300 	mov.w	r3, #0
    1dee:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    1df0:	f241 0300 	movw	r3, #4096	; 0x1000
    1df4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1df8:	685b      	ldr	r3, [r3, #4]
    1dfa:	f003 030c 	and.w	r3, r3, #12
    1dfe:	60bb      	str	r3, [r7, #8]

  switch (tmp)
    1e00:	68bb      	ldr	r3, [r7, #8]
    1e02:	2b04      	cmp	r3, #4
    1e04:	d00a      	beq.n	1e1c <RCC_GetClocksFreq+0x4c>
    1e06:	2b08      	cmp	r3, #8
    1e08:	d00f      	beq.n	1e2a <RCC_GetClocksFreq+0x5a>
    1e0a:	2b00      	cmp	r3, #0
    1e0c:	d14d      	bne.n	1eaa <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    1e0e:	687a      	ldr	r2, [r7, #4]
    1e10:	f241 2300 	movw	r3, #4608	; 0x1200
    1e14:	f2c0 037a 	movt	r3, #122	; 0x7a
    1e18:	6013      	str	r3, [r2, #0]
      break;
    1e1a:	e04c      	b.n	1eb6 <RCC_GetClocksFreq+0xe6>

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
    1e1c:	687a      	ldr	r2, [r7, #4]
    1e1e:	f641 3300 	movw	r3, #6912	; 0x1b00
    1e22:	f2c0 03b7 	movt	r3, #183	; 0xb7
    1e26:	6013      	str	r3, [r2, #0]
      break;
    1e28:	e045      	b.n	1eb6 <RCC_GetClocksFreq+0xe6>

    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    1e2a:	f241 0300 	movw	r3, #4096	; 0x1000
    1e2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1e32:	685b      	ldr	r3, [r3, #4]
    1e34:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    1e38:	60fb      	str	r3, [r7, #12]
      pllmull = ( pllmull >> 18) + 2;
    1e3a:	68fb      	ldr	r3, [r7, #12]
    1e3c:	ea4f 4393 	mov.w	r3, r3, lsr #18
    1e40:	f103 0302 	add.w	r3, r3, #2
    1e44:	60fb      	str	r3, [r7, #12]

      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    1e46:	f241 0300 	movw	r3, #4096	; 0x1000
    1e4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1e4e:	685b      	ldr	r3, [r3, #4]
    1e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    1e54:	613b      	str	r3, [r7, #16]

      if (pllsource == 0x00)
    1e56:	693b      	ldr	r3, [r7, #16]
    1e58:	2b00      	cmp	r3, #0
    1e5a:	d109      	bne.n	1e70 <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
    1e5c:	68fa      	ldr	r2, [r7, #12]
    1e5e:	f640 1300 	movw	r3, #2304	; 0x900
    1e62:	f2c0 033d 	movt	r3, #61	; 0x3d
    1e66:	fb03 f202 	mul.w	r2, r3, r2
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	601a      	str	r2, [r3, #0]
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
        }
      }
      break;
    1e6e:	e022      	b.n	1eb6 <RCC_GetClocksFreq+0xe6>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pllmull;
      }
      else
      {/* HSE selected as PLL clock entry */

        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (u32)RESET)
    1e70:	f241 0300 	movw	r3, #4096	; 0x1000
    1e74:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1e78:	685b      	ldr	r3, [r3, #4]
    1e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d009      	beq.n	1e96 <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
    1e82:	68fa      	ldr	r2, [r7, #12]
    1e84:	f648 5380 	movw	r3, #36224	; 0x8d80
    1e88:	f2c0 035b 	movt	r3, #91	; 0x5b
    1e8c:	fb03 f202 	mul.w	r2, r3, r2
    1e90:	687b      	ldr	r3, [r7, #4]
    1e92:	601a      	str	r2, [r3, #0]
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
        }
      }
      break;
    1e94:	e00f      	b.n	1eb6 <RCC_GetClocksFreq+0xe6>

          RCC_Clocks->SYSCLK_Frequency = (HSE_Value >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_Value * pllmull;
    1e96:	68fa      	ldr	r2, [r7, #12]
    1e98:	f641 3300 	movw	r3, #6912	; 0x1b00
    1e9c:	f2c0 03b7 	movt	r3, #183	; 0xb7
    1ea0:	fb03 f202 	mul.w	r2, r3, r2
    1ea4:	687b      	ldr	r3, [r7, #4]
    1ea6:	601a      	str	r2, [r3, #0]
        }
      }
      break;
    1ea8:	e005      	b.n	1eb6 <RCC_GetClocksFreq+0xe6>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
    1eaa:	687a      	ldr	r2, [r7, #4]
    1eac:	f241 2300 	movw	r3, #4608	; 0x1200
    1eb0:	f2c0 037a 	movt	r3, #122	; 0x7a
    1eb4:	6013      	str	r3, [r2, #0]
      break;
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    1eb6:	f241 0300 	movw	r3, #4096	; 0x1000
    1eba:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1ebe:	685b      	ldr	r3, [r3, #4]
    1ec0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    1ec4:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 4;
    1ec6:	68bb      	ldr	r3, [r7, #8]
    1ec8:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1ecc:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    1ece:	68ba      	ldr	r2, [r7, #8]
    1ed0:	f245 237c 	movw	r3, #21116	; 0x527c
    1ed4:	f2c0 0300 	movt	r3, #0
    1ed8:	5c9b      	ldrb	r3, [r3, r2]
    1eda:	617b      	str	r3, [r7, #20]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    1edc:	687b      	ldr	r3, [r7, #4]
    1ede:	681a      	ldr	r2, [r3, #0]
    1ee0:	697b      	ldr	r3, [r7, #20]
    1ee2:	fa22 f203 	lsr.w	r2, r2, r3
    1ee6:	687b      	ldr	r3, [r7, #4]
    1ee8:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    1eea:	f241 0300 	movw	r3, #4096	; 0x1000
    1eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1ef2:	685b      	ldr	r3, [r3, #4]
    1ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    1ef8:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 8;
    1efa:	68bb      	ldr	r3, [r7, #8]
    1efc:	ea4f 2313 	mov.w	r3, r3, lsr #8
    1f00:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    1f02:	68ba      	ldr	r2, [r7, #8]
    1f04:	f245 237c 	movw	r3, #21116	; 0x527c
    1f08:	f2c0 0300 	movt	r3, #0
    1f0c:	5c9b      	ldrb	r3, [r3, r2]
    1f0e:	617b      	str	r3, [r7, #20]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    1f10:	687b      	ldr	r3, [r7, #4]
    1f12:	685a      	ldr	r2, [r3, #4]
    1f14:	697b      	ldr	r3, [r7, #20]
    1f16:	fa22 f203 	lsr.w	r2, r2, r3
    1f1a:	687b      	ldr	r3, [r7, #4]
    1f1c:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    1f1e:	f241 0300 	movw	r3, #4096	; 0x1000
    1f22:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1f26:	685b      	ldr	r3, [r3, #4]
    1f28:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    1f2c:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 11;
    1f2e:	68bb      	ldr	r3, [r7, #8]
    1f30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    1f34:	60bb      	str	r3, [r7, #8]
  presc = APBAHBPrescTable[tmp];
    1f36:	68ba      	ldr	r2, [r7, #8]
    1f38:	f245 237c 	movw	r3, #21116	; 0x527c
    1f3c:	f2c0 0300 	movt	r3, #0
    1f40:	5c9b      	ldrb	r3, [r3, r2]
    1f42:	617b      	str	r3, [r7, #20]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    1f44:	687b      	ldr	r3, [r7, #4]
    1f46:	685a      	ldr	r2, [r3, #4]
    1f48:	697b      	ldr	r3, [r7, #20]
    1f4a:	fa22 f203 	lsr.w	r2, r2, r3
    1f4e:	687b      	ldr	r3, [r7, #4]
    1f50:	60da      	str	r2, [r3, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    1f52:	f241 0300 	movw	r3, #4096	; 0x1000
    1f56:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1f5a:	685b      	ldr	r3, [r3, #4]
    1f5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    1f60:	60bb      	str	r3, [r7, #8]
  tmp = tmp >> 14;
    1f62:	68bb      	ldr	r3, [r7, #8]
    1f64:	ea4f 3393 	mov.w	r3, r3, lsr #14
    1f68:	60bb      	str	r3, [r7, #8]
  presc = ADCPrescTable[tmp];
    1f6a:	68ba      	ldr	r2, [r7, #8]
    1f6c:	f245 238c 	movw	r3, #21132	; 0x528c
    1f70:	f2c0 0300 	movt	r3, #0
    1f74:	5c9b      	ldrb	r3, [r3, r2]
    1f76:	617b      	str	r3, [r7, #20]

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    1f78:	687b      	ldr	r3, [r7, #4]
    1f7a:	68da      	ldr	r2, [r3, #12]
    1f7c:	697b      	ldr	r3, [r7, #20]
    1f7e:	fbb2 f2f3 	udiv	r2, r2, r3
    1f82:	687b      	ldr	r3, [r7, #4]
    1f84:	611a      	str	r2, [r3, #16]
}
    1f86:	f107 071c 	add.w	r7, r7, #28
    1f8a:	46bd      	mov	sp, r7
    1f8c:	bc80      	pop	{r7}
    1f8e:	4770      	bx	lr

00001f90 <RCC_AHBPeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_AHBPeriphClockCmd(u32 RCC_AHBPeriph, FunctionalState NewState)
{
    1f90:	b480      	push	{r7}
    1f92:	b083      	sub	sp, #12
    1f94:	af00      	add	r7, sp, #0
    1f96:	6078      	str	r0, [r7, #4]
    1f98:	460b      	mov	r3, r1
    1f9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1f9c:	78fb      	ldrb	r3, [r7, #3]
    1f9e:	2b00      	cmp	r3, #0
    1fa0:	d00d      	beq.n	1fbe <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    1fa2:	f241 0300 	movw	r3, #4096	; 0x1000
    1fa6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1faa:	f241 0200 	movw	r2, #4096	; 0x1000
    1fae:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1fb2:	6951      	ldr	r1, [r2, #20]
    1fb4:	687a      	ldr	r2, [r7, #4]
    1fb6:	ea41 0202 	orr.w	r2, r1, r2
    1fba:	615a      	str	r2, [r3, #20]
    1fbc:	e00e      	b.n	1fdc <RCC_AHBPeriphClockCmd+0x4c>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    1fbe:	f241 0300 	movw	r3, #4096	; 0x1000
    1fc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1fc6:	f241 0200 	movw	r2, #4096	; 0x1000
    1fca:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1fce:	6951      	ldr	r1, [r2, #20]
    1fd0:	687a      	ldr	r2, [r7, #4]
    1fd2:	ea6f 0202 	mvn.w	r2, r2
    1fd6:	ea01 0202 	and.w	r2, r1, r2
    1fda:	615a      	str	r2, [r3, #20]
  }
}
    1fdc:	f107 070c 	add.w	r7, r7, #12
    1fe0:	46bd      	mov	sp, r7
    1fe2:	bc80      	pop	{r7}
    1fe4:	4770      	bx	lr
    1fe6:	bf00      	nop

00001fe8 <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
    1fe8:	b480      	push	{r7}
    1fea:	b083      	sub	sp, #12
    1fec:	af00      	add	r7, sp, #0
    1fee:	6078      	str	r0, [r7, #4]
    1ff0:	460b      	mov	r3, r1
    1ff2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1ff4:	78fb      	ldrb	r3, [r7, #3]
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d00d      	beq.n	2016 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    1ffa:	f241 0300 	movw	r3, #4096	; 0x1000
    1ffe:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2002:	f241 0200 	movw	r2, #4096	; 0x1000
    2006:	f2c4 0202 	movt	r2, #16386	; 0x4002
    200a:	6991      	ldr	r1, [r2, #24]
    200c:	687a      	ldr	r2, [r7, #4]
    200e:	ea41 0202 	orr.w	r2, r1, r2
    2012:	619a      	str	r2, [r3, #24]
    2014:	e00e      	b.n	2034 <RCC_APB2PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    2016:	f241 0300 	movw	r3, #4096	; 0x1000
    201a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    201e:	f241 0200 	movw	r2, #4096	; 0x1000
    2022:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2026:	6991      	ldr	r1, [r2, #24]
    2028:	687a      	ldr	r2, [r7, #4]
    202a:	ea6f 0202 	mvn.w	r2, r2
    202e:	ea01 0202 	and.w	r2, r1, r2
    2032:	619a      	str	r2, [r3, #24]
  }
}
    2034:	f107 070c 	add.w	r7, r7, #12
    2038:	46bd      	mov	sp, r7
    203a:	bc80      	pop	{r7}
    203c:	4770      	bx	lr
    203e:	bf00      	nop

00002040 <RCC_APB1PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphClockCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
    2040:	b480      	push	{r7}
    2042:	b083      	sub	sp, #12
    2044:	af00      	add	r7, sp, #0
    2046:	6078      	str	r0, [r7, #4]
    2048:	460b      	mov	r3, r1
    204a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    204c:	78fb      	ldrb	r3, [r7, #3]
    204e:	2b00      	cmp	r3, #0
    2050:	d00d      	beq.n	206e <RCC_APB1PeriphClockCmd+0x2e>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    2052:	f241 0300 	movw	r3, #4096	; 0x1000
    2056:	f2c4 0302 	movt	r3, #16386	; 0x4002
    205a:	f241 0200 	movw	r2, #4096	; 0x1000
    205e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2062:	69d1      	ldr	r1, [r2, #28]
    2064:	687a      	ldr	r2, [r7, #4]
    2066:	ea41 0202 	orr.w	r2, r1, r2
    206a:	61da      	str	r2, [r3, #28]
    206c:	e00e      	b.n	208c <RCC_APB1PeriphClockCmd+0x4c>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    206e:	f241 0300 	movw	r3, #4096	; 0x1000
    2072:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2076:	f241 0200 	movw	r2, #4096	; 0x1000
    207a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    207e:	69d1      	ldr	r1, [r2, #28]
    2080:	687a      	ldr	r2, [r7, #4]
    2082:	ea6f 0202 	mvn.w	r2, r2
    2086:	ea01 0202 	and.w	r2, r1, r2
    208a:	61da      	str	r2, [r3, #28]
  }
}
    208c:	f107 070c 	add.w	r7, r7, #12
    2090:	46bd      	mov	sp, r7
    2092:	bc80      	pop	{r7}
    2094:	4770      	bx	lr
    2096:	bf00      	nop

00002098 <RCC_APB2PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphResetCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
    2098:	b480      	push	{r7}
    209a:	b083      	sub	sp, #12
    209c:	af00      	add	r7, sp, #0
    209e:	6078      	str	r0, [r7, #4]
    20a0:	460b      	mov	r3, r1
    20a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    20a4:	78fb      	ldrb	r3, [r7, #3]
    20a6:	2b00      	cmp	r3, #0
    20a8:	d00d      	beq.n	20c6 <RCC_APB2PeriphResetCmd+0x2e>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    20aa:	f241 0300 	movw	r3, #4096	; 0x1000
    20ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
    20b2:	f241 0200 	movw	r2, #4096	; 0x1000
    20b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
    20ba:	68d1      	ldr	r1, [r2, #12]
    20bc:	687a      	ldr	r2, [r7, #4]
    20be:	ea41 0202 	orr.w	r2, r1, r2
    20c2:	60da      	str	r2, [r3, #12]
    20c4:	e00e      	b.n	20e4 <RCC_APB2PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    20c6:	f241 0300 	movw	r3, #4096	; 0x1000
    20ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
    20ce:	f241 0200 	movw	r2, #4096	; 0x1000
    20d2:	f2c4 0202 	movt	r2, #16386	; 0x4002
    20d6:	68d1      	ldr	r1, [r2, #12]
    20d8:	687a      	ldr	r2, [r7, #4]
    20da:	ea6f 0202 	mvn.w	r2, r2
    20de:	ea01 0202 	and.w	r2, r1, r2
    20e2:	60da      	str	r2, [r3, #12]
  }
}
    20e4:	f107 070c 	add.w	r7, r7, #12
    20e8:	46bd      	mov	sp, r7
    20ea:	bc80      	pop	{r7}
    20ec:	4770      	bx	lr
    20ee:	bf00      	nop

000020f0 <RCC_APB1PeriphResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB1PeriphResetCmd(u32 RCC_APB1Periph, FunctionalState NewState)
{
    20f0:	b480      	push	{r7}
    20f2:	b083      	sub	sp, #12
    20f4:	af00      	add	r7, sp, #0
    20f6:	6078      	str	r0, [r7, #4]
    20f8:	460b      	mov	r3, r1
    20fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    20fc:	78fb      	ldrb	r3, [r7, #3]
    20fe:	2b00      	cmp	r3, #0
    2100:	d00d      	beq.n	211e <RCC_APB1PeriphResetCmd+0x2e>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    2102:	f241 0300 	movw	r3, #4096	; 0x1000
    2106:	f2c4 0302 	movt	r3, #16386	; 0x4002
    210a:	f241 0200 	movw	r2, #4096	; 0x1000
    210e:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2112:	6911      	ldr	r1, [r2, #16]
    2114:	687a      	ldr	r2, [r7, #4]
    2116:	ea41 0202 	orr.w	r2, r1, r2
    211a:	611a      	str	r2, [r3, #16]
    211c:	e00e      	b.n	213c <RCC_APB1PeriphResetCmd+0x4c>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    211e:	f241 0300 	movw	r3, #4096	; 0x1000
    2122:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2126:	f241 0200 	movw	r2, #4096	; 0x1000
    212a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    212e:	6911      	ldr	r1, [r2, #16]
    2130:	687a      	ldr	r2, [r7, #4]
    2132:	ea6f 0202 	mvn.w	r2, r2
    2136:	ea01 0202 	and.w	r2, r1, r2
    213a:	611a      	str	r2, [r3, #16]
  }
}
    213c:	f107 070c 	add.w	r7, r7, #12
    2140:	46bd      	mov	sp, r7
    2142:	bc80      	pop	{r7}
    2144:	4770      	bx	lr
    2146:	bf00      	nop

00002148 <RCC_BackupResetCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_BackupResetCmd(FunctionalState NewState)
{
    2148:	b480      	push	{r7}
    214a:	b083      	sub	sp, #12
    214c:	af00      	add	r7, sp, #0
    214e:	4603      	mov	r3, r0
    2150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) BDCR_BDRST_BB = (u32)NewState;
    2152:	f240 4340 	movw	r3, #1088	; 0x440
    2156:	f2c4 2342 	movt	r3, #16962	; 0x4242
    215a:	79fa      	ldrb	r2, [r7, #7]
    215c:	601a      	str	r2, [r3, #0]
}
    215e:	f107 070c 	add.w	r7, r7, #12
    2162:	46bd      	mov	sp, r7
    2164:	bc80      	pop	{r7}
    2166:	4770      	bx	lr

00002168 <RCC_ClockSecuritySystemCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    2168:	b480      	push	{r7}
    216a:	b083      	sub	sp, #12
    216c:	af00      	add	r7, sp, #0
    216e:	4603      	mov	r3, r0
    2170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_CSSON_BB = (u32)NewState;
    2172:	f240 034c 	movw	r3, #76	; 0x4c
    2176:	f2c4 2342 	movt	r3, #16962	; 0x4242
    217a:	79fa      	ldrb	r2, [r7, #7]
    217c:	601a      	str	r2, [r3, #0]
}
    217e:	f107 070c 	add.w	r7, r7, #12
    2182:	46bd      	mov	sp, r7
    2184:	bc80      	pop	{r7}
    2186:	4770      	bx	lr

00002188 <RCC_MCOConfig>:
*                       - RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_MCOConfig(u8 RCC_MCO)
{
    2188:	b480      	push	{r7}
    218a:	b083      	sub	sp, #12
    218c:	af00      	add	r7, sp, #0
    218e:	4603      	mov	r3, r0
    2190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO[2:0] bits to select the MCO source */
  *(vu8 *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    2192:	f241 0307 	movw	r3, #4103	; 0x1007
    2196:	f2c4 0302 	movt	r3, #16386	; 0x4002
    219a:	79fa      	ldrb	r2, [r7, #7]
    219c:	701a      	strb	r2, [r3, #0]
}
    219e:	f107 070c 	add.w	r7, r7, #12
    21a2:	46bd      	mov	sp, r7
    21a4:	bc80      	pop	{r7}
    21a6:	4770      	bx	lr

000021a8 <RCC_GetFlagStatus>:
*                       - RCC_FLAG_LPWRRST: Low Power reset
* Output         : None
* Return         : The new state of RCC_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus RCC_GetFlagStatus(u8 RCC_FLAG)
{
    21a8:	b480      	push	{r7}
    21aa:	b087      	sub	sp, #28
    21ac:	af00      	add	r7, sp, #0
    21ae:	4603      	mov	r3, r0
    21b0:	71fb      	strb	r3, [r7, #7]
  u32 tmp = 0;
    21b2:	f04f 0300 	mov.w	r3, #0
    21b6:	60fb      	str	r3, [r7, #12]
  u32 statusreg = 0;
    21b8:	f04f 0300 	mov.w	r3, #0
    21bc:	613b      	str	r3, [r7, #16]
  FlagStatus bitstatus = RESET;
    21be:	f04f 0300 	mov.w	r3, #0
    21c2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    21c4:	79fb      	ldrb	r3, [r7, #7]
    21c6:	ea4f 1353 	mov.w	r3, r3, lsr #5
    21ca:	b2db      	uxtb	r3, r3
    21cc:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
    21ce:	68fb      	ldr	r3, [r7, #12]
    21d0:	2b01      	cmp	r3, #1
    21d2:	d106      	bne.n	21e2 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
    21d4:	f241 0300 	movw	r3, #4096	; 0x1000
    21d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    21dc:	681b      	ldr	r3, [r3, #0]
    21de:	613b      	str	r3, [r7, #16]
    21e0:	e00f      	b.n	2202 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    21e2:	68fb      	ldr	r3, [r7, #12]
    21e4:	2b02      	cmp	r3, #2
    21e6:	d106      	bne.n	21f6 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
    21e8:	f241 0300 	movw	r3, #4096	; 0x1000
    21ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
    21f0:	6a1b      	ldr	r3, [r3, #32]
    21f2:	613b      	str	r3, [r7, #16]
    21f4:	e005      	b.n	2202 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    21f6:	f241 0300 	movw	r3, #4096	; 0x1000
    21fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
    21fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    2200:	613b      	str	r3, [r7, #16]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    2202:	79fb      	ldrb	r3, [r7, #7]
    2204:	f003 031f 	and.w	r3, r3, #31
    2208:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
    220a:	68fb      	ldr	r3, [r7, #12]
    220c:	693a      	ldr	r2, [r7, #16]
    220e:	fa22 f303 	lsr.w	r3, r2, r3
    2212:	f003 0301 	and.w	r3, r3, #1
    2216:	b2db      	uxtb	r3, r3
    2218:	2b00      	cmp	r3, #0
    221a:	d003      	beq.n	2224 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
    221c:	f04f 0301 	mov.w	r3, #1
    2220:	75fb      	strb	r3, [r7, #23]
    2222:	e002      	b.n	222a <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
    2224:	f04f 0300 	mov.w	r3, #0
    2228:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the flag status */
  return bitstatus;
    222a:	7dfb      	ldrb	r3, [r7, #23]
}
    222c:	4618      	mov	r0, r3
    222e:	f107 071c 	add.w	r7, r7, #28
    2232:	46bd      	mov	sp, r7
    2234:	bc80      	pop	{r7}
    2236:	4770      	bx	lr

00002238 <RCC_ClearFlag>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ClearFlag(void)
{
    2238:	b480      	push	{r7}
    223a:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    223c:	f241 0300 	movw	r3, #4096	; 0x1000
    2240:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2244:	f241 0200 	movw	r2, #4096	; 0x1000
    2248:	f2c4 0202 	movt	r2, #16386	; 0x4002
    224c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    224e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    2252:	625a      	str	r2, [r3, #36]	; 0x24
}
    2254:	46bd      	mov	sp, r7
    2256:	bc80      	pop	{r7}
    2258:	4770      	bx	lr
    225a:	bf00      	nop

0000225c <RCC_GetITStatus>:
*                       - RCC_IT_CSS: Clock Security System interrupt
* Output         : None
* Return         : The new state of RCC_IT (SET or RESET).
*******************************************************************************/
ITStatus RCC_GetITStatus(u8 RCC_IT)
{
    225c:	b480      	push	{r7}
    225e:	b085      	sub	sp, #20
    2260:	af00      	add	r7, sp, #0
    2262:	4603      	mov	r3, r0
    2264:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    2266:	f04f 0300 	mov.w	r3, #0
    226a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (u32)RESET)
    226c:	f241 0300 	movw	r3, #4096	; 0x1000
    2270:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2274:	689a      	ldr	r2, [r3, #8]
    2276:	79fb      	ldrb	r3, [r7, #7]
    2278:	ea02 0303 	and.w	r3, r2, r3
    227c:	2b00      	cmp	r3, #0
    227e:	d003      	beq.n	2288 <RCC_GetITStatus+0x2c>
  {
    bitstatus = SET;
    2280:	f04f 0301 	mov.w	r3, #1
    2284:	73fb      	strb	r3, [r7, #15]
    2286:	e002      	b.n	228e <RCC_GetITStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    2288:	f04f 0300 	mov.w	r3, #0
    228c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    228e:	7bfb      	ldrb	r3, [r7, #15]
}
    2290:	4618      	mov	r0, r3
    2292:	f107 0714 	add.w	r7, r7, #20
    2296:	46bd      	mov	sp, r7
    2298:	bc80      	pop	{r7}
    229a:	4770      	bx	lr

0000229c <RCC_ClearITPendingBit>:
*                       - RCC_IT_CSS: Clock Security System interrupt
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ClearITPendingBit(u8 RCC_IT)
{
    229c:	b480      	push	{r7}
    229e:	b083      	sub	sp, #12
    22a0:	af00      	add	r7, sp, #0
    22a2:	4603      	mov	r3, r0
    22a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(vu8 *) CIR_BYTE3_ADDRESS = RCC_IT;
    22a6:	f241 030a 	movw	r3, #4106	; 0x100a
    22aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
    22ae:	79fa      	ldrb	r2, [r7, #7]
    22b0:	701a      	strb	r2, [r3, #0]
}
    22b2:	f107 070c 	add.w	r7, r7, #12
    22b6:	46bd      	mov	sp, r7
    22b8:	bc80      	pop	{r7}
    22ba:	4770      	bx	lr

000022bc <FLASH_SetLatency>:
*                       - FLASH_Latency_2: FLASH Two Latency cycles
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_SetLatency(u32 FLASH_Latency)
{
    22bc:	b480      	push	{r7}
    22be:	b083      	sub	sp, #12
    22c0:	af00      	add	r7, sp, #0
    22c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
    22c4:	f242 0300 	movw	r3, #8192	; 0x2000
    22c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    22cc:	f242 0200 	movw	r2, #8192	; 0x2000
    22d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
    22d4:	6812      	ldr	r2, [r2, #0]
    22d6:	f002 0238 	and.w	r2, r2, #56	; 0x38
    22da:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_Latency;
    22dc:	f242 0300 	movw	r3, #8192	; 0x2000
    22e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    22e4:	f242 0200 	movw	r2, #8192	; 0x2000
    22e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
    22ec:	6811      	ldr	r1, [r2, #0]
    22ee:	687a      	ldr	r2, [r7, #4]
    22f0:	ea41 0202 	orr.w	r2, r1, r2
    22f4:	601a      	str	r2, [r3, #0]
}
    22f6:	f107 070c 	add.w	r7, r7, #12
    22fa:	46bd      	mov	sp, r7
    22fc:	bc80      	pop	{r7}
    22fe:	4770      	bx	lr

00002300 <FLASH_HalfCycleAccessCmd>:
*                       - FLASH_HalfCycleAccess_Disable: FLASH Half Cycle Disable
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_HalfCycleAccessCmd(u32 FLASH_HalfCycleAccess)
{
    2300:	b480      	push	{r7}
    2302:	b083      	sub	sp, #12
    2304:	af00      	add	r7, sp, #0
    2306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
  
  /* Enable or disable the Half cycle access */
  FLASH->ACR &= ACR_HLFCYA_Mask;
    2308:	f242 0300 	movw	r3, #8192	; 0x2000
    230c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2310:	f242 0200 	movw	r2, #8192	; 0x2000
    2314:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2318:	6812      	ldr	r2, [r2, #0]
    231a:	f022 0208 	bic.w	r2, r2, #8
    231e:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_HalfCycleAccess;
    2320:	f242 0300 	movw	r3, #8192	; 0x2000
    2324:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2328:	f242 0200 	movw	r2, #8192	; 0x2000
    232c:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2330:	6811      	ldr	r1, [r2, #0]
    2332:	687a      	ldr	r2, [r7, #4]
    2334:	ea41 0202 	orr.w	r2, r1, r2
    2338:	601a      	str	r2, [r3, #0]
}
    233a:	f107 070c 	add.w	r7, r7, #12
    233e:	46bd      	mov	sp, r7
    2340:	bc80      	pop	{r7}
    2342:	4770      	bx	lr

00002344 <FLASH_PrefetchBufferCmd>:
*                       - FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_PrefetchBufferCmd(u32 FLASH_PrefetchBuffer)
{
    2344:	b480      	push	{r7}
    2346:	b083      	sub	sp, #12
    2348:	af00      	add	r7, sp, #0
    234a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
    234c:	f242 0300 	movw	r3, #8192	; 0x2000
    2350:	f2c4 0302 	movt	r3, #16386	; 0x4002
    2354:	f242 0200 	movw	r2, #8192	; 0x2000
    2358:	f2c4 0202 	movt	r2, #16386	; 0x4002
    235c:	6812      	ldr	r2, [r2, #0]
    235e:	f022 0210 	bic.w	r2, r2, #16
    2362:	601a      	str	r2, [r3, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
    2364:	f242 0300 	movw	r3, #8192	; 0x2000
    2368:	f2c4 0302 	movt	r3, #16386	; 0x4002
    236c:	f242 0200 	movw	r2, #8192	; 0x2000
    2370:	f2c4 0202 	movt	r2, #16386	; 0x4002
    2374:	6811      	ldr	r1, [r2, #0]
    2376:	687a      	ldr	r2, [r7, #4]
    2378:	ea41 0202 	orr.w	r2, r1, r2
    237c:	601a      	str	r2, [r3, #0]
}
    237e:	f107 070c 	add.w	r7, r7, #12
    2382:	46bd      	mov	sp, r7
    2384:	bc80      	pop	{r7}
    2386:	4770      	bx	lr

00002388 <SysTick_CLKSourceConfig>:
*                         SysTick clock source.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_CLKSourceConfig(u32 SysTick_CLKSource)
{
    2388:	b480      	push	{r7}
    238a:	b083      	sub	sp, #12
    238c:	af00      	add	r7, sp, #0
    238e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));

  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    2390:	687b      	ldr	r3, [r7, #4]
    2392:	2b04      	cmp	r3, #4
    2394:	d10c      	bne.n	23b0 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    2396:	f24e 0310 	movw	r3, #57360	; 0xe010
    239a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    239e:	f24e 0210 	movw	r2, #57360	; 0xe010
    23a2:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23a6:	6812      	ldr	r2, [r2, #0]
    23a8:	f042 0204 	orr.w	r2, r2, #4
    23ac:	601a      	str	r2, [r3, #0]
    23ae:	e00b      	b.n	23c8 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    23b0:	f24e 0310 	movw	r3, #57360	; 0xe010
    23b4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23b8:	f24e 0210 	movw	r2, #57360	; 0xe010
    23bc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    23c0:	6812      	ldr	r2, [r2, #0]
    23c2:	f022 0204 	bic.w	r2, r2, #4
    23c6:	601a      	str	r2, [r3, #0]
  }
}
    23c8:	f107 070c 	add.w	r7, r7, #12
    23cc:	46bd      	mov	sp, r7
    23ce:	bc80      	pop	{r7}
    23d0:	4770      	bx	lr
    23d2:	bf00      	nop

000023d4 <SysTick_SetReload>:
*                    This parameter must be a number between 1 and 0xFFFFFF.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_SetReload(u32 Reload)
{
    23d4:	b480      	push	{r7}
    23d6:	b083      	sub	sp, #12
    23d8:	af00      	add	r7, sp, #0
    23da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_RELOAD(Reload));

  SysTick->LOAD = Reload;
    23dc:	f24e 0310 	movw	r3, #57360	; 0xe010
    23e0:	f2ce 0300 	movt	r3, #57344	; 0xe000
    23e4:	687a      	ldr	r2, [r7, #4]
    23e6:	605a      	str	r2, [r3, #4]
}
    23e8:	f107 070c 	add.w	r7, r7, #12
    23ec:	46bd      	mov	sp, r7
    23ee:	bc80      	pop	{r7}
    23f0:	4770      	bx	lr
    23f2:	bf00      	nop

000023f4 <SysTick_CounterCmd>:
*                       - SysTick_Counter_Clear: Clear counter value to 0
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_CounterCmd(u32 SysTick_Counter)
{
    23f4:	b480      	push	{r7}
    23f6:	b083      	sub	sp, #12
    23f8:	af00      	add	r7, sp, #0
    23fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_COUNTER(SysTick_Counter));

  if (SysTick_Counter == SysTick_Counter_Enable)
    23fc:	687b      	ldr	r3, [r7, #4]
    23fe:	2b01      	cmp	r3, #1
    2400:	d10c      	bne.n	241c <SysTick_CounterCmd+0x28>
  {
    SysTick->CTRL |= SysTick_Counter_Enable;
    2402:	f24e 0310 	movw	r3, #57360	; 0xe010
    2406:	f2ce 0300 	movt	r3, #57344	; 0xe000
    240a:	f24e 0210 	movw	r2, #57360	; 0xe010
    240e:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2412:	6812      	ldr	r2, [r2, #0]
    2414:	f042 0201 	orr.w	r2, r2, #1
    2418:	601a      	str	r2, [r3, #0]
    241a:	e017      	b.n	244c <SysTick_CounterCmd+0x58>
  }
  else if (SysTick_Counter == SysTick_Counter_Disable) 
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	f113 0f02 	cmn.w	r3, #2
    2422:	d10c      	bne.n	243e <SysTick_CounterCmd+0x4a>
  {
    SysTick->CTRL &= SysTick_Counter_Disable;
    2424:	f24e 0310 	movw	r3, #57360	; 0xe010
    2428:	f2ce 0300 	movt	r3, #57344	; 0xe000
    242c:	f24e 0210 	movw	r2, #57360	; 0xe010
    2430:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2434:	6812      	ldr	r2, [r2, #0]
    2436:	f022 0201 	bic.w	r2, r2, #1
    243a:	601a      	str	r2, [r3, #0]
    243c:	e006      	b.n	244c <SysTick_CounterCmd+0x58>
  }
  else /* SysTick_Counter == SysTick_Counter_Clear */
  {
    SysTick->VAL = SysTick_Counter_Clear;
    243e:	f24e 0310 	movw	r3, #57360	; 0xe010
    2442:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2446:	f04f 0200 	mov.w	r2, #0
    244a:	609a      	str	r2, [r3, #8]
  }    
}
    244c:	f107 070c 	add.w	r7, r7, #12
    2450:	46bd      	mov	sp, r7
    2452:	bc80      	pop	{r7}
    2454:	4770      	bx	lr
    2456:	bf00      	nop

00002458 <SysTick_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void SysTick_ITConfig(FunctionalState NewState)
{
    2458:	b480      	push	{r7}
    245a:	b083      	sub	sp, #12
    245c:	af00      	add	r7, sp, #0
    245e:	4603      	mov	r3, r0
    2460:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    2462:	79fb      	ldrb	r3, [r7, #7]
    2464:	2b00      	cmp	r3, #0
    2466:	d00c      	beq.n	2482 <SysTick_ITConfig+0x2a>
  {
    SysTick->CTRL |= CTRL_TICKINT_Set;
    2468:	f24e 0310 	movw	r3, #57360	; 0xe010
    246c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    2470:	f24e 0210 	movw	r2, #57360	; 0xe010
    2474:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2478:	6812      	ldr	r2, [r2, #0]
    247a:	f042 0202 	orr.w	r2, r2, #2
    247e:	601a      	str	r2, [r3, #0]
    2480:	e00b      	b.n	249a <SysTick_ITConfig+0x42>
  }
  else
  {
    SysTick->CTRL &= CTRL_TICKINT_Reset;
    2482:	f24e 0310 	movw	r3, #57360	; 0xe010
    2486:	f2ce 0300 	movt	r3, #57344	; 0xe000
    248a:	f24e 0210 	movw	r2, #57360	; 0xe010
    248e:	f2ce 0200 	movt	r2, #57344	; 0xe000
    2492:	6812      	ldr	r2, [r2, #0]
    2494:	f022 0202 	bic.w	r2, r2, #2
    2498:	601a      	str	r2, [r3, #0]
  }
}
    249a:	f107 070c 	add.w	r7, r7, #12
    249e:	46bd      	mov	sp, r7
    24a0:	bc80      	pop	{r7}
    24a2:	4770      	bx	lr

000024a4 <SysTick_GetCounter>:
* Input          : None
* Output         : None
* Return         : SysTick current value
*******************************************************************************/
u32 SysTick_GetCounter(void)
{
    24a4:	b480      	push	{r7}
    24a6:	af00      	add	r7, sp, #0
  return(SysTick->VAL);
    24a8:	f24e 0310 	movw	r3, #57360	; 0xe010
    24ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
    24b0:	689b      	ldr	r3, [r3, #8]
}
    24b2:	4618      	mov	r0, r3
    24b4:	46bd      	mov	sp, r7
    24b6:	bc80      	pop	{r7}
    24b8:	4770      	bx	lr
    24ba:	bf00      	nop

000024bc <SysTick_GetFlagStatus>:
*                       - SysTick_FLAG_NOREF
* Output         : None
* Return         : None
*******************************************************************************/
FlagStatus SysTick_GetFlagStatus(u8 SysTick_FLAG)
{
    24bc:	b480      	push	{r7}
    24be:	b087      	sub	sp, #28
    24c0:	af00      	add	r7, sp, #0
    24c2:	4603      	mov	r3, r0
    24c4:	71fb      	strb	r3, [r7, #7]
  u32 statusreg = 0, tmp = 0 ;
    24c6:	f04f 0300 	mov.w	r3, #0
    24ca:	60fb      	str	r3, [r7, #12]
    24cc:	f04f 0300 	mov.w	r3, #0
    24d0:	613b      	str	r3, [r7, #16]
  FlagStatus bitstatus = RESET;
    24d2:	f04f 0300 	mov.w	r3, #0
    24d6:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SYSTICK_FLAG(SysTick_FLAG));

  /* Get the SysTick register index */
  tmp = SysTick_FLAG >> 3;
    24d8:	79fb      	ldrb	r3, [r7, #7]
    24da:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    24de:	b2db      	uxtb	r3, r3
    24e0:	613b      	str	r3, [r7, #16]

  if (tmp == 2) /* The flag to check is in CTRL register */
    24e2:	693b      	ldr	r3, [r7, #16]
    24e4:	2b02      	cmp	r3, #2
    24e6:	d106      	bne.n	24f6 <SysTick_GetFlagStatus+0x3a>
  {
    statusreg = SysTick->CTRL;
    24e8:	f24e 0310 	movw	r3, #57360	; 0xe010
    24ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
    24f0:	681b      	ldr	r3, [r3, #0]
    24f2:	60fb      	str	r3, [r7, #12]
    24f4:	e005      	b.n	2502 <SysTick_GetFlagStatus+0x46>
  }
  else          /* The flag to check is in CALIB register */
  {
    statusreg = SysTick->CALIB;
    24f6:	f24e 0310 	movw	r3, #57360	; 0xe010
    24fa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    24fe:	68db      	ldr	r3, [r3, #12]
    2500:	60fb      	str	r3, [r7, #12]
  }

  if ((statusreg & ((u32)1 << SysTick_FLAG)) != (u32)RESET)
    2502:	79fb      	ldrb	r3, [r7, #7]
    2504:	68fa      	ldr	r2, [r7, #12]
    2506:	fa22 f303 	lsr.w	r3, r2, r3
    250a:	f003 0301 	and.w	r3, r3, #1
    250e:	b2db      	uxtb	r3, r3
    2510:	2b00      	cmp	r3, #0
    2512:	d003      	beq.n	251c <SysTick_GetFlagStatus+0x60>
  {
    bitstatus = SET;
    2514:	f04f 0301 	mov.w	r3, #1
    2518:	75fb      	strb	r3, [r7, #23]
    251a:	e002      	b.n	2522 <SysTick_GetFlagStatus+0x66>
  }
  else
  {
    bitstatus = RESET;
    251c:	f04f 0300 	mov.w	r3, #0
    2520:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
    2522:	7dfb      	ldrb	r3, [r7, #23]
}
    2524:	4618      	mov	r0, r3
    2526:	f107 071c 	add.w	r7, r7, #28
    252a:	46bd      	mov	sp, r7
    252c:	bc80      	pop	{r7}
    252e:	4770      	bx	lr

00002530 <GPIO_DeInit>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    2530:	b580      	push	{r7, lr}
    2532:	b082      	sub	sp, #8
    2534:	af00      	add	r7, sp, #0
    2536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  switch (*(u32*)&GPIOx)
    2538:	f107 0304 	add.w	r3, r7, #4
    253c:	681b      	ldr	r3, [r3, #0]
    253e:	f241 4200 	movw	r2, #5120	; 0x1400
    2542:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2546:	4293      	cmp	r3, r2
    2548:	d052      	beq.n	25f0 <GPIO_DeInit+0xc0>
    254a:	f241 4200 	movw	r2, #5120	; 0x1400
    254e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2552:	4293      	cmp	r3, r2
    2554:	d812      	bhi.n	257c <GPIO_DeInit+0x4c>
    2556:	f640 4200 	movw	r2, #3072	; 0xc00
    255a:	f2c4 0201 	movt	r2, #16385	; 0x4001
    255e:	4293      	cmp	r3, r2
    2560:	d02c      	beq.n	25bc <GPIO_DeInit+0x8c>
    2562:	f241 0200 	movw	r2, #4096	; 0x1000
    2566:	f2c4 0201 	movt	r2, #16385	; 0x4001
    256a:	4293      	cmp	r3, r2
    256c:	d033      	beq.n	25d6 <GPIO_DeInit+0xa6>
    256e:	f640 0200 	movw	r2, #2048	; 0x800
    2572:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2576:	4293      	cmp	r3, r2
    2578:	d013      	beq.n	25a2 <GPIO_DeInit+0x72>
    257a:	e06c      	b.n	2656 <GPIO_DeInit+0x126>
    257c:	f641 4200 	movw	r2, #7168	; 0x1c00
    2580:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2584:	4293      	cmp	r3, r2
    2586:	d04d      	beq.n	2624 <GPIO_DeInit+0xf4>
    2588:	f242 0200 	movw	r2, #8192	; 0x2000
    258c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2590:	4293      	cmp	r3, r2
    2592:	d054      	beq.n	263e <GPIO_DeInit+0x10e>
    2594:	f641 0200 	movw	r2, #6144	; 0x1800
    2598:	f2c4 0201 	movt	r2, #16385	; 0x4001
    259c:	4293      	cmp	r3, r2
    259e:	d034      	beq.n	260a <GPIO_DeInit+0xda>
    25a0:	e059      	b.n	2656 <GPIO_DeInit+0x126>
  {
    case GPIOA_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    25a2:	f04f 0004 	mov.w	r0, #4
    25a6:	f04f 0101 	mov.w	r1, #1
    25aa:	f7ff fd75 	bl	2098 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    25ae:	f04f 0004 	mov.w	r0, #4
    25b2:	f04f 0100 	mov.w	r1, #0
    25b6:	f7ff fd6f 	bl	2098 <RCC_APB2PeriphResetCmd>
      break;
    25ba:	e04c      	b.n	2656 <GPIO_DeInit+0x126>

    case GPIOB_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    25bc:	f04f 0008 	mov.w	r0, #8
    25c0:	f04f 0101 	mov.w	r1, #1
    25c4:	f7ff fd68 	bl	2098 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    25c8:	f04f 0008 	mov.w	r0, #8
    25cc:	f04f 0100 	mov.w	r1, #0
    25d0:	f7ff fd62 	bl	2098 <RCC_APB2PeriphResetCmd>
      break;
    25d4:	e03f      	b.n	2656 <GPIO_DeInit+0x126>

    case GPIOC_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    25d6:	f04f 0010 	mov.w	r0, #16
    25da:	f04f 0101 	mov.w	r1, #1
    25de:	f7ff fd5b 	bl	2098 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    25e2:	f04f 0010 	mov.w	r0, #16
    25e6:	f04f 0100 	mov.w	r1, #0
    25ea:	f7ff fd55 	bl	2098 <RCC_APB2PeriphResetCmd>
      break;
    25ee:	e032      	b.n	2656 <GPIO_DeInit+0x126>

    case GPIOD_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    25f0:	f04f 0020 	mov.w	r0, #32
    25f4:	f04f 0101 	mov.w	r1, #1
    25f8:	f7ff fd4e 	bl	2098 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    25fc:	f04f 0020 	mov.w	r0, #32
    2600:	f04f 0100 	mov.w	r1, #0
    2604:	f7ff fd48 	bl	2098 <RCC_APB2PeriphResetCmd>
      break;
    2608:	e025      	b.n	2656 <GPIO_DeInit+0x126>
      
    case GPIOE_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    260a:	f04f 0040 	mov.w	r0, #64	; 0x40
    260e:	f04f 0101 	mov.w	r1, #1
    2612:	f7ff fd41 	bl	2098 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    2616:	f04f 0040 	mov.w	r0, #64	; 0x40
    261a:	f04f 0100 	mov.w	r1, #0
    261e:	f7ff fd3b 	bl	2098 <RCC_APB2PeriphResetCmd>
      break; 
    2622:	e018      	b.n	2656 <GPIO_DeInit+0x126>

    case GPIOF_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    2624:	f04f 0080 	mov.w	r0, #128	; 0x80
    2628:	f04f 0101 	mov.w	r1, #1
    262c:	f7ff fd34 	bl	2098 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    2630:	f04f 0080 	mov.w	r0, #128	; 0x80
    2634:	f04f 0100 	mov.w	r1, #0
    2638:	f7ff fd2e 	bl	2098 <RCC_APB2PeriphResetCmd>
      break;
    263c:	e00b      	b.n	2656 <GPIO_DeInit+0x126>

    case GPIOG_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    263e:	f44f 7080 	mov.w	r0, #256	; 0x100
    2642:	f04f 0101 	mov.w	r1, #1
    2646:	f7ff fd27 	bl	2098 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    264a:	f44f 7080 	mov.w	r0, #256	; 0x100
    264e:	f04f 0100 	mov.w	r1, #0
    2652:	f7ff fd21 	bl	2098 <RCC_APB2PeriphResetCmd>
      break;                       

    default:
      break;
  }
}
    2656:	f107 0708 	add.w	r7, r7, #8
    265a:	46bd      	mov	sp, r7
    265c:	bd80      	pop	{r7, pc}
    265e:	bf00      	nop

00002660 <GPIO_AFIODeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_AFIODeInit(void)
{
    2660:	b580      	push	{r7, lr}
    2662:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    2664:	f04f 0001 	mov.w	r0, #1
    2668:	f04f 0101 	mov.w	r1, #1
    266c:	f7ff fd14 	bl	2098 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    2670:	f04f 0001 	mov.w	r0, #1
    2674:	f04f 0100 	mov.w	r1, #0
    2678:	f7ff fd0e 	bl	2098 <RCC_APB2PeriphResetCmd>
}
    267c:	46bd      	mov	sp, r7
    267e:	bd80      	pop	{r7, pc}

00002680 <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    2680:	b480      	push	{r7}
    2682:	b089      	sub	sp, #36	; 0x24
    2684:	af00      	add	r7, sp, #0
    2686:	6078      	str	r0, [r7, #4]
    2688:	6039      	str	r1, [r7, #0]
  u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    268a:	f04f 0300 	mov.w	r3, #0
    268e:	60bb      	str	r3, [r7, #8]
    2690:	f04f 0300 	mov.w	r3, #0
    2694:	60fb      	str	r3, [r7, #12]
    2696:	f04f 0300 	mov.w	r3, #0
    269a:	613b      	str	r3, [r7, #16]
    269c:	f04f 0300 	mov.w	r3, #0
    26a0:	617b      	str	r3, [r7, #20]
  u32 tmpreg = 0x00, pinmask = 0x00;
    26a2:	f04f 0300 	mov.w	r3, #0
    26a6:	61bb      	str	r3, [r7, #24]
    26a8:	f04f 0300 	mov.w	r3, #0
    26ac:	61fb      	str	r3, [r7, #28]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
    26ae:	683b      	ldr	r3, [r7, #0]
    26b0:	78db      	ldrb	r3, [r3, #3]
    26b2:	f003 030f 	and.w	r3, r3, #15
    26b6:	60bb      	str	r3, [r7, #8]

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
    26b8:	683b      	ldr	r3, [r7, #0]
    26ba:	78db      	ldrb	r3, [r3, #3]
    26bc:	f003 0310 	and.w	r3, r3, #16
    26c0:	2b00      	cmp	r3, #0
    26c2:	d005      	beq.n	26d0 <GPIO_Init+0x50>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
    26c4:	683b      	ldr	r3, [r7, #0]
    26c6:	789b      	ldrb	r3, [r3, #2]
    26c8:	68ba      	ldr	r2, [r7, #8]
    26ca:	ea42 0303 	orr.w	r3, r2, r3
    26ce:	60bb      	str	r3, [r7, #8]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
    26d0:	683b      	ldr	r3, [r7, #0]
    26d2:	881b      	ldrh	r3, [r3, #0]
    26d4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    26d8:	2b00      	cmp	r3, #0
    26da:	d051      	beq.n	2780 <GPIO_Init+0x100>
  {
    tmpreg = GPIOx->CRL;
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	681b      	ldr	r3, [r3, #0]
    26e0:	61bb      	str	r3, [r7, #24]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    26e2:	f04f 0300 	mov.w	r3, #0
    26e6:	613b      	str	r3, [r7, #16]
    26e8:	e044      	b.n	2774 <GPIO_Init+0xf4>
    {
      pos = ((u32)0x01) << pinpos;
    26ea:	693b      	ldr	r3, [r7, #16]
    26ec:	f04f 0201 	mov.w	r2, #1
    26f0:	fa02 f303 	lsl.w	r3, r2, r3
    26f4:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    26f6:	683b      	ldr	r3, [r7, #0]
    26f8:	881b      	ldrh	r3, [r3, #0]
    26fa:	461a      	mov	r2, r3
    26fc:	697b      	ldr	r3, [r7, #20]
    26fe:	ea02 0303 	and.w	r3, r2, r3
    2702:	60fb      	str	r3, [r7, #12]

      if (currentpin == pos)
    2704:	68fa      	ldr	r2, [r7, #12]
    2706:	697b      	ldr	r3, [r7, #20]
    2708:	429a      	cmp	r2, r3
    270a:	d12f      	bne.n	276c <GPIO_Init+0xec>
      {
        pos = pinpos << 2;
    270c:	693b      	ldr	r3, [r7, #16]
    270e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2712:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
    2714:	697b      	ldr	r3, [r7, #20]
    2716:	f04f 020f 	mov.w	r2, #15
    271a:	fa02 f303 	lsl.w	r3, r2, r3
    271e:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    2720:	69fb      	ldr	r3, [r7, #28]
    2722:	ea6f 0303 	mvn.w	r3, r3
    2726:	69ba      	ldr	r2, [r7, #24]
    2728:	ea02 0303 	and.w	r3, r2, r3
    272c:	61bb      	str	r3, [r7, #24]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    272e:	697b      	ldr	r3, [r7, #20]
    2730:	68ba      	ldr	r2, [r7, #8]
    2732:	fa02 f303 	lsl.w	r3, r2, r3
    2736:	69ba      	ldr	r2, [r7, #24]
    2738:	ea42 0303 	orr.w	r3, r2, r3
    273c:	61bb      	str	r3, [r7, #24]

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    273e:	683b      	ldr	r3, [r7, #0]
    2740:	78db      	ldrb	r3, [r3, #3]
    2742:	2b28      	cmp	r3, #40	; 0x28
    2744:	d107      	bne.n	2756 <GPIO_Init+0xd6>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
    2746:	693b      	ldr	r3, [r7, #16]
    2748:	f04f 0201 	mov.w	r2, #1
    274c:	fa02 f203 	lsl.w	r2, r2, r3
    2750:	687b      	ldr	r3, [r7, #4]
    2752:	615a      	str	r2, [r3, #20]
    2754:	e00a      	b.n	276c <GPIO_Init+0xec>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    2756:	683b      	ldr	r3, [r7, #0]
    2758:	78db      	ldrb	r3, [r3, #3]
    275a:	2b48      	cmp	r3, #72	; 0x48
    275c:	d106      	bne.n	276c <GPIO_Init+0xec>
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
    275e:	693b      	ldr	r3, [r7, #16]
    2760:	f04f 0201 	mov.w	r2, #1
    2764:	fa02 f203 	lsl.w	r2, r2, r3
    2768:	687b      	ldr	r3, [r7, #4]
    276a:	611a      	str	r2, [r3, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    276c:	693b      	ldr	r3, [r7, #16]
    276e:	f103 0301 	add.w	r3, r3, #1
    2772:	613b      	str	r3, [r7, #16]
    2774:	693b      	ldr	r3, [r7, #16]
    2776:	2b07      	cmp	r3, #7
    2778:	d9b7      	bls.n	26ea <GPIO_Init+0x6a>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	69ba      	ldr	r2, [r7, #24]
    277e:	601a      	str	r2, [r3, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    2780:	683b      	ldr	r3, [r7, #0]
    2782:	881b      	ldrh	r3, [r3, #0]
    2784:	2bff      	cmp	r3, #255	; 0xff
    2786:	d956      	bls.n	2836 <GPIO_Init+0x1b6>
  {
    tmpreg = GPIOx->CRH;
    2788:	687b      	ldr	r3, [r7, #4]
    278a:	685b      	ldr	r3, [r3, #4]
    278c:	61bb      	str	r3, [r7, #24]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    278e:	f04f 0300 	mov.w	r3, #0
    2792:	613b      	str	r3, [r7, #16]
    2794:	e049      	b.n	282a <GPIO_Init+0x1aa>
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
    2796:	693b      	ldr	r3, [r7, #16]
    2798:	f103 0308 	add.w	r3, r3, #8
    279c:	f04f 0201 	mov.w	r2, #1
    27a0:	fa02 f303 	lsl.w	r3, r2, r3
    27a4:	617b      	str	r3, [r7, #20]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    27a6:	683b      	ldr	r3, [r7, #0]
    27a8:	881b      	ldrh	r3, [r3, #0]
    27aa:	461a      	mov	r2, r3
    27ac:	697b      	ldr	r3, [r7, #20]
    27ae:	ea02 0303 	and.w	r3, r2, r3
    27b2:	60fb      	str	r3, [r7, #12]
      if (currentpin == pos)
    27b4:	68fa      	ldr	r2, [r7, #12]
    27b6:	697b      	ldr	r3, [r7, #20]
    27b8:	429a      	cmp	r2, r3
    27ba:	d132      	bne.n	2822 <GPIO_Init+0x1a2>
      {
        pos = pinpos << 2;
    27bc:	693b      	ldr	r3, [r7, #16]
    27be:	ea4f 0383 	mov.w	r3, r3, lsl #2
    27c2:	617b      	str	r3, [r7, #20]
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
    27c4:	697b      	ldr	r3, [r7, #20]
    27c6:	f04f 020f 	mov.w	r2, #15
    27ca:	fa02 f303 	lsl.w	r3, r2, r3
    27ce:	61fb      	str	r3, [r7, #28]
        tmpreg &= ~pinmask;
    27d0:	69fb      	ldr	r3, [r7, #28]
    27d2:	ea6f 0303 	mvn.w	r3, r3
    27d6:	69ba      	ldr	r2, [r7, #24]
    27d8:	ea02 0303 	and.w	r3, r2, r3
    27dc:	61bb      	str	r3, [r7, #24]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    27de:	697b      	ldr	r3, [r7, #20]
    27e0:	68ba      	ldr	r2, [r7, #8]
    27e2:	fa02 f303 	lsl.w	r3, r2, r3
    27e6:	69ba      	ldr	r2, [r7, #24]
    27e8:	ea42 0303 	orr.w	r3, r2, r3
    27ec:	61bb      	str	r3, [r7, #24]

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    27ee:	683b      	ldr	r3, [r7, #0]
    27f0:	78db      	ldrb	r3, [r3, #3]
    27f2:	2b28      	cmp	r3, #40	; 0x28
    27f4:	d108      	bne.n	2808 <GPIO_Init+0x188>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
    27f6:	693b      	ldr	r3, [r7, #16]
    27f8:	f103 0308 	add.w	r3, r3, #8
    27fc:	f04f 0201 	mov.w	r2, #1
    2800:	fa02 f203 	lsl.w	r2, r2, r3
    2804:	687b      	ldr	r3, [r7, #4]
    2806:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    2808:	683b      	ldr	r3, [r7, #0]
    280a:	78db      	ldrb	r3, [r3, #3]
    280c:	2b48      	cmp	r3, #72	; 0x48
    280e:	d108      	bne.n	2822 <GPIO_Init+0x1a2>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
    2810:	693b      	ldr	r3, [r7, #16]
    2812:	f103 0308 	add.w	r3, r3, #8
    2816:	f04f 0201 	mov.w	r2, #1
    281a:	fa02 f203 	lsl.w	r2, r2, r3
    281e:	687b      	ldr	r3, [r7, #4]
    2820:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    2822:	693b      	ldr	r3, [r7, #16]
    2824:	f103 0301 	add.w	r3, r3, #1
    2828:	613b      	str	r3, [r7, #16]
    282a:	693b      	ldr	r3, [r7, #16]
    282c:	2b07      	cmp	r3, #7
    282e:	d9b2      	bls.n	2796 <GPIO_Init+0x116>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	69ba      	ldr	r2, [r7, #24]
    2834:	605a      	str	r2, [r3, #4]
  }
}
    2836:	f107 0724 	add.w	r7, r7, #36	; 0x24
    283a:	46bd      	mov	sp, r7
    283c:	bc80      	pop	{r7}
    283e:	4770      	bx	lr

00002840 <GPIO_StructInit>:
*                    which will be initialized.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    2840:	b480      	push	{r7}
    2842:	b083      	sub	sp, #12
    2844:	af00      	add	r7, sp, #0
    2846:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    284e:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    2850:	687b      	ldr	r3, [r7, #4]
    2852:	f04f 0202 	mov.w	r2, #2
    2856:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    2858:	687b      	ldr	r3, [r7, #4]
    285a:	f04f 0204 	mov.w	r2, #4
    285e:	70da      	strb	r2, [r3, #3]
}
    2860:	f107 070c 	add.w	r7, r7, #12
    2864:	46bd      	mov	sp, r7
    2866:	bc80      	pop	{r7}
    2868:	4770      	bx	lr
    286a:	bf00      	nop

0000286c <GPIO_ReadInputDataBit>:
*                    This parameter can be GPIO_Pin_x where x can be (0..15).
* Output         : None
* Return         : The input port pin value.
*******************************************************************************/
u8 GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
    286c:	b480      	push	{r7}
    286e:	b085      	sub	sp, #20
    2870:	af00      	add	r7, sp, #0
    2872:	6078      	str	r0, [r7, #4]
    2874:	460b      	mov	r3, r1
    2876:	807b      	strh	r3, [r7, #2]
  u8 bitstatus = 0x00;
    2878:	f04f 0300 	mov.w	r3, #0
    287c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (u32)Bit_RESET)
    287e:	687b      	ldr	r3, [r7, #4]
    2880:	689a      	ldr	r2, [r3, #8]
    2882:	887b      	ldrh	r3, [r7, #2]
    2884:	ea02 0303 	and.w	r3, r2, r3
    2888:	2b00      	cmp	r3, #0
    288a:	d003      	beq.n	2894 <GPIO_ReadInputDataBit+0x28>
  {
    bitstatus = (u8)Bit_SET;
    288c:	f04f 0301 	mov.w	r3, #1
    2890:	73fb      	strb	r3, [r7, #15]
    2892:	e002      	b.n	289a <GPIO_ReadInputDataBit+0x2e>
  }
  else
  {
    bitstatus = (u8)Bit_RESET;
    2894:	f04f 0300 	mov.w	r3, #0
    2898:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    289a:	7bfb      	ldrb	r3, [r7, #15]
}
    289c:	4618      	mov	r0, r3
    289e:	f107 0714 	add.w	r7, r7, #20
    28a2:	46bd      	mov	sp, r7
    28a4:	bc80      	pop	{r7}
    28a6:	4770      	bx	lr

000028a8 <GPIO_ReadInputData>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : GPIO input data port value.
*******************************************************************************/
u16 GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    28a8:	b480      	push	{r7}
    28aa:	b083      	sub	sp, #12
    28ac:	af00      	add	r7, sp, #0
    28ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((u16)GPIOx->IDR);
    28b0:	687b      	ldr	r3, [r7, #4]
    28b2:	689b      	ldr	r3, [r3, #8]
    28b4:	b29b      	uxth	r3, r3
}
    28b6:	4618      	mov	r0, r3
    28b8:	f107 070c 	add.w	r7, r7, #12
    28bc:	46bd      	mov	sp, r7
    28be:	bc80      	pop	{r7}
    28c0:	4770      	bx	lr
    28c2:	bf00      	nop

000028c4 <GPIO_ReadOutputDataBit>:
*                    This parameter can be GPIO_Pin_x where x can be (0..15).
* Output         : None
* Return         : The output port pin value.
*******************************************************************************/
u8 GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
    28c4:	b480      	push	{r7}
    28c6:	b085      	sub	sp, #20
    28c8:	af00      	add	r7, sp, #0
    28ca:	6078      	str	r0, [r7, #4]
    28cc:	460b      	mov	r3, r1
    28ce:	807b      	strh	r3, [r7, #2]
  u8 bitstatus = 0x00;
    28d0:	f04f 0300 	mov.w	r3, #0
    28d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (u32)Bit_RESET)
    28d6:	687b      	ldr	r3, [r7, #4]
    28d8:	68da      	ldr	r2, [r3, #12]
    28da:	887b      	ldrh	r3, [r7, #2]
    28dc:	ea02 0303 	and.w	r3, r2, r3
    28e0:	2b00      	cmp	r3, #0
    28e2:	d003      	beq.n	28ec <GPIO_ReadOutputDataBit+0x28>
  {
    bitstatus = (u8)Bit_SET;
    28e4:	f04f 0301 	mov.w	r3, #1
    28e8:	73fb      	strb	r3, [r7, #15]
    28ea:	e002      	b.n	28f2 <GPIO_ReadOutputDataBit+0x2e>
  }
  else
  {
    bitstatus = (u8)Bit_RESET;
    28ec:	f04f 0300 	mov.w	r3, #0
    28f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    28f2:	7bfb      	ldrb	r3, [r7, #15]
}
    28f4:	4618      	mov	r0, r3
    28f6:	f107 0714 	add.w	r7, r7, #20
    28fa:	46bd      	mov	sp, r7
    28fc:	bc80      	pop	{r7}
    28fe:	4770      	bx	lr

00002900 <GPIO_ReadOutputData>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : GPIO output data port value.
*******************************************************************************/
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    2900:	b480      	push	{r7}
    2902:	b083      	sub	sp, #12
    2904:	af00      	add	r7, sp, #0
    2906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	68db      	ldr	r3, [r3, #12]
    290c:	b29b      	uxth	r3, r3
}
    290e:	4618      	mov	r0, r3
    2910:	f107 070c 	add.w	r7, r7, #12
    2914:	46bd      	mov	sp, r7
    2916:	bc80      	pop	{r7}
    2918:	4770      	bx	lr
    291a:	bf00      	nop

0000291c <GPIO_SetBits>:
*                    x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_SetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
    291c:	b480      	push	{r7}
    291e:	b083      	sub	sp, #12
    2920:	af00      	add	r7, sp, #0
    2922:	6078      	str	r0, [r7, #4]
    2924:	460b      	mov	r3, r1
    2926:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    2928:	887a      	ldrh	r2, [r7, #2]
    292a:	687b      	ldr	r3, [r7, #4]
    292c:	611a      	str	r2, [r3, #16]
}
    292e:	f107 070c 	add.w	r7, r7, #12
    2932:	46bd      	mov	sp, r7
    2934:	bc80      	pop	{r7}
    2936:	4770      	bx	lr

00002938 <GPIO_ResetBits>:
*                    x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
    2938:	b480      	push	{r7}
    293a:	b083      	sub	sp, #12
    293c:	af00      	add	r7, sp, #0
    293e:	6078      	str	r0, [r7, #4]
    2940:	460b      	mov	r3, r1
    2942:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    2944:	887a      	ldrh	r2, [r7, #2]
    2946:	687b      	ldr	r3, [r7, #4]
    2948:	615a      	str	r2, [r3, #20]
}
    294a:	f107 070c 	add.w	r7, r7, #12
    294e:	46bd      	mov	sp, r7
    2950:	bc80      	pop	{r7}
    2952:	4770      	bx	lr

00002954 <GPIO_WriteBit>:
*                       - Bit_SET: to set the port pin
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, u16 GPIO_Pin, BitAction BitVal)
{
    2954:	b480      	push	{r7}
    2956:	b083      	sub	sp, #12
    2958:	af00      	add	r7, sp, #0
    295a:	6078      	str	r0, [r7, #4]
    295c:	4613      	mov	r3, r2
    295e:	460a      	mov	r2, r1
    2960:	807a      	strh	r2, [r7, #2]
    2962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    2964:	787b      	ldrb	r3, [r7, #1]
    2966:	2b00      	cmp	r3, #0
    2968:	d003      	beq.n	2972 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    296a:	887a      	ldrh	r2, [r7, #2]
    296c:	687b      	ldr	r3, [r7, #4]
    296e:	611a      	str	r2, [r3, #16]
    2970:	e002      	b.n	2978 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    2972:	887a      	ldrh	r2, [r7, #2]
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	615a      	str	r2, [r3, #20]
  }
}
    2978:	f107 070c 	add.w	r7, r7, #12
    297c:	46bd      	mov	sp, r7
    297e:	bc80      	pop	{r7}
    2980:	4770      	bx	lr
    2982:	bf00      	nop

00002984 <GPIO_Write>:
*                    data register.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Write(GPIO_TypeDef* GPIOx, u16 PortVal)
{
    2984:	b480      	push	{r7}
    2986:	b083      	sub	sp, #12
    2988:	af00      	add	r7, sp, #0
    298a:	6078      	str	r0, [r7, #4]
    298c:	460b      	mov	r3, r1
    298e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    2990:	887a      	ldrh	r2, [r7, #2]
    2992:	687b      	ldr	r3, [r7, #4]
    2994:	60da      	str	r2, [r3, #12]
}
    2996:	f107 070c 	add.w	r7, r7, #12
    299a:	46bd      	mov	sp, r7
    299c:	bc80      	pop	{r7}
    299e:	4770      	bx	lr

000029a0 <GPIO_PinLockConfig>:
*                    x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
    29a0:	b480      	push	{r7}
    29a2:	b085      	sub	sp, #20
    29a4:	af00      	add	r7, sp, #0
    29a6:	6078      	str	r0, [r7, #4]
    29a8:	460b      	mov	r3, r1
    29aa:	807b      	strh	r3, [r7, #2]
  u32 tmp = 0x00010000;
    29ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    29b0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    29b2:	887b      	ldrh	r3, [r7, #2]
    29b4:	68fa      	ldr	r2, [r7, #12]
    29b6:	ea42 0303 	orr.w	r3, r2, r3
    29ba:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    29bc:	687b      	ldr	r3, [r7, #4]
    29be:	68fa      	ldr	r2, [r7, #12]
    29c0:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    29c2:	887a      	ldrh	r2, [r7, #2]
    29c4:	687b      	ldr	r3, [r7, #4]
    29c6:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    29c8:	687b      	ldr	r3, [r7, #4]
    29ca:	68fa      	ldr	r2, [r7, #12]
    29cc:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    29ce:	687b      	ldr	r3, [r7, #4]
    29d0:	699b      	ldr	r3, [r3, #24]
    29d2:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    29d4:	687b      	ldr	r3, [r7, #4]
    29d6:	699b      	ldr	r3, [r3, #24]
    29d8:	60fb      	str	r3, [r7, #12]
}
    29da:	f107 0714 	add.w	r7, r7, #20
    29de:	46bd      	mov	sp, r7
    29e0:	bc80      	pop	{r7}
    29e2:	4770      	bx	lr

000029e4 <GPIO_EventOutputConfig>:
*                    This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EventOutputConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
    29e4:	b480      	push	{r7}
    29e6:	b085      	sub	sp, #20
    29e8:	af00      	add	r7, sp, #0
    29ea:	4602      	mov	r2, r0
    29ec:	460b      	mov	r3, r1
    29ee:	71fa      	strb	r2, [r7, #7]
    29f0:	71bb      	strb	r3, [r7, #6]
  u32 tmpreg = 0x00;
    29f2:	f04f 0300 	mov.w	r3, #0
    29f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    29f8:	f240 0300 	movw	r3, #0
    29fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2a00:	681b      	ldr	r3, [r3, #0]
    2a02:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    2a04:	68fa      	ldr	r2, [r7, #12]
    2a06:	f64f 7380 	movw	r3, #65408	; 0xff80
    2a0a:	f2c0 0300 	movt	r3, #0
    2a0e:	ea02 0303 	and.w	r3, r2, r3
    2a12:	60fb      	str	r3, [r7, #12]
  tmpreg |= (u32)GPIO_PortSource << 0x04;
    2a14:	79fb      	ldrb	r3, [r7, #7]
    2a16:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2a1a:	68fa      	ldr	r2, [r7, #12]
    2a1c:	ea42 0303 	orr.w	r3, r2, r3
    2a20:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    2a22:	79bb      	ldrb	r3, [r7, #6]
    2a24:	68fa      	ldr	r2, [r7, #12]
    2a26:	ea42 0303 	orr.w	r3, r2, r3
    2a2a:	60fb      	str	r3, [r7, #12]

  AFIO->EVCR = tmpreg;
    2a2c:	f240 0300 	movw	r3, #0
    2a30:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2a34:	68fa      	ldr	r2, [r7, #12]
    2a36:	601a      	str	r2, [r3, #0]
}
    2a38:	f107 0714 	add.w	r7, r7, #20
    2a3c:	46bd      	mov	sp, r7
    2a3e:	bc80      	pop	{r7}
    2a40:	4770      	bx	lr
    2a42:	bf00      	nop

00002a44 <GPIO_EventOutputCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    2a44:	b480      	push	{r7}
    2a46:	b083      	sub	sp, #12
    2a48:	af00      	add	r7, sp, #0
    2a4a:	4603      	mov	r3, r0
    2a4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(vu32 *) EVCR_EVOE_BB = (u32)NewState;
    2a4e:	f240 031c 	movw	r3, #28
    2a52:	f2c4 2320 	movt	r3, #16928	; 0x4220
    2a56:	79fa      	ldrb	r2, [r7, #7]
    2a58:	601a      	str	r2, [r3, #0]
}
    2a5a:	f107 070c 	add.w	r7, r7, #12
    2a5e:	46bd      	mov	sp, r7
    2a60:	bc80      	pop	{r7}
    2a62:	4770      	bx	lr

00002a64 <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
    2a64:	b480      	push	{r7}
    2a66:	b087      	sub	sp, #28
    2a68:	af00      	add	r7, sp, #0
    2a6a:	6078      	str	r0, [r7, #4]
    2a6c:	460b      	mov	r3, r1
    2a6e:	70fb      	strb	r3, [r7, #3]
  u32 tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    2a70:	f04f 0300 	mov.w	r3, #0
    2a74:	60bb      	str	r3, [r7, #8]
    2a76:	f04f 0300 	mov.w	r3, #0
    2a7a:	60fb      	str	r3, [r7, #12]
    2a7c:	f04f 0300 	mov.w	r3, #0
    2a80:	613b      	str	r3, [r7, #16]
    2a82:	f04f 0300 	mov.w	r3, #0
    2a86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
    2a88:	f240 0300 	movw	r3, #0
    2a8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2a90:	685b      	ldr	r3, [r3, #4]
    2a92:	613b      	str	r3, [r7, #16]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    2a94:	687b      	ldr	r3, [r7, #4]
    2a96:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    2a9a:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2a9e:	617b      	str	r3, [r7, #20]
  tmp = GPIO_Remap & LSB_MASK;
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	ea4f 4303 	mov.w	r3, r3, lsl #16
    2aa6:	ea4f 4313 	mov.w	r3, r3, lsr #16
    2aaa:	60bb      	str	r3, [r7, #8]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    2aac:	687b      	ldr	r3, [r7, #4]
    2aae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    2ab2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    2ab6:	d110      	bne.n	2ada <GPIO_PinRemapConfig+0x76>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    2ab8:	693b      	ldr	r3, [r7, #16]
    2aba:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2abe:	613b      	str	r3, [r7, #16]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    2ac0:	f240 0300 	movw	r3, #0
    2ac4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2ac8:	f240 0200 	movw	r2, #0
    2acc:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2ad0:	6852      	ldr	r2, [r2, #4]
    2ad2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    2ad6:	605a      	str	r2, [r3, #4]
    2ad8:	e028      	b.n	2b2c <GPIO_PinRemapConfig+0xc8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    2ae0:	2b00      	cmp	r3, #0
    2ae2:	d011      	beq.n	2b08 <GPIO_PinRemapConfig+0xa4>
  {
    tmp1 = ((u32)0x03) << tmpmask;
    2ae4:	697b      	ldr	r3, [r7, #20]
    2ae6:	f04f 0203 	mov.w	r2, #3
    2aea:	fa02 f303 	lsl.w	r3, r2, r3
    2aee:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    2af0:	68fb      	ldr	r3, [r7, #12]
    2af2:	ea6f 0303 	mvn.w	r3, r3
    2af6:	693a      	ldr	r2, [r7, #16]
    2af8:	ea02 0303 	and.w	r3, r2, r3
    2afc:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    2afe:	693b      	ldr	r3, [r7, #16]
    2b00:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    2b04:	613b      	str	r3, [r7, #16]
    2b06:	e011      	b.n	2b2c <GPIO_PinRemapConfig+0xc8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    2b08:	687b      	ldr	r3, [r7, #4]
    2b0a:	ea4f 5353 	mov.w	r3, r3, lsr #21
    2b0e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2b12:	68ba      	ldr	r2, [r7, #8]
    2b14:	fa02 f303 	lsl.w	r3, r2, r3
    2b18:	ea6f 0303 	mvn.w	r3, r3
    2b1c:	693a      	ldr	r2, [r7, #16]
    2b1e:	ea02 0303 	and.w	r3, r2, r3
    2b22:	613b      	str	r3, [r7, #16]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    2b24:	693b      	ldr	r3, [r7, #16]
    2b26:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    2b2a:	613b      	str	r3, [r7, #16]
  }

  if (NewState != DISABLE)
    2b2c:	78fb      	ldrb	r3, [r7, #3]
    2b2e:	2b00      	cmp	r3, #0
    2b30:	d00b      	beq.n	2b4a <GPIO_PinRemapConfig+0xe6>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    2b32:	687b      	ldr	r3, [r7, #4]
    2b34:	ea4f 5353 	mov.w	r3, r3, lsr #21
    2b38:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2b3c:	68ba      	ldr	r2, [r7, #8]
    2b3e:	fa02 f303 	lsl.w	r3, r2, r3
    2b42:	693a      	ldr	r2, [r7, #16]
    2b44:	ea42 0303 	orr.w	r3, r2, r3
    2b48:	613b      	str	r3, [r7, #16]
  }

  AFIO->MAPR = tmpreg;
    2b4a:	f240 0300 	movw	r3, #0
    2b4e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2b52:	693a      	ldr	r2, [r7, #16]
    2b54:	605a      	str	r2, [r3, #4]
}
    2b56:	f107 071c 	add.w	r7, r7, #28
    2b5a:	46bd      	mov	sp, r7
    2b5c:	bc80      	pop	{r7}
    2b5e:	4770      	bx	lr

00002b60 <GPIO_EXTILineConfig>:
*                   This parameter can be GPIO_PinSourcex where x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_EXTILineConfig(u8 GPIO_PortSource, u8 GPIO_PinSource)
{
    2b60:	b480      	push	{r7}
    2b62:	b085      	sub	sp, #20
    2b64:	af00      	add	r7, sp, #0
    2b66:	4602      	mov	r2, r0
    2b68:	460b      	mov	r3, r1
    2b6a:	71fa      	strb	r2, [r7, #7]
    2b6c:	71bb      	strb	r3, [r7, #6]
  u32 tmp = 0x00;
    2b6e:	f04f 0300 	mov.w	r3, #0
    2b72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((u32)0x0F) << (0x04 * (GPIO_PinSource & (u8)0x03));
    2b74:	79bb      	ldrb	r3, [r7, #6]
    2b76:	f003 0303 	and.w	r3, r3, #3
    2b7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    2b7e:	f04f 020f 	mov.w	r2, #15
    2b82:	fa02 f303 	lsl.w	r3, r2, r3
    2b86:	60fb      	str	r3, [r7, #12]

  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    2b88:	f240 0300 	movw	r3, #0
    2b8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2b90:	79ba      	ldrb	r2, [r7, #6]
    2b92:	ea4f 0292 	mov.w	r2, r2, lsr #2
    2b96:	b2d2      	uxtb	r2, r2
    2b98:	4610      	mov	r0, r2
    2b9a:	f240 0200 	movw	r2, #0
    2b9e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2ba2:	79b9      	ldrb	r1, [r7, #6]
    2ba4:	ea4f 0191 	mov.w	r1, r1, lsr #2
    2ba8:	b2c9      	uxtb	r1, r1
    2baa:	f101 0102 	add.w	r1, r1, #2
    2bae:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2bb2:	68fa      	ldr	r2, [r7, #12]
    2bb4:	ea6f 0202 	mvn.w	r2, r2
    2bb8:	ea01 0102 	and.w	r1, r1, r2
    2bbc:	f100 0202 	add.w	r2, r0, #2
    2bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((u32)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (u8)0x03)));
    2bc4:	f240 0300 	movw	r3, #0
    2bc8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2bcc:	79ba      	ldrb	r2, [r7, #6]
    2bce:	ea4f 0292 	mov.w	r2, r2, lsr #2
    2bd2:	b2d2      	uxtb	r2, r2
    2bd4:	4610      	mov	r0, r2
    2bd6:	f240 0200 	movw	r2, #0
    2bda:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2bde:	79b9      	ldrb	r1, [r7, #6]
    2be0:	ea4f 0191 	mov.w	r1, r1, lsr #2
    2be4:	b2c9      	uxtb	r1, r1
    2be6:	f101 0102 	add.w	r1, r1, #2
    2bea:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2bee:	f897 c007 	ldrb.w	ip, [r7, #7]
    2bf2:	79ba      	ldrb	r2, [r7, #6]
    2bf4:	f002 0203 	and.w	r2, r2, #3
    2bf8:	ea4f 0282 	mov.w	r2, r2, lsl #2
    2bfc:	fa0c f202 	lsl.w	r2, ip, r2
    2c00:	ea41 0102 	orr.w	r1, r1, r2
    2c04:	f100 0202 	add.w	r2, r0, #2
    2c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    2c0c:	f107 0714 	add.w	r7, r7, #20
    2c10:	46bd      	mov	sp, r7
    2c12:	bc80      	pop	{r7}
    2c14:	4770      	bx	lr
    2c16:	bf00      	nop

00002c18 <CAN_DeInit>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CAN_DeInit(void)
{
    2c18:	b580      	push	{r7, lr}
    2c1a:	af00      	add	r7, sp, #0
  /* Enable CAN reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, ENABLE);
    2c1c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    2c20:	f04f 0101 	mov.w	r1, #1
    2c24:	f7ff fa64 	bl	20f0 <RCC_APB1PeriphResetCmd>
  /* Release CAN from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN, DISABLE);
    2c28:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    2c2c:	f04f 0100 	mov.w	r1, #0
    2c30:	f7ff fa5e 	bl	20f0 <RCC_APB1PeriphResetCmd>
}
    2c34:	46bd      	mov	sp, r7
    2c36:	bd80      	pop	{r7, pc}

00002c38 <CAN_Init>:
* Output         : None.
* Return         : Constant indicates initialization succeed which will be 
*                  CANINITFAILED or CANINITOK.
*******************************************************************************/
u8 CAN_Init(CAN_InitTypeDef* CAN_InitStruct)
{
    2c38:	b480      	push	{r7}
    2c3a:	b085      	sub	sp, #20
    2c3c:	af00      	add	r7, sp, #0
    2c3e:	6078      	str	r0, [r7, #4]
  u8 InitStatus = 0;
    2c40:	f04f 0300 	mov.w	r3, #0
    2c44:	737b      	strb	r3, [r7, #13]
  u16 WaitAck = 0;
    2c46:	f04f 0300 	mov.w	r3, #0
    2c4a:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Request initialisation */
  CAN->MCR = MCR_INRQ;
    2c4c:	f246 4300 	movw	r3, #25600	; 0x6400
    2c50:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2c54:	f04f 0201 	mov.w	r2, #1
    2c58:	601a      	str	r2, [r3, #0]

  /* ...and check acknowledged */
  if ((CAN->MSR & MSR_INAK) == 0)
    2c5a:	f246 4300 	movw	r3, #25600	; 0x6400
    2c5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2c62:	685b      	ldr	r3, [r3, #4]
    2c64:	f003 0301 	and.w	r3, r3, #1
    2c68:	2b00      	cmp	r3, #0
    2c6a:	d103      	bne.n	2c74 <CAN_Init+0x3c>
  {
    InitStatus = CANINITFAILED;
    2c6c:	f04f 0300 	mov.w	r3, #0
    2c70:	737b      	strb	r3, [r7, #13]
    2c72:	e0f5      	b.n	2e60 <CAN_Init+0x228>
  }
  else
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
    2c74:	687b      	ldr	r3, [r7, #4]
    2c76:	781b      	ldrb	r3, [r3, #0]
    2c78:	2b01      	cmp	r3, #1
    2c7a:	d10c      	bne.n	2c96 <CAN_Init+0x5e>
    {
      CAN->MCR |= MCR_TTCM;
    2c7c:	f246 4300 	movw	r3, #25600	; 0x6400
    2c80:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2c84:	f246 4200 	movw	r2, #25600	; 0x6400
    2c88:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2c8c:	6812      	ldr	r2, [r2, #0]
    2c8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    2c92:	601a      	str	r2, [r3, #0]
    2c94:	e00b      	b.n	2cae <CAN_Init+0x76>
    }
    else
    {
      CAN->MCR &= ~MCR_TTCM;
    2c96:	f246 4300 	movw	r3, #25600	; 0x6400
    2c9a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2c9e:	f246 4200 	movw	r2, #25600	; 0x6400
    2ca2:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2ca6:	6812      	ldr	r2, [r2, #0]
    2ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2cac:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
    2cae:	687b      	ldr	r3, [r7, #4]
    2cb0:	785b      	ldrb	r3, [r3, #1]
    2cb2:	2b01      	cmp	r3, #1
    2cb4:	d10c      	bne.n	2cd0 <CAN_Init+0x98>
    {
      CAN->MCR |= MCR_ABOM;
    2cb6:	f246 4300 	movw	r3, #25600	; 0x6400
    2cba:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2cbe:	f246 4200 	movw	r2, #25600	; 0x6400
    2cc2:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2cc6:	6812      	ldr	r2, [r2, #0]
    2cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2ccc:	601a      	str	r2, [r3, #0]
    2cce:	e00b      	b.n	2ce8 <CAN_Init+0xb0>
    }
    else
    {
      CAN->MCR &= ~MCR_ABOM;
    2cd0:	f246 4300 	movw	r3, #25600	; 0x6400
    2cd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2cd8:	f246 4200 	movw	r2, #25600	; 0x6400
    2cdc:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2ce0:	6812      	ldr	r2, [r2, #0]
    2ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    2ce6:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	789b      	ldrb	r3, [r3, #2]
    2cec:	2b01      	cmp	r3, #1
    2cee:	d10c      	bne.n	2d0a <CAN_Init+0xd2>
    {
      CAN->MCR |= MCR_AWUM;
    2cf0:	f246 4300 	movw	r3, #25600	; 0x6400
    2cf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2cf8:	f246 4200 	movw	r2, #25600	; 0x6400
    2cfc:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2d00:	6812      	ldr	r2, [r2, #0]
    2d02:	f042 0220 	orr.w	r2, r2, #32
    2d06:	601a      	str	r2, [r3, #0]
    2d08:	e00b      	b.n	2d22 <CAN_Init+0xea>
    }
    else
    {
      CAN->MCR &= ~MCR_AWUM;
    2d0a:	f246 4300 	movw	r3, #25600	; 0x6400
    2d0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2d12:	f246 4200 	movw	r2, #25600	; 0x6400
    2d16:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2d1a:	6812      	ldr	r2, [r2, #0]
    2d1c:	f022 0220 	bic.w	r2, r2, #32
    2d20:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
    2d22:	687b      	ldr	r3, [r7, #4]
    2d24:	78db      	ldrb	r3, [r3, #3]
    2d26:	2b01      	cmp	r3, #1
    2d28:	d10c      	bne.n	2d44 <CAN_Init+0x10c>
    {
      CAN->MCR |= MCR_NART;
    2d2a:	f246 4300 	movw	r3, #25600	; 0x6400
    2d2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2d32:	f246 4200 	movw	r2, #25600	; 0x6400
    2d36:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2d3a:	6812      	ldr	r2, [r2, #0]
    2d3c:	f042 0210 	orr.w	r2, r2, #16
    2d40:	601a      	str	r2, [r3, #0]
    2d42:	e00b      	b.n	2d5c <CAN_Init+0x124>
    }
    else
    {
      CAN->MCR &= ~MCR_NART;
    2d44:	f246 4300 	movw	r3, #25600	; 0x6400
    2d48:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2d4c:	f246 4200 	movw	r2, #25600	; 0x6400
    2d50:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2d54:	6812      	ldr	r2, [r2, #0]
    2d56:	f022 0210 	bic.w	r2, r2, #16
    2d5a:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
    2d5c:	687b      	ldr	r3, [r7, #4]
    2d5e:	791b      	ldrb	r3, [r3, #4]
    2d60:	2b01      	cmp	r3, #1
    2d62:	d10c      	bne.n	2d7e <CAN_Init+0x146>
    {
      CAN->MCR |= MCR_RFLM;
    2d64:	f246 4300 	movw	r3, #25600	; 0x6400
    2d68:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2d6c:	f246 4200 	movw	r2, #25600	; 0x6400
    2d70:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2d74:	6812      	ldr	r2, [r2, #0]
    2d76:	f042 0208 	orr.w	r2, r2, #8
    2d7a:	601a      	str	r2, [r3, #0]
    2d7c:	e00b      	b.n	2d96 <CAN_Init+0x15e>
    }
    else
    {
      CAN->MCR &= ~MCR_RFLM;
    2d7e:	f246 4300 	movw	r3, #25600	; 0x6400
    2d82:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2d86:	f246 4200 	movw	r2, #25600	; 0x6400
    2d8a:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2d8e:	6812      	ldr	r2, [r2, #0]
    2d90:	f022 0208 	bic.w	r2, r2, #8
    2d94:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	795b      	ldrb	r3, [r3, #5]
    2d9a:	2b01      	cmp	r3, #1
    2d9c:	d10c      	bne.n	2db8 <CAN_Init+0x180>
    {
      CAN->MCR |= MCR_TXFP;
    2d9e:	f246 4300 	movw	r3, #25600	; 0x6400
    2da2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2da6:	f246 4200 	movw	r2, #25600	; 0x6400
    2daa:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2dae:	6812      	ldr	r2, [r2, #0]
    2db0:	f042 0204 	orr.w	r2, r2, #4
    2db4:	601a      	str	r2, [r3, #0]
    2db6:	e00b      	b.n	2dd0 <CAN_Init+0x198>
    }
    else
    {
      CAN->MCR &= ~MCR_TXFP;
    2db8:	f246 4300 	movw	r3, #25600	; 0x6400
    2dbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2dc0:	f246 4200 	movw	r2, #25600	; 0x6400
    2dc4:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2dc8:	6812      	ldr	r2, [r2, #0]
    2dca:	f022 0204 	bic.w	r2, r2, #4
    2dce:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CAN->BTR = (u32)((u32)CAN_InitStruct->CAN_Mode << 30) | ((u32)CAN_InitStruct->CAN_SJW << 24) |
    2dd0:	f246 4300 	movw	r3, #25600	; 0x6400
    2dd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2dd8:	687a      	ldr	r2, [r7, #4]
    2dda:	7992      	ldrb	r2, [r2, #6]
    2ddc:	ea4f 7182 	mov.w	r1, r2, lsl #30
    2de0:	687a      	ldr	r2, [r7, #4]
    2de2:	79d2      	ldrb	r2, [r2, #7]
    2de4:	ea4f 6202 	mov.w	r2, r2, lsl #24
    2de8:	ea41 0102 	orr.w	r1, r1, r2
               ((u32)CAN_InitStruct->CAN_BS1 << 16) | ((u32)CAN_InitStruct->CAN_BS2 << 20) |
    2dec:	687a      	ldr	r2, [r7, #4]
    2dee:	7a12      	ldrb	r2, [r2, #8]
    2df0:	ea4f 4202 	mov.w	r2, r2, lsl #16
    2df4:	ea41 0102 	orr.w	r1, r1, r2
    2df8:	687a      	ldr	r2, [r7, #4]
    2dfa:	7a52      	ldrb	r2, [r2, #9]
    2dfc:	ea4f 5202 	mov.w	r2, r2, lsl #20
    2e00:	ea41 0102 	orr.w	r1, r1, r2
               ((u32)CAN_InitStruct->CAN_Prescaler - 1);
    2e04:	687a      	ldr	r2, [r7, #4]
    2e06:	8952      	ldrh	r2, [r2, #10]
    2e08:	f102 32ff 	add.w	r2, r2, #4294967295
    {
      CAN->MCR &= ~MCR_TXFP;
    }

    /* Set the bit timing register */
    CAN->BTR = (u32)((u32)CAN_InitStruct->CAN_Mode << 30) | ((u32)CAN_InitStruct->CAN_SJW << 24) |
    2e0c:	ea41 0202 	orr.w	r2, r1, r2
    2e10:	61da      	str	r2, [r3, #28]
               ((u32)CAN_InitStruct->CAN_BS1 << 16) | ((u32)CAN_InitStruct->CAN_BS2 << 20) |
               ((u32)CAN_InitStruct->CAN_Prescaler - 1);

    InitStatus = CANINITOK;
    2e12:	f04f 0301 	mov.w	r3, #1
    2e16:	737b      	strb	r3, [r7, #13]

    /* Request leave initialisation */
    CAN->MCR &= ~MCR_INRQ;
    2e18:	f246 4300 	movw	r3, #25600	; 0x6400
    2e1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2e20:	f246 4200 	movw	r2, #25600	; 0x6400
    2e24:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2e28:	6812      	ldr	r2, [r2, #0]
    2e2a:	f022 0201 	bic.w	r2, r2, #1
    2e2e:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    for(WaitAck = 0x400; WaitAck > 0x0; WaitAck--)
    2e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2e34:	81fb      	strh	r3, [r7, #14]
    2e36:	e003      	b.n	2e40 <CAN_Init+0x208>
    2e38:	89fb      	ldrh	r3, [r7, #14]
    2e3a:	f103 33ff 	add.w	r3, r3, #4294967295
    2e3e:	81fb      	strh	r3, [r7, #14]
    2e40:	89fb      	ldrh	r3, [r7, #14]
    2e42:	2b00      	cmp	r3, #0
    2e44:	d1f8      	bne.n	2e38 <CAN_Init+0x200>
    {
    }
    
    /* ...and check acknowledged */
    if ((CAN->MSR & MSR_INAK) == MSR_INAK)
    2e46:	f246 4300 	movw	r3, #25600	; 0x6400
    2e4a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2e4e:	685b      	ldr	r3, [r3, #4]
    2e50:	f003 0301 	and.w	r3, r3, #1
    2e54:	b2db      	uxtb	r3, r3
    2e56:	2b00      	cmp	r3, #0
    2e58:	d002      	beq.n	2e60 <CAN_Init+0x228>
    {
      InitStatus = CANINITFAILED;
    2e5a:	f04f 0300 	mov.w	r3, #0
    2e5e:	737b      	strb	r3, [r7, #13]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
    2e60:	7b7b      	ldrb	r3, [r7, #13]
}
    2e62:	4618      	mov	r0, r3
    2e64:	f107 0714 	add.w	r7, r7, #20
    2e68:	46bd      	mov	sp, r7
    2e6a:	bc80      	pop	{r7}
    2e6c:	4770      	bx	lr
    2e6e:	bf00      	nop

00002e70 <CAN_FilterInit>:
*                  structure that contains the configuration information.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
    2e70:	b480      	push	{r7}
    2e72:	b085      	sub	sp, #20
    2e74:	af00      	add	r7, sp, #0
    2e76:	6078      	str	r0, [r7, #4]
  u16 FilterNumber_BitPos = 0;
    2e78:	f04f 0300 	mov.w	r3, #0
    2e7c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  FilterNumber_BitPos = 
  (u16)(((u16)0x0001) << ((u16)CAN_FilterInitStruct->CAN_FilterNumber));
    2e7e:	687b      	ldr	r3, [r7, #4]
    2e80:	781b      	ldrb	r3, [r3, #0]
    2e82:	f04f 0201 	mov.w	r2, #1
    2e86:	fa02 f303 	lsl.w	r3, r2, r3
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  FilterNumber_BitPos = 
    2e8a:	81fb      	strh	r3, [r7, #14]
  (u16)(((u16)0x0001) << ((u16)CAN_FilterInitStruct->CAN_FilterNumber));

  /* Initialisation mode for the filter */
  CAN->FMR |= FMR_FINIT;
    2e8c:	f246 4300 	movw	r3, #25600	; 0x6400
    2e90:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2e94:	f246 4200 	movw	r2, #25600	; 0x6400
    2e98:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2e9c:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
    2ea0:	f042 0201 	orr.w	r2, r2, #1
    2ea4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN->FA1R &= ~(u32)FilterNumber_BitPos;
    2ea8:	f246 4300 	movw	r3, #25600	; 0x6400
    2eac:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2eb0:	f246 4200 	movw	r2, #25600	; 0x6400
    2eb4:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2eb8:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
    2ebc:	89fa      	ldrh	r2, [r7, #14]
    2ebe:	ea6f 0202 	mvn.w	r2, r2
    2ec2:	ea01 0202 	and.w	r2, r1, r2
    2ec6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
    2eca:	687b      	ldr	r3, [r7, #4]
    2ecc:	789b      	ldrb	r3, [r3, #2]
    2ece:	2b00      	cmp	r3, #0
    2ed0:	d136      	bne.n	2f40 <CAN_FilterInit+0xd0>
  {
    /* 16-bit scale for the filter */
    CAN->FS1R &= ~(u32)FilterNumber_BitPos;
    2ed2:	f246 4300 	movw	r3, #25600	; 0x6400
    2ed6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2eda:	f246 4200 	movw	r2, #25600	; 0x6400
    2ede:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2ee2:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
    2ee6:	89fa      	ldrh	r2, [r7, #14]
    2ee8:	ea6f 0202 	mvn.w	r2, r2
    2eec:	ea01 0202 	and.w	r2, r1, r2
    2ef0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    2ef4:	f246 4300 	movw	r3, #25600	; 0x6400
    2ef8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2efc:	687a      	ldr	r2, [r7, #4]
    2efe:	7812      	ldrb	r2, [r2, #0]
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
    2f00:	6879      	ldr	r1, [r7, #4]
    2f02:	8949      	ldrh	r1, [r1, #10]
    2f04:	ea4f 4001 	mov.w	r0, r1, lsl #16
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);
    2f08:	6879      	ldr	r1, [r7, #4]
    2f0a:	88c9      	ldrh	r1, [r1, #6]
    CAN->FS1R &= ~(u32)FilterNumber_BitPos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
    2f0c:	ea40 0101 	orr.w	r1, r0, r1
    /* 16-bit scale for the filter */
    CAN->FS1R &= ~(u32)FilterNumber_BitPos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    2f10:	f102 0248 	add.w	r2, r2, #72	; 0x48
    2f14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    2f18:	f246 4200 	movw	r2, #25600	; 0x6400
    2f1c:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	781b      	ldrb	r3, [r3, #0]
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
    2f24:	6879      	ldr	r1, [r7, #4]
    2f26:	8909      	ldrh	r1, [r1, #8]
    2f28:	ea4f 4001 	mov.w	r0, r1, lsl #16
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh);
    2f2c:	6879      	ldr	r1, [r7, #4]
    2f2e:	8889      	ldrh	r1, [r1, #4]
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
    2f30:	ea40 0101 	orr.w	r1, r0, r1
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    2f34:	f103 0348 	add.w	r3, r3, #72	; 0x48
    2f38:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    2f3c:	4413      	add	r3, r2
    2f3e:	6059      	str	r1, [r3, #4]
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh);
  }
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	789b      	ldrb	r3, [r3, #2]
    2f44:	2b01      	cmp	r3, #1
    2f46:	d134      	bne.n	2fb2 <CAN_FilterInit+0x142>
  {
    /* 32-bit scale for the filter */
    CAN->FS1R |= FilterNumber_BitPos;
    2f48:	f246 4300 	movw	r3, #25600	; 0x6400
    2f4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2f50:	f246 4200 	movw	r2, #25600	; 0x6400
    2f54:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2f58:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
    2f5c:	89fa      	ldrh	r2, [r7, #14]
    2f5e:	ea41 0202 	orr.w	r2, r1, r2
    2f62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* 32-bit identifier or First 32-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    2f66:	f246 4300 	movw	r3, #25600	; 0x6400
    2f6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2f6e:	687a      	ldr	r2, [r7, #4]
    2f70:	7812      	ldrb	r2, [r2, #0]
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
    2f72:	6879      	ldr	r1, [r7, #4]
    2f74:	8889      	ldrh	r1, [r1, #4]
    2f76:	ea4f 4001 	mov.w	r0, r1, lsl #16
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);
    2f7a:	6879      	ldr	r1, [r7, #4]
    2f7c:	88c9      	ldrh	r1, [r1, #6]
    /* 32-bit scale for the filter */
    CAN->FS1R |= FilterNumber_BitPos;

    /* 32-bit identifier or First 32-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
    2f7e:	ea40 0101 	orr.w	r1, r0, r1
  {
    /* 32-bit scale for the filter */
    CAN->FS1R |= FilterNumber_BitPos;

    /* 32-bit identifier or First 32-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    2f82:	f102 0248 	add.w	r2, r2, #72	; 0x48
    2f86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);

    /* 32-bit mask or Second 32-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    2f8a:	f246 4200 	movw	r2, #25600	; 0x6400
    2f8e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	781b      	ldrb	r3, [r3, #0]
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
    2f96:	6879      	ldr	r1, [r7, #4]
    2f98:	8909      	ldrh	r1, [r1, #8]
    2f9a:	ea4f 4001 	mov.w	r0, r1, lsl #16
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow);
    2f9e:	6879      	ldr	r1, [r7, #4]
    2fa0:	8949      	ldrh	r1, [r1, #10]
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);

    /* 32-bit mask or Second 32-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
    2fa2:	ea40 0101 	orr.w	r1, r0, r1
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((u32)((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterIdLow);

    /* 32-bit mask or Second 32-bit identifier */
    CAN->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    2fa6:	f103 0348 	add.w	r3, r3, #72	; 0x48
    2faa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    2fae:	4413      	add	r3, r2
    2fb0:	6059      	str	r1, [r3, #4]
        ((u32)0x0000FFFF & CAN_FilterInitStruct->CAN_FilterMaskIdLow);

  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	785b      	ldrb	r3, [r3, #1]
    2fb6:	2b00      	cmp	r3, #0
    2fb8:	d111      	bne.n	2fde <CAN_FilterInit+0x16e>
  {
    /*Id/Mask mode for the filter*/
    CAN->FM1R &= ~(u32)FilterNumber_BitPos;
    2fba:	f246 4300 	movw	r3, #25600	; 0x6400
    2fbe:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2fc2:	f246 4200 	movw	r2, #25600	; 0x6400
    2fc6:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2fca:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    2fce:	89fa      	ldrh	r2, [r7, #14]
    2fd0:	ea6f 0202 	mvn.w	r2, r2
    2fd4:	ea01 0202 	and.w	r2, r1, r2
    2fd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    2fdc:	e00e      	b.n	2ffc <CAN_FilterInit+0x18c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN->FM1R |= (u32)FilterNumber_BitPos;
    2fde:	f246 4300 	movw	r3, #25600	; 0x6400
    2fe2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2fe6:	f246 4200 	movw	r2, #25600	; 0x6400
    2fea:	f2c4 0200 	movt	r2, #16384	; 0x4000
    2fee:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
    2ff2:	89fa      	ldrh	r2, [r7, #14]
    2ff4:	ea41 0202 	orr.w	r2, r1, r2
    2ff8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO0)
    2ffc:	687b      	ldr	r3, [r7, #4]
    2ffe:	899b      	ldrh	r3, [r3, #12]
    3000:	2b00      	cmp	r3, #0
    3002:	d110      	bne.n	3026 <CAN_FilterInit+0x1b6>
  {
    /* FIFO 0 assignation for the filter */
    CAN->FFA1R &= ~(u32)FilterNumber_BitPos;
    3004:	f246 4300 	movw	r3, #25600	; 0x6400
    3008:	f2c4 0300 	movt	r3, #16384	; 0x4000
    300c:	f246 4200 	movw	r2, #25600	; 0x6400
    3010:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3014:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
    3018:	89fa      	ldrh	r2, [r7, #14]
    301a:	ea6f 0202 	mvn.w	r2, r2
    301e:	ea01 0202 	and.w	r2, r1, r2
    3022:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_FilterFIFO1)
    3026:	687b      	ldr	r3, [r7, #4]
    3028:	899b      	ldrh	r3, [r3, #12]
    302a:	2b01      	cmp	r3, #1
    302c:	d10e      	bne.n	304c <CAN_FilterInit+0x1dc>
  {
    /* FIFO 1 assignation for the filter */
    CAN->FFA1R |= (u32)FilterNumber_BitPos;
    302e:	f246 4300 	movw	r3, #25600	; 0x6400
    3032:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3036:	f246 4200 	movw	r2, #25600	; 0x6400
    303a:	f2c4 0200 	movt	r2, #16384	; 0x4000
    303e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
    3042:	89fa      	ldrh	r2, [r7, #14]
    3044:	ea41 0202 	orr.w	r2, r1, r2
    3048:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	7b9b      	ldrb	r3, [r3, #14]
    3050:	2b01      	cmp	r3, #1
    3052:	d10e      	bne.n	3072 <CAN_FilterInit+0x202>
  {
    CAN->FA1R |= FilterNumber_BitPos;
    3054:	f246 4300 	movw	r3, #25600	; 0x6400
    3058:	f2c4 0300 	movt	r3, #16384	; 0x4000
    305c:	f246 4200 	movw	r2, #25600	; 0x6400
    3060:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3064:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
    3068:	89fa      	ldrh	r2, [r7, #14]
    306a:	ea41 0202 	orr.w	r2, r1, r2
    306e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN->FMR &= ~FMR_FINIT;
    3072:	f246 4300 	movw	r3, #25600	; 0x6400
    3076:	f2c4 0300 	movt	r3, #16384	; 0x4000
    307a:	f246 4200 	movw	r2, #25600	; 0x6400
    307e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3082:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
    3086:	f022 0201 	bic.w	r2, r2, #1
    308a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    308e:	f107 0714 	add.w	r7, r7, #20
    3092:	46bd      	mov	sp, r7
    3094:	bc80      	pop	{r7}
    3096:	4770      	bx	lr

00003098 <CAN_StructInit>:
*                  will be initialized.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
    3098:	b480      	push	{r7}
    309a:	b083      	sub	sp, #12
    309c:	af00      	add	r7, sp, #0
    309e:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */

  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	f04f 0200 	mov.w	r2, #0
    30a6:	701a      	strb	r2, [r3, #0]

  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
    30a8:	687b      	ldr	r3, [r7, #4]
    30aa:	f04f 0200 	mov.w	r2, #0
    30ae:	705a      	strb	r2, [r3, #1]

  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
    30b0:	687b      	ldr	r3, [r7, #4]
    30b2:	f04f 0200 	mov.w	r2, #0
    30b6:	709a      	strb	r2, [r3, #2]

  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
    30b8:	687b      	ldr	r3, [r7, #4]
    30ba:	f04f 0200 	mov.w	r2, #0
    30be:	70da      	strb	r2, [r3, #3]

  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
    30c0:	687b      	ldr	r3, [r7, #4]
    30c2:	f04f 0200 	mov.w	r2, #0
    30c6:	711a      	strb	r2, [r3, #4]

  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
    30c8:	687b      	ldr	r3, [r7, #4]
    30ca:	f04f 0200 	mov.w	r2, #0
    30ce:	715a      	strb	r2, [r3, #5]

  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
    30d0:	687b      	ldr	r3, [r7, #4]
    30d2:	f04f 0200 	mov.w	r2, #0
    30d6:	719a      	strb	r2, [r3, #6]

  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
    30d8:	687b      	ldr	r3, [r7, #4]
    30da:	f04f 0200 	mov.w	r2, #0
    30de:	71da      	strb	r2, [r3, #7]

  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
    30e0:	687b      	ldr	r3, [r7, #4]
    30e2:	f04f 0203 	mov.w	r2, #3
    30e6:	721a      	strb	r2, [r3, #8]

  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
    30e8:	687b      	ldr	r3, [r7, #4]
    30ea:	f04f 0202 	mov.w	r2, #2
    30ee:	725a      	strb	r2, [r3, #9]

  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
    30f0:	687b      	ldr	r3, [r7, #4]
    30f2:	f04f 0201 	mov.w	r2, #1
    30f6:	815a      	strh	r2, [r3, #10]
}
    30f8:	f107 070c 	add.w	r7, r7, #12
    30fc:	46bd      	mov	sp, r7
    30fe:	bc80      	pop	{r7}
    3100:	4770      	bx	lr
    3102:	bf00      	nop

00003104 <CAN_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CAN_ITConfig(u32 CAN_IT, FunctionalState NewState)
{
    3104:	b480      	push	{r7}
    3106:	b083      	sub	sp, #12
    3108:	af00      	add	r7, sp, #0
    310a:	6078      	str	r0, [r7, #4]
    310c:	460b      	mov	r3, r1
    310e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ITConfig(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    3110:	78fb      	ldrb	r3, [r7, #3]
    3112:	2b00      	cmp	r3, #0
    3114:	d00d      	beq.n	3132 <CAN_ITConfig+0x2e>
  {
    /* Enable the selected CAN interrupt */
    CAN->IER |= CAN_IT;
    3116:	f246 4300 	movw	r3, #25600	; 0x6400
    311a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    311e:	f246 4200 	movw	r2, #25600	; 0x6400
    3122:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3126:	6951      	ldr	r1, [r2, #20]
    3128:	687a      	ldr	r2, [r7, #4]
    312a:	ea41 0202 	orr.w	r2, r1, r2
    312e:	615a      	str	r2, [r3, #20]
    3130:	e00e      	b.n	3150 <CAN_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected CAN interrupt */
    CAN->IER &= ~CAN_IT;
    3132:	f246 4300 	movw	r3, #25600	; 0x6400
    3136:	f2c4 0300 	movt	r3, #16384	; 0x4000
    313a:	f246 4200 	movw	r2, #25600	; 0x6400
    313e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3142:	6951      	ldr	r1, [r2, #20]
    3144:	687a      	ldr	r2, [r7, #4]
    3146:	ea6f 0202 	mvn.w	r2, r2
    314a:	ea01 0202 	and.w	r2, r1, r2
    314e:	615a      	str	r2, [r3, #20]
  }
}
    3150:	f107 070c 	add.w	r7, r7, #12
    3154:	46bd      	mov	sp, r7
    3156:	bc80      	pop	{r7}
    3158:	4770      	bx	lr
    315a:	bf00      	nop

0000315c <CAN_Transmit>:
* Output         : None.
* Return         : The number of the mailbox that is used for transmission
*                  or CAN_NO_MB if there is no empty mailbox.
*******************************************************************************/
u8 CAN_Transmit(CanTxMsg* TxMessage)
{
    315c:	b480      	push	{r7}
    315e:	b085      	sub	sp, #20
    3160:	af00      	add	r7, sp, #0
    3162:	6078      	str	r0, [r7, #4]
  u8 TransmitMailbox = 0;
    3164:	f04f 0300 	mov.w	r3, #0
    3168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CAN->TSR&TSR_TME0) == TSR_TME0)
    316a:	f246 4300 	movw	r3, #25600	; 0x6400
    316e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3172:	689b      	ldr	r3, [r3, #8]
    3174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    3178:	2b00      	cmp	r3, #0
    317a:	d003      	beq.n	3184 <CAN_Transmit+0x28>
  {
    TransmitMailbox = 0;
    317c:	f04f 0300 	mov.w	r3, #0
    3180:	73fb      	strb	r3, [r7, #15]
    3182:	e01c      	b.n	31be <CAN_Transmit+0x62>
  }
  else if ((CAN->TSR&TSR_TME1) == TSR_TME1)
    3184:	f246 4300 	movw	r3, #25600	; 0x6400
    3188:	f2c4 0300 	movt	r3, #16384	; 0x4000
    318c:	689b      	ldr	r3, [r3, #8]
    318e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    3192:	2b00      	cmp	r3, #0
    3194:	d003      	beq.n	319e <CAN_Transmit+0x42>
  {
    TransmitMailbox = 1;
    3196:	f04f 0301 	mov.w	r3, #1
    319a:	73fb      	strb	r3, [r7, #15]
    319c:	e00f      	b.n	31be <CAN_Transmit+0x62>
  }
  else if ((CAN->TSR&TSR_TME2) == TSR_TME2)
    319e:	f246 4300 	movw	r3, #25600	; 0x6400
    31a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    31a6:	689b      	ldr	r3, [r3, #8]
    31a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    31ac:	2b00      	cmp	r3, #0
    31ae:	d003      	beq.n	31b8 <CAN_Transmit+0x5c>
  {
    TransmitMailbox = 2;
    31b0:	f04f 0302 	mov.w	r3, #2
    31b4:	73fb      	strb	r3, [r7, #15]
    31b6:	e002      	b.n	31be <CAN_Transmit+0x62>
  }
  else
  {
    TransmitMailbox = CAN_NO_MB;
    31b8:	f04f 0304 	mov.w	r3, #4
    31bc:	73fb      	strb	r3, [r7, #15]
  }

  if (TransmitMailbox != CAN_NO_MB)
    31be:	7bfb      	ldrb	r3, [r7, #15]
    31c0:	2b04      	cmp	r3, #4
    31c2:	f000 8113 	beq.w	33ec <CAN_Transmit+0x290>
  {
    /* Set up the Id */
    CAN->sTxMailBox[TransmitMailbox].TIR &= TMIDxR_TXRQ;
    31c6:	f246 4300 	movw	r3, #25600	; 0x6400
    31ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
    31ce:	7bf9      	ldrb	r1, [r7, #15]
    31d0:	f246 4200 	movw	r2, #25600	; 0x6400
    31d4:	f2c4 0200 	movt	r2, #16384	; 0x4000
    31d8:	7bf8      	ldrb	r0, [r7, #15]
    31da:	f100 0018 	add.w	r0, r0, #24
    31de:	ea4f 1000 	mov.w	r0, r0, lsl #4
    31e2:	4402      	add	r2, r0
    31e4:	6812      	ldr	r2, [r2, #0]
    31e6:	f002 0201 	and.w	r2, r2, #1
    31ea:	f101 0118 	add.w	r1, r1, #24
    31ee:	ea4f 1101 	mov.w	r1, r1, lsl #4
    31f2:	440b      	add	r3, r1
    31f4:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_ID_STD)
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	7a1b      	ldrb	r3, [r3, #8]
    31fa:	2b00      	cmp	r3, #0
    31fc:	d131      	bne.n	3262 <CAN_Transmit+0x106>
    {
      TxMessage->StdId &= (u32)0x000007FF;
    31fe:	687b      	ldr	r3, [r7, #4]
    3200:	681b      	ldr	r3, [r3, #0]
    3202:	ea4f 5343 	mov.w	r3, r3, lsl #21
    3206:	ea4f 5353 	mov.w	r3, r3, lsr #21
    320a:	687a      	ldr	r2, [r7, #4]
    320c:	6013      	str	r3, [r2, #0]
      TxMessage->StdId = TxMessage->StdId << 21;
    320e:	687b      	ldr	r3, [r7, #4]
    3210:	681b      	ldr	r3, [r3, #0]
    3212:	ea4f 5243 	mov.w	r2, r3, lsl #21
    3216:	687b      	ldr	r3, [r7, #4]
    3218:	601a      	str	r2, [r3, #0]
      
      CAN->sTxMailBox[TransmitMailbox].TIR |= (TxMessage->StdId | TxMessage->IDE |
    321a:	f246 4300 	movw	r3, #25600	; 0x6400
    321e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3222:	7bf9      	ldrb	r1, [r7, #15]
    3224:	f246 4200 	movw	r2, #25600	; 0x6400
    3228:	f2c4 0200 	movt	r2, #16384	; 0x4000
    322c:	7bf8      	ldrb	r0, [r7, #15]
    322e:	f100 0018 	add.w	r0, r0, #24
    3232:	ea4f 1000 	mov.w	r0, r0, lsl #4
    3236:	4402      	add	r2, r0
    3238:	6810      	ldr	r0, [r2, #0]
    323a:	687a      	ldr	r2, [r7, #4]
    323c:	f8d2 c000 	ldr.w	ip, [r2]
    3240:	687a      	ldr	r2, [r7, #4]
    3242:	7a12      	ldrb	r2, [r2, #8]
    3244:	ea4c 0c02 	orr.w	ip, ip, r2
    3248:	687a      	ldr	r2, [r7, #4]
    324a:	7a52      	ldrb	r2, [r2, #9]
    324c:	ea4c 0202 	orr.w	r2, ip, r2
    3250:	ea40 0202 	orr.w	r2, r0, r2
    3254:	f101 0118 	add.w	r1, r1, #24
    3258:	ea4f 1101 	mov.w	r1, r1, lsl #4
    325c:	440b      	add	r3, r1
    325e:	601a      	str	r2, [r3, #0]
    3260:	e02e      	b.n	32c0 <CAN_Transmit+0x164>
                                               TxMessage->RTR);
    }
    else
    {
      TxMessage->ExtId &= (u32)0x1FFFFFFF;
    3262:	687b      	ldr	r3, [r7, #4]
    3264:	685b      	ldr	r3, [r3, #4]
    3266:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
    326a:	687b      	ldr	r3, [r7, #4]
    326c:	605a      	str	r2, [r3, #4]
      TxMessage->ExtId <<= 3;
    326e:	687b      	ldr	r3, [r7, #4]
    3270:	685b      	ldr	r3, [r3, #4]
    3272:	ea4f 02c3 	mov.w	r2, r3, lsl #3
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	605a      	str	r2, [r3, #4]

      CAN->sTxMailBox[TransmitMailbox].TIR |= (TxMessage->ExtId | TxMessage->IDE | 
    327a:	f246 4300 	movw	r3, #25600	; 0x6400
    327e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3282:	7bf9      	ldrb	r1, [r7, #15]
    3284:	f246 4200 	movw	r2, #25600	; 0x6400
    3288:	f2c4 0200 	movt	r2, #16384	; 0x4000
    328c:	7bf8      	ldrb	r0, [r7, #15]
    328e:	f100 0018 	add.w	r0, r0, #24
    3292:	ea4f 1000 	mov.w	r0, r0, lsl #4
    3296:	4402      	add	r2, r0
    3298:	6810      	ldr	r0, [r2, #0]
    329a:	687a      	ldr	r2, [r7, #4]
    329c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    32a0:	687a      	ldr	r2, [r7, #4]
    32a2:	7a12      	ldrb	r2, [r2, #8]
    32a4:	ea4c 0c02 	orr.w	ip, ip, r2
    32a8:	687a      	ldr	r2, [r7, #4]
    32aa:	7a52      	ldrb	r2, [r2, #9]
    32ac:	ea4c 0202 	orr.w	r2, ip, r2
    32b0:	ea40 0202 	orr.w	r2, r0, r2
    32b4:	f101 0118 	add.w	r1, r1, #24
    32b8:	ea4f 1101 	mov.w	r1, r1, lsl #4
    32bc:	440b      	add	r3, r1
    32be:	601a      	str	r2, [r3, #0]
                                               TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (u8)0x0000000F;
    32c0:	687b      	ldr	r3, [r7, #4]
    32c2:	7a9b      	ldrb	r3, [r3, #10]
    32c4:	f003 030f 	and.w	r3, r3, #15
    32c8:	687a      	ldr	r2, [r7, #4]
    32ca:	7293      	strb	r3, [r2, #10]
    CAN->sTxMailBox[TransmitMailbox].TDTR &= (u32)0xFFFFFFF0;
    32cc:	f246 4300 	movw	r3, #25600	; 0x6400
    32d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    32d4:	7bf9      	ldrb	r1, [r7, #15]
    32d6:	f246 4200 	movw	r2, #25600	; 0x6400
    32da:	f2c4 0200 	movt	r2, #16384	; 0x4000
    32de:	7bf8      	ldrb	r0, [r7, #15]
    32e0:	f100 0018 	add.w	r0, r0, #24
    32e4:	ea4f 1000 	mov.w	r0, r0, lsl #4
    32e8:	4402      	add	r2, r0
    32ea:	f102 0204 	add.w	r2, r2, #4
    32ee:	6812      	ldr	r2, [r2, #0]
    32f0:	f022 020f 	bic.w	r2, r2, #15
    32f4:	f101 0118 	add.w	r1, r1, #24
    32f8:	ea4f 1101 	mov.w	r1, r1, lsl #4
    32fc:	440b      	add	r3, r1
    32fe:	f103 0304 	add.w	r3, r3, #4
    3302:	601a      	str	r2, [r3, #0]
    CAN->sTxMailBox[TransmitMailbox].TDTR |= TxMessage->DLC;
    3304:	f246 4300 	movw	r3, #25600	; 0x6400
    3308:	f2c4 0300 	movt	r3, #16384	; 0x4000
    330c:	7bf9      	ldrb	r1, [r7, #15]
    330e:	f246 4200 	movw	r2, #25600	; 0x6400
    3312:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3316:	7bf8      	ldrb	r0, [r7, #15]
    3318:	f100 0018 	add.w	r0, r0, #24
    331c:	ea4f 1000 	mov.w	r0, r0, lsl #4
    3320:	4402      	add	r2, r0
    3322:	f102 0204 	add.w	r2, r2, #4
    3326:	6810      	ldr	r0, [r2, #0]
    3328:	687a      	ldr	r2, [r7, #4]
    332a:	7a92      	ldrb	r2, [r2, #10]
    332c:	ea40 0202 	orr.w	r2, r0, r2
    3330:	f101 0118 	add.w	r1, r1, #24
    3334:	ea4f 1101 	mov.w	r1, r1, lsl #4
    3338:	440b      	add	r3, r1
    333a:	f103 0304 	add.w	r3, r3, #4
    333e:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CAN->sTxMailBox[TransmitMailbox].TDLR = (((u32)TxMessage->Data[3] << 24) | 
    3340:	f246 4300 	movw	r3, #25600	; 0x6400
    3344:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3348:	7bf9      	ldrb	r1, [r7, #15]
    334a:	687a      	ldr	r2, [r7, #4]
    334c:	7b92      	ldrb	r2, [r2, #14]
    334e:	ea4f 6002 	mov.w	r0, r2, lsl #24
                                             ((u32)TxMessage->Data[2] << 16) |
    3352:	687a      	ldr	r2, [r7, #4]
    3354:	7b52      	ldrb	r2, [r2, #13]
    3356:	ea4f 4202 	mov.w	r2, r2, lsl #16
    335a:	ea40 0002 	orr.w	r0, r0, r2
                                             ((u32)TxMessage->Data[1] << 8) | 
    335e:	687a      	ldr	r2, [r7, #4]
    3360:	7b12      	ldrb	r2, [r2, #12]
    3362:	ea4f 2202 	mov.w	r2, r2, lsl #8
    3366:	ea40 0002 	orr.w	r0, r0, r2
                                             ((u32)TxMessage->Data[0]));
    336a:	687a      	ldr	r2, [r7, #4]
    336c:	7ad2      	ldrb	r2, [r2, #11]
    TxMessage->DLC &= (u8)0x0000000F;
    CAN->sTxMailBox[TransmitMailbox].TDTR &= (u32)0xFFFFFFF0;
    CAN->sTxMailBox[TransmitMailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CAN->sTxMailBox[TransmitMailbox].TDLR = (((u32)TxMessage->Data[3] << 24) | 
    336e:	ea40 0202 	orr.w	r2, r0, r2
    3372:	ea4f 1101 	mov.w	r1, r1, lsl #4
    3376:	440b      	add	r3, r1
    3378:	f503 73c4 	add.w	r3, r3, #392	; 0x188
    337c:	601a      	str	r2, [r3, #0]
                                             ((u32)TxMessage->Data[2] << 16) |
                                             ((u32)TxMessage->Data[1] << 8) | 
                                             ((u32)TxMessage->Data[0]));
    CAN->sTxMailBox[TransmitMailbox].TDHR = (((u32)TxMessage->Data[7] << 24) | 
    337e:	f246 4300 	movw	r3, #25600	; 0x6400
    3382:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3386:	7bf9      	ldrb	r1, [r7, #15]
    3388:	687a      	ldr	r2, [r7, #4]
    338a:	7c92      	ldrb	r2, [r2, #18]
    338c:	ea4f 6002 	mov.w	r0, r2, lsl #24
                                             ((u32)TxMessage->Data[6] << 16) |
    3390:	687a      	ldr	r2, [r7, #4]
    3392:	7c52      	ldrb	r2, [r2, #17]
    3394:	ea4f 4202 	mov.w	r2, r2, lsl #16
    3398:	ea40 0002 	orr.w	r0, r0, r2
                                             ((u32)TxMessage->Data[5] << 8) |
    339c:	687a      	ldr	r2, [r7, #4]
    339e:	7c12      	ldrb	r2, [r2, #16]
    33a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    33a4:	ea40 0002 	orr.w	r0, r0, r2
                                             ((u32)TxMessage->Data[4]));
    33a8:	687a      	ldr	r2, [r7, #4]
    33aa:	7bd2      	ldrb	r2, [r2, #15]
    /* Set up the data field */
    CAN->sTxMailBox[TransmitMailbox].TDLR = (((u32)TxMessage->Data[3] << 24) | 
                                             ((u32)TxMessage->Data[2] << 16) |
                                             ((u32)TxMessage->Data[1] << 8) | 
                                             ((u32)TxMessage->Data[0]));
    CAN->sTxMailBox[TransmitMailbox].TDHR = (((u32)TxMessage->Data[7] << 24) | 
    33ac:	ea40 0202 	orr.w	r2, r0, r2
    33b0:	ea4f 1101 	mov.w	r1, r1, lsl #4
    33b4:	440b      	add	r3, r1
    33b6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
    33ba:	601a      	str	r2, [r3, #0]
                                             ((u32)TxMessage->Data[6] << 16) |
                                             ((u32)TxMessage->Data[5] << 8) |
                                             ((u32)TxMessage->Data[4]));

    /* Request transmission */
    CAN->sTxMailBox[TransmitMailbox].TIR |= TMIDxR_TXRQ;
    33bc:	f246 4300 	movw	r3, #25600	; 0x6400
    33c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    33c4:	7bf9      	ldrb	r1, [r7, #15]
    33c6:	f246 4200 	movw	r2, #25600	; 0x6400
    33ca:	f2c4 0200 	movt	r2, #16384	; 0x4000
    33ce:	7bf8      	ldrb	r0, [r7, #15]
    33d0:	f100 0018 	add.w	r0, r0, #24
    33d4:	ea4f 1000 	mov.w	r0, r0, lsl #4
    33d8:	4402      	add	r2, r0
    33da:	6812      	ldr	r2, [r2, #0]
    33dc:	f042 0201 	orr.w	r2, r2, #1
    33e0:	f101 0118 	add.w	r1, r1, #24
    33e4:	ea4f 1101 	mov.w	r1, r1, lsl #4
    33e8:	440b      	add	r3, r1
    33ea:	601a      	str	r2, [r3, #0]
  }

  return TransmitMailbox;
    33ec:	7bfb      	ldrb	r3, [r7, #15]
}
    33ee:	4618      	mov	r0, r3
    33f0:	f107 0714 	add.w	r7, r7, #20
    33f4:	46bd      	mov	sp, r7
    33f6:	bc80      	pop	{r7}
    33f8:	4770      	bx	lr
    33fa:	bf00      	nop

000033fc <CAN_TransmitStatus>:
* Output         : None.
* Return         : CANTXOK if the CAN driver transmits the message, CANTXFAILED
*                  in an other case.
*******************************************************************************/
u8 CAN_TransmitStatus(u8 TransmitMailbox)
{
    33fc:	b480      	push	{r7}
    33fe:	b085      	sub	sp, #20
    3400:	af00      	add	r7, sp, #0
    3402:	4603      	mov	r3, r0
    3404:	71fb      	strb	r3, [r7, #7]
  /* RQCP, TXOK and TME bits */
  u8 State = 0;
    3406:	f04f 0300 	mov.w	r3, #0
    340a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));

  switch (TransmitMailbox)
    340c:	79fb      	ldrb	r3, [r7, #7]
    340e:	2b01      	cmp	r3, #1
    3410:	d032      	beq.n	3478 <CAN_TransmitStatus+0x7c>
    3412:	2b02      	cmp	r3, #2
    3414:	d05b      	beq.n	34ce <CAN_TransmitStatus+0xd2>
    3416:	2b00      	cmp	r3, #0
    3418:	f040 8084 	bne.w	3524 <CAN_TransmitStatus+0x128>
  {
    case (0): State |= (u8)((CAN->TSR & TSR_RQCP0) << 2);
    341c:	f246 4300 	movw	r3, #25600	; 0x6400
    3420:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3424:	689b      	ldr	r3, [r3, #8]
    3426:	b2db      	uxtb	r3, r3
    3428:	f003 0301 	and.w	r3, r3, #1
    342c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3430:	b2da      	uxtb	r2, r3
    3432:	7bfb      	ldrb	r3, [r7, #15]
    3434:	ea42 0303 	orr.w	r3, r2, r3
    3438:	73fb      	strb	r3, [r7, #15]
      State |= (u8)((CAN->TSR & TSR_TXOK0) >> 0);
    343a:	f246 4300 	movw	r3, #25600	; 0x6400
    343e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3442:	689b      	ldr	r3, [r3, #8]
    3444:	b2db      	uxtb	r3, r3
    3446:	b2db      	uxtb	r3, r3
    3448:	f003 0302 	and.w	r3, r3, #2
    344c:	7bf9      	ldrb	r1, [r7, #15]
    344e:	461a      	mov	r2, r3
    3450:	460b      	mov	r3, r1
    3452:	ea42 0303 	orr.w	r3, r2, r3
    3456:	b2db      	uxtb	r3, r3
    3458:	73fb      	strb	r3, [r7, #15]
      State |= (u8)((CAN->TSR & TSR_TME0) >> 26);
    345a:	f246 4300 	movw	r3, #25600	; 0x6400
    345e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3462:	689b      	ldr	r3, [r3, #8]
    3464:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    3468:	ea4f 6393 	mov.w	r3, r3, lsr #26
    346c:	b2da      	uxtb	r2, r3
    346e:	7bfb      	ldrb	r3, [r7, #15]
    3470:	ea42 0303 	orr.w	r3, r2, r3
    3474:	73fb      	strb	r3, [r7, #15]
      break;
    3476:	e058      	b.n	352a <CAN_TransmitStatus+0x12e>
    case (1): State |= (u8)((CAN->TSR & TSR_RQCP1) >> 6);
    3478:	f246 4300 	movw	r3, #25600	; 0x6400
    347c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3480:	689b      	ldr	r3, [r3, #8]
    3482:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3486:	ea4f 1393 	mov.w	r3, r3, lsr #6
    348a:	b2da      	uxtb	r2, r3
    348c:	7bfb      	ldrb	r3, [r7, #15]
    348e:	ea42 0303 	orr.w	r3, r2, r3
    3492:	73fb      	strb	r3, [r7, #15]
      State |= (u8)((CAN->TSR & TSR_TXOK1) >> 8);
    3494:	f246 4300 	movw	r3, #25600	; 0x6400
    3498:	f2c4 0300 	movt	r3, #16384	; 0x4000
    349c:	689b      	ldr	r3, [r3, #8]
    349e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    34a2:	ea4f 2313 	mov.w	r3, r3, lsr #8
    34a6:	b2da      	uxtb	r2, r3
    34a8:	7bfb      	ldrb	r3, [r7, #15]
    34aa:	ea42 0303 	orr.w	r3, r2, r3
    34ae:	73fb      	strb	r3, [r7, #15]
      State |= (u8)((CAN->TSR & TSR_TME1) >> 27);
    34b0:	f246 4300 	movw	r3, #25600	; 0x6400
    34b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    34b8:	689b      	ldr	r3, [r3, #8]
    34ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    34be:	ea4f 63d3 	mov.w	r3, r3, lsr #27
    34c2:	b2da      	uxtb	r2, r3
    34c4:	7bfb      	ldrb	r3, [r7, #15]
    34c6:	ea42 0303 	orr.w	r3, r2, r3
    34ca:	73fb      	strb	r3, [r7, #15]
      break;
    34cc:	e02d      	b.n	352a <CAN_TransmitStatus+0x12e>
    case (2): State |= (u8)((CAN->TSR & TSR_RQCP2) >> 14);
    34ce:	f246 4300 	movw	r3, #25600	; 0x6400
    34d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    34d6:	689b      	ldr	r3, [r3, #8]
    34d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    34dc:	ea4f 3393 	mov.w	r3, r3, lsr #14
    34e0:	b2da      	uxtb	r2, r3
    34e2:	7bfb      	ldrb	r3, [r7, #15]
    34e4:	ea42 0303 	orr.w	r3, r2, r3
    34e8:	73fb      	strb	r3, [r7, #15]
      State |= (u8)((CAN->TSR & TSR_TXOK2) >> 16);
    34ea:	f246 4300 	movw	r3, #25600	; 0x6400
    34ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
    34f2:	689b      	ldr	r3, [r3, #8]
    34f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    34f8:	ea4f 4313 	mov.w	r3, r3, lsr #16
    34fc:	b2da      	uxtb	r2, r3
    34fe:	7bfb      	ldrb	r3, [r7, #15]
    3500:	ea42 0303 	orr.w	r3, r2, r3
    3504:	73fb      	strb	r3, [r7, #15]
      State |= (u8)((CAN->TSR & TSR_TME2) >> 28);
    3506:	f246 4300 	movw	r3, #25600	; 0x6400
    350a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    350e:	689b      	ldr	r3, [r3, #8]
    3510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
    3514:	ea4f 7313 	mov.w	r3, r3, lsr #28
    3518:	b2da      	uxtb	r2, r3
    351a:	7bfb      	ldrb	r3, [r7, #15]
    351c:	ea42 0303 	orr.w	r3, r2, r3
    3520:	73fb      	strb	r3, [r7, #15]
      break;
    3522:	e002      	b.n	352a <CAN_TransmitStatus+0x12e>
    default:
      State = CANTXFAILED;
    3524:	f04f 0300 	mov.w	r3, #0
    3528:	73fb      	strb	r3, [r7, #15]
      break;
  }

  switch (State)
    352a:	7bfb      	ldrb	r3, [r7, #15]
    352c:	2b05      	cmp	r3, #5
    352e:	d007      	beq.n	3540 <CAN_TransmitStatus+0x144>
    3530:	2b07      	cmp	r3, #7
    3532:	d009      	beq.n	3548 <CAN_TransmitStatus+0x14c>
    3534:	2b00      	cmp	r3, #0
    3536:	d10b      	bne.n	3550 <CAN_TransmitStatus+0x154>
  {
      /* transmit pending  */
    case (0x0): State = CANTXPENDING;
    3538:	f04f 0302 	mov.w	r3, #2
    353c:	73fb      	strb	r3, [r7, #15]
      break;
    353e:	e00a      	b.n	3556 <CAN_TransmitStatus+0x15a>
      /* transmit failed  */
    case (0x5): State = CANTXFAILED;
    3540:	f04f 0300 	mov.w	r3, #0
    3544:	73fb      	strb	r3, [r7, #15]
      break;
    3546:	e006      	b.n	3556 <CAN_TransmitStatus+0x15a>
      /* transmit succedeed  */
    case (0x7): State = CANTXOK;
    3548:	f04f 0301 	mov.w	r3, #1
    354c:	73fb      	strb	r3, [r7, #15]
      break;
    354e:	e002      	b.n	3556 <CAN_TransmitStatus+0x15a>
    default:
      State = CANTXFAILED;
    3550:	f04f 0300 	mov.w	r3, #0
    3554:	73fb      	strb	r3, [r7, #15]
      break;
  }

  return State;
    3556:	7bfb      	ldrb	r3, [r7, #15]
}
    3558:	4618      	mov	r0, r3
    355a:	f107 0714 	add.w	r7, r7, #20
    355e:	46bd      	mov	sp, r7
    3560:	bc80      	pop	{r7}
    3562:	4770      	bx	lr

00003564 <CAN_CancelTransmit>:
* Input          : Mailbox number.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CAN_CancelTransmit(u8 Mailbox)
{
    3564:	b480      	push	{r7}
    3566:	b083      	sub	sp, #12
    3568:	af00      	add	r7, sp, #0
    356a:	4603      	mov	r3, r0
    356c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));

  /* abort transmission */
  switch (Mailbox)
    356e:	79fb      	ldrb	r3, [r7, #7]
    3570:	2b01      	cmp	r3, #1
    3572:	d010      	beq.n	3596 <CAN_CancelTransmit+0x32>
    3574:	2b02      	cmp	r3, #2
    3576:	d01b      	beq.n	35b0 <CAN_CancelTransmit+0x4c>
    3578:	2b00      	cmp	r3, #0
    357a:	d125      	bne.n	35c8 <CAN_CancelTransmit+0x64>
  {
    case (0): CAN->TSR |= TSR_ABRQ0;
    357c:	f246 4300 	movw	r3, #25600	; 0x6400
    3580:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3584:	f246 4200 	movw	r2, #25600	; 0x6400
    3588:	f2c4 0200 	movt	r2, #16384	; 0x4000
    358c:	6892      	ldr	r2, [r2, #8]
    358e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    3592:	609a      	str	r2, [r3, #8]
      break;
    3594:	e018      	b.n	35c8 <CAN_CancelTransmit+0x64>
    case (1): CAN->TSR |= TSR_ABRQ1;
    3596:	f246 4300 	movw	r3, #25600	; 0x6400
    359a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    359e:	f246 4200 	movw	r2, #25600	; 0x6400
    35a2:	f2c4 0200 	movt	r2, #16384	; 0x4000
    35a6:	6892      	ldr	r2, [r2, #8]
    35a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
    35ac:	609a      	str	r2, [r3, #8]
      break;
    35ae:	e00b      	b.n	35c8 <CAN_CancelTransmit+0x64>
    case (2): CAN->TSR |= TSR_ABRQ2;
    35b0:	f246 4300 	movw	r3, #25600	; 0x6400
    35b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    35b8:	f246 4200 	movw	r2, #25600	; 0x6400
    35bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
    35c0:	6892      	ldr	r2, [r2, #8]
    35c2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    35c6:	609a      	str	r2, [r3, #8]
      break;
    default:
      break;
  }
}
    35c8:	f107 070c 	add.w	r7, r7, #12
    35cc:	46bd      	mov	sp, r7
    35ce:	bc80      	pop	{r7}
    35d0:	4770      	bx	lr
    35d2:	bf00      	nop

000035d4 <CAN_FIFORelease>:
* Input          : FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CAN_FIFORelease(u8 FIFONumber)
{
    35d4:	b480      	push	{r7}
    35d6:	b083      	sub	sp, #12
    35d8:	af00      	add	r7, sp, #0
    35da:	4603      	mov	r3, r0
    35dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
    35de:	79fb      	ldrb	r3, [r7, #7]
    35e0:	2b00      	cmp	r3, #0
    35e2:	d107      	bne.n	35f4 <CAN_FIFORelease+0x20>
  {
    CAN->RF0R = RF0R_RFOM0;
    35e4:	f246 4300 	movw	r3, #25600	; 0x6400
    35e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    35ec:	f04f 0220 	mov.w	r2, #32
    35f0:	60da      	str	r2, [r3, #12]
    35f2:	e006      	b.n	3602 <CAN_FIFORelease+0x2e>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CAN->RF1R = RF1R_RFOM1;
    35f4:	f246 4300 	movw	r3, #25600	; 0x6400
    35f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    35fc:	f04f 0220 	mov.w	r2, #32
    3600:	611a      	str	r2, [r3, #16]
  }
}
    3602:	f107 070c 	add.w	r7, r7, #12
    3606:	46bd      	mov	sp, r7
    3608:	bc80      	pop	{r7}
    360a:	4770      	bx	lr

0000360c <CAN_MessagePending>:
* Input          : FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
* Output         : None.
* Return         : NbMessage which is the number of pending message.
*******************************************************************************/
u8 CAN_MessagePending(u8 FIFONumber)
{
    360c:	b480      	push	{r7}
    360e:	b085      	sub	sp, #20
    3610:	af00      	add	r7, sp, #0
    3612:	4603      	mov	r3, r0
    3614:	71fb      	strb	r3, [r7, #7]
  u8 MessagePending=0;
    3616:	f04f 0300 	mov.w	r3, #0
    361a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  if (FIFONumber == CAN_FIFO0)
    361c:	79fb      	ldrb	r3, [r7, #7]
    361e:	2b00      	cmp	r3, #0
    3620:	d109      	bne.n	3636 <CAN_MessagePending+0x2a>
  {
    MessagePending = (u8)(CAN->RF0R&(u32)0x03);
    3622:	f246 4300 	movw	r3, #25600	; 0x6400
    3626:	f2c4 0300 	movt	r3, #16384	; 0x4000
    362a:	68db      	ldr	r3, [r3, #12]
    362c:	b2db      	uxtb	r3, r3
    362e:	f003 0303 	and.w	r3, r3, #3
    3632:	73fb      	strb	r3, [r7, #15]
    3634:	e00f      	b.n	3656 <CAN_MessagePending+0x4a>
  }
  else if (FIFONumber == CAN_FIFO1)
    3636:	79fb      	ldrb	r3, [r7, #7]
    3638:	2b01      	cmp	r3, #1
    363a:	d109      	bne.n	3650 <CAN_MessagePending+0x44>
  {
    MessagePending = (u8)(CAN->RF1R&(u32)0x03);
    363c:	f246 4300 	movw	r3, #25600	; 0x6400
    3640:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3644:	691b      	ldr	r3, [r3, #16]
    3646:	b2db      	uxtb	r3, r3
    3648:	f003 0303 	and.w	r3, r3, #3
    364c:	73fb      	strb	r3, [r7, #15]
    364e:	e002      	b.n	3656 <CAN_MessagePending+0x4a>
  }
  else
  {
    MessagePending = 0;
    3650:	f04f 0300 	mov.w	r3, #0
    3654:	73fb      	strb	r3, [r7, #15]
  }
  return MessagePending;
    3656:	7bfb      	ldrb	r3, [r7, #15]
}
    3658:	4618      	mov	r0, r3
    365a:	f107 0714 	add.w	r7, r7, #20
    365e:	46bd      	mov	sp, r7
    3660:	bc80      	pop	{r7}
    3662:	4770      	bx	lr

00003664 <CAN_Receive>:
* Output         : RxMessage: pointer to a structure which contains CAN Id,
*                  CAN DLC, CAN datas and FMI number.
* Return         : None.
*******************************************************************************/
void CAN_Receive(u8 FIFONumber, CanRxMsg* RxMessage)
{
    3664:	b580      	push	{r7, lr}
    3666:	b082      	sub	sp, #8
    3668:	af00      	add	r7, sp, #0
    366a:	4603      	mov	r3, r0
    366c:	6039      	str	r1, [r7, #0]
    366e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Get the Id */
  RxMessage->IDE = (u8)0x04 & CAN->sFIFOMailBox[FIFONumber].RIR;
    3670:	f246 4300 	movw	r3, #25600	; 0x6400
    3674:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3678:	79fa      	ldrb	r2, [r7, #7]
    367a:	f102 021b 	add.w	r2, r2, #27
    367e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    3682:	4413      	add	r3, r2
    3684:	681b      	ldr	r3, [r3, #0]
    3686:	b2db      	uxtb	r3, r3
    3688:	f003 0304 	and.w	r3, r3, #4
    368c:	683a      	ldr	r2, [r7, #0]
    368e:	7213      	strb	r3, [r2, #8]
  if (RxMessage->IDE == CAN_ID_STD)
    3690:	683b      	ldr	r3, [r7, #0]
    3692:	7a1b      	ldrb	r3, [r3, #8]
    3694:	2b00      	cmp	r3, #0
    3696:	d10f      	bne.n	36b8 <CAN_Receive+0x54>
  {
    RxMessage->StdId = (u32)0x000007FF & (CAN->sFIFOMailBox[FIFONumber].RIR >> 21);
    3698:	f246 4300 	movw	r3, #25600	; 0x6400
    369c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    36a0:	79fa      	ldrb	r2, [r7, #7]
    36a2:	f102 021b 	add.w	r2, r2, #27
    36a6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    36aa:	4413      	add	r3, r2
    36ac:	681b      	ldr	r3, [r3, #0]
    36ae:	ea4f 5253 	mov.w	r2, r3, lsr #21
    36b2:	683b      	ldr	r3, [r7, #0]
    36b4:	601a      	str	r2, [r3, #0]
    36b6:	e00e      	b.n	36d6 <CAN_Receive+0x72>
  }
  else
  {
    RxMessage->ExtId = (u32)0x1FFFFFFF & (CAN->sFIFOMailBox[FIFONumber].RIR >> 3);
    36b8:	f246 4300 	movw	r3, #25600	; 0x6400
    36bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    36c0:	79fa      	ldrb	r2, [r7, #7]
    36c2:	f102 021b 	add.w	r2, r2, #27
    36c6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    36ca:	4413      	add	r3, r2
    36cc:	681b      	ldr	r3, [r3, #0]
    36ce:	ea4f 02d3 	mov.w	r2, r3, lsr #3
    36d2:	683b      	ldr	r3, [r7, #0]
    36d4:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (u8)0x02 & CAN->sFIFOMailBox[FIFONumber].RIR;
    36d6:	f246 4300 	movw	r3, #25600	; 0x6400
    36da:	f2c4 0300 	movt	r3, #16384	; 0x4000
    36de:	79fa      	ldrb	r2, [r7, #7]
    36e0:	f102 021b 	add.w	r2, r2, #27
    36e4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    36e8:	4413      	add	r3, r2
    36ea:	681b      	ldr	r3, [r3, #0]
    36ec:	b2db      	uxtb	r3, r3
    36ee:	f003 0302 	and.w	r3, r3, #2
    36f2:	683a      	ldr	r2, [r7, #0]
    36f4:	7253      	strb	r3, [r2, #9]

  /* Get the DLC */
  RxMessage->DLC = (u8)0x0F & CAN->sFIFOMailBox[FIFONumber].RDTR;
    36f6:	f246 4300 	movw	r3, #25600	; 0x6400
    36fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    36fe:	79fa      	ldrb	r2, [r7, #7]
    3700:	f102 021b 	add.w	r2, r2, #27
    3704:	ea4f 1202 	mov.w	r2, r2, lsl #4
    3708:	4413      	add	r3, r2
    370a:	f103 0304 	add.w	r3, r3, #4
    370e:	681b      	ldr	r3, [r3, #0]
    3710:	b2db      	uxtb	r3, r3
    3712:	f003 030f 	and.w	r3, r3, #15
    3716:	683a      	ldr	r2, [r7, #0]
    3718:	7293      	strb	r3, [r2, #10]

  /* Get the FMI */
  RxMessage->FMI = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDTR >> 8);
    371a:	f246 4300 	movw	r3, #25600	; 0x6400
    371e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3722:	79fa      	ldrb	r2, [r7, #7]
    3724:	f102 021b 	add.w	r2, r2, #27
    3728:	ea4f 1202 	mov.w	r2, r2, lsl #4
    372c:	4413      	add	r3, r2
    372e:	f103 0304 	add.w	r3, r3, #4
    3732:	681b      	ldr	r3, [r3, #0]
    3734:	ea4f 2313 	mov.w	r3, r3, lsr #8
    3738:	b2da      	uxtb	r2, r3
    373a:	683b      	ldr	r3, [r7, #0]
    373c:	74da      	strb	r2, [r3, #19]

  /* Get the data field */
  RxMessage->Data[0] = (u8)0xFF & CAN->sFIFOMailBox[FIFONumber].RDLR;
    373e:	f246 4300 	movw	r3, #25600	; 0x6400
    3742:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3746:	79fa      	ldrb	r2, [r7, #7]
    3748:	ea4f 1202 	mov.w	r2, r2, lsl #4
    374c:	4413      	add	r3, r2
    374e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
    3752:	681b      	ldr	r3, [r3, #0]
    3754:	b2da      	uxtb	r2, r3
    3756:	683b      	ldr	r3, [r7, #0]
    3758:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDLR >> 8);
    375a:	f246 4300 	movw	r3, #25600	; 0x6400
    375e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3762:	79fa      	ldrb	r2, [r7, #7]
    3764:	ea4f 1202 	mov.w	r2, r2, lsl #4
    3768:	4413      	add	r3, r2
    376a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
    376e:	681b      	ldr	r3, [r3, #0]
    3770:	ea4f 2313 	mov.w	r3, r3, lsr #8
    3774:	b2da      	uxtb	r2, r3
    3776:	683b      	ldr	r3, [r7, #0]
    3778:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDLR >> 16);
    377a:	f246 4300 	movw	r3, #25600	; 0x6400
    377e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3782:	79fa      	ldrb	r2, [r7, #7]
    3784:	ea4f 1202 	mov.w	r2, r2, lsl #4
    3788:	4413      	add	r3, r2
    378a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
    378e:	681b      	ldr	r3, [r3, #0]
    3790:	ea4f 4313 	mov.w	r3, r3, lsr #16
    3794:	b2da      	uxtb	r2, r3
    3796:	683b      	ldr	r3, [r7, #0]
    3798:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDLR >> 24);
    379a:	f246 4300 	movw	r3, #25600	; 0x6400
    379e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    37a2:	79fa      	ldrb	r2, [r7, #7]
    37a4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    37a8:	4413      	add	r3, r2
    37aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
    37ae:	681b      	ldr	r3, [r3, #0]
    37b0:	ea4f 6313 	mov.w	r3, r3, lsr #24
    37b4:	b2da      	uxtb	r2, r3
    37b6:	683b      	ldr	r3, [r7, #0]
    37b8:	739a      	strb	r2, [r3, #14]

  RxMessage->Data[4] = (u8)0xFF & CAN->sFIFOMailBox[FIFONumber].RDHR;
    37ba:	f246 4300 	movw	r3, #25600	; 0x6400
    37be:	f2c4 0300 	movt	r3, #16384	; 0x4000
    37c2:	79fa      	ldrb	r2, [r7, #7]
    37c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    37c8:	4413      	add	r3, r2
    37ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
    37ce:	681b      	ldr	r3, [r3, #0]
    37d0:	b2da      	uxtb	r2, r3
    37d2:	683b      	ldr	r3, [r7, #0]
    37d4:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDHR >> 8);
    37d6:	f246 4300 	movw	r3, #25600	; 0x6400
    37da:	f2c4 0300 	movt	r3, #16384	; 0x4000
    37de:	79fa      	ldrb	r2, [r7, #7]
    37e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    37e4:	4413      	add	r3, r2
    37e6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
    37ea:	681b      	ldr	r3, [r3, #0]
    37ec:	ea4f 2313 	mov.w	r3, r3, lsr #8
    37f0:	b2da      	uxtb	r2, r3
    37f2:	683b      	ldr	r3, [r7, #0]
    37f4:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDHR >> 16);
    37f6:	f246 4300 	movw	r3, #25600	; 0x6400
    37fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    37fe:	79fa      	ldrb	r2, [r7, #7]
    3800:	ea4f 1202 	mov.w	r2, r2, lsl #4
    3804:	4413      	add	r3, r2
    3806:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
    380a:	681b      	ldr	r3, [r3, #0]
    380c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    3810:	b2da      	uxtb	r2, r3
    3812:	683b      	ldr	r3, [r7, #0]
    3814:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (u8)0xFF & (CAN->sFIFOMailBox[FIFONumber].RDHR >> 24);
    3816:	f246 4300 	movw	r3, #25600	; 0x6400
    381a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    381e:	79fa      	ldrb	r2, [r7, #7]
    3820:	ea4f 1202 	mov.w	r2, r2, lsl #4
    3824:	4413      	add	r3, r2
    3826:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
    382a:	681b      	ldr	r3, [r3, #0]
    382c:	ea4f 6313 	mov.w	r3, r3, lsr #24
    3830:	b2da      	uxtb	r2, r3
    3832:	683b      	ldr	r3, [r7, #0]
    3834:	749a      	strb	r2, [r3, #18]

  /* Release the FIFO */
  CAN_FIFORelease(FIFONumber);
    3836:	79fb      	ldrb	r3, [r7, #7]
    3838:	4618      	mov	r0, r3
    383a:	f7ff fecb 	bl	35d4 <CAN_FIFORelease>
}
    383e:	f107 0708 	add.w	r7, r7, #8
    3842:	46bd      	mov	sp, r7
    3844:	bd80      	pop	{r7, pc}
    3846:	bf00      	nop

00003848 <CAN_Sleep>:
* Input          : None.
* Output         : None.
* Return         : CANSLEEPOK if sleep entered, CANSLEEPFAILED in an other case.
*******************************************************************************/
u8 CAN_Sleep(void)
{
    3848:	b480      	push	{r7}
    384a:	b083      	sub	sp, #12
    384c:	af00      	add	r7, sp, #0
  u8 SleepStatus = 0;
    384e:	f04f 0300 	mov.w	r3, #0
    3852:	71fb      	strb	r3, [r7, #7]

  /* Sleep mode entering request */
  CAN->MCR |= MCR_SLEEP;
    3854:	f246 4300 	movw	r3, #25600	; 0x6400
    3858:	f2c4 0300 	movt	r3, #16384	; 0x4000
    385c:	f246 4200 	movw	r2, #25600	; 0x6400
    3860:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3864:	6812      	ldr	r2, [r2, #0]
    3866:	f042 0202 	orr.w	r2, r2, #2
    386a:	601a      	str	r2, [r3, #0]
  SleepStatus = CANSLEEPOK;
    386c:	f04f 0301 	mov.w	r3, #1
    3870:	71fb      	strb	r3, [r7, #7]

  /* Sleep mode status */
  if ((CAN->MCR&MCR_SLEEP) == 0)
    3872:	f246 4300 	movw	r3, #25600	; 0x6400
    3876:	f2c4 0300 	movt	r3, #16384	; 0x4000
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	f003 0302 	and.w	r3, r3, #2
    3880:	2b00      	cmp	r3, #0
    3882:	d102      	bne.n	388a <CAN_Sleep+0x42>
  {
    /* Sleep mode not entered */
    SleepStatus = CANSLEEPFAILED;
    3884:	f04f 0300 	mov.w	r3, #0
    3888:	71fb      	strb	r3, [r7, #7]
  }

  /* At this step, sleep mode status */
  return SleepStatus;
    388a:	79fb      	ldrb	r3, [r7, #7]
}
    388c:	4618      	mov	r0, r3
    388e:	f107 070c 	add.w	r7, r7, #12
    3892:	46bd      	mov	sp, r7
    3894:	bc80      	pop	{r7}
    3896:	4770      	bx	lr

00003898 <CAN_WakeUp>:
* Output         : None.
* Return         : CANWAKEUPOK if sleep mode left, CANWAKEUPFAILED in an other
*                  case.
*******************************************************************************/
u8 CAN_WakeUp(void)
{
    3898:	b480      	push	{r7}
    389a:	b083      	sub	sp, #12
    389c:	af00      	add	r7, sp, #0
  u8 WakeUpStatus = 0;
    389e:	f04f 0300 	mov.w	r3, #0
    38a2:	71fb      	strb	r3, [r7, #7]

  /* Wake up request */
  CAN->MCR &= ~MCR_SLEEP;
    38a4:	f246 4300 	movw	r3, #25600	; 0x6400
    38a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
    38ac:	f246 4200 	movw	r2, #25600	; 0x6400
    38b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
    38b4:	6812      	ldr	r2, [r2, #0]
    38b6:	f022 0202 	bic.w	r2, r2, #2
    38ba:	601a      	str	r2, [r3, #0]
  WakeUpStatus = CANWAKEUPFAILED;
    38bc:	f04f 0300 	mov.w	r3, #0
    38c0:	71fb      	strb	r3, [r7, #7]

  /* Sleep mode status */
  if ((CAN->MCR&MCR_SLEEP) == 0)
    38c2:	f246 4300 	movw	r3, #25600	; 0x6400
    38c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    38ca:	681b      	ldr	r3, [r3, #0]
    38cc:	f003 0302 	and.w	r3, r3, #2
    38d0:	2b00      	cmp	r3, #0
    38d2:	d102      	bne.n	38da <CAN_WakeUp+0x42>
  {
    /* Sleep mode exited */
    WakeUpStatus = CANWAKEUPOK;
    38d4:	f04f 0301 	mov.w	r3, #1
    38d8:	71fb      	strb	r3, [r7, #7]
  }

  /* At this step, sleep mode status */
  return WakeUpStatus;
    38da:	79fb      	ldrb	r3, [r7, #7]
}
    38dc:	4618      	mov	r0, r3
    38de:	f107 070c 	add.w	r7, r7, #12
    38e2:	46bd      	mov	sp, r7
    38e4:	bc80      	pop	{r7}
    38e6:	4770      	bx	lr

000038e8 <CAN_GetFlagStatus>:
*                                         CAN_FLAG_BOF.
* Output         : None.
* Return         : The new state of CAN_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus CAN_GetFlagStatus(u32 CAN_FLAG)
{
    38e8:	b480      	push	{r7}
    38ea:	b085      	sub	sp, #20
    38ec:	af00      	add	r7, sp, #0
    38ee:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    38f0:	f04f 0300 	mov.w	r3, #0
    38f4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_CAN_FLAG(CAN_FLAG));

  /* Check the status of the specified CAN flag */
  if ((CAN->ESR & CAN_FLAG) != (u32)RESET)
    38f6:	f246 4300 	movw	r3, #25600	; 0x6400
    38fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    38fe:	699a      	ldr	r2, [r3, #24]
    3900:	687b      	ldr	r3, [r7, #4]
    3902:	ea02 0303 	and.w	r3, r2, r3
    3906:	2b00      	cmp	r3, #0
    3908:	d003      	beq.n	3912 <CAN_GetFlagStatus+0x2a>
  {
    /* CAN_FLAG is set */
    bitstatus = SET;
    390a:	f04f 0301 	mov.w	r3, #1
    390e:	73fb      	strb	r3, [r7, #15]
    3910:	e002      	b.n	3918 <CAN_GetFlagStatus+0x30>
  }
  else
  {
    /* CAN_FLAG is reset */
    bitstatus = RESET;
    3912:	f04f 0300 	mov.w	r3, #0
    3916:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
    3918:	7bfb      	ldrb	r3, [r7, #15]
}
    391a:	4618      	mov	r0, r3
    391c:	f107 0714 	add.w	r7, r7, #20
    3920:	46bd      	mov	sp, r7
    3922:	bc80      	pop	{r7}
    3924:	4770      	bx	lr
    3926:	bf00      	nop

00003928 <CAN_ClearFlag>:
* Input          : CAN_FLAG: specifies the flag to clear.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CAN_ClearFlag(u32 CAN_FLAG)
{
    3928:	b480      	push	{r7}
    392a:	b083      	sub	sp, #12
    392c:	af00      	add	r7, sp, #0
    392e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_FLAG(CAN_FLAG));

  /* Clear the selected CAN flags */
  CAN->ESR &= ~CAN_FLAG;
    3930:	f246 4300 	movw	r3, #25600	; 0x6400
    3934:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3938:	f246 4200 	movw	r2, #25600	; 0x6400
    393c:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3940:	6991      	ldr	r1, [r2, #24]
    3942:	687a      	ldr	r2, [r7, #4]
    3944:	ea6f 0202 	mvn.w	r2, r2
    3948:	ea01 0202 	and.w	r2, r1, r2
    394c:	619a      	str	r2, [r3, #24]
}
    394e:	f107 070c 	add.w	r7, r7, #12
    3952:	46bd      	mov	sp, r7
    3954:	bc80      	pop	{r7}
    3956:	4770      	bx	lr

00003958 <CAN_GetITStatus>:
*                                         CAN_IT_BOF, CAN_IT_WKU or CAN_IT_SLK.
* Output         : None.
* Return         : The new state of CAN_IT (SET or RESET).
*******************************************************************************/
ITStatus CAN_GetITStatus(u32 CAN_IT)
{
    3958:	b580      	push	{r7, lr}
    395a:	b084      	sub	sp, #16
    395c:	af00      	add	r7, sp, #0
    395e:	6078      	str	r0, [r7, #4]
  ITStatus pendingbitstatus = RESET;
    3960:	f04f 0300 	mov.w	r3, #0
    3964:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_CAN_ITStatus(CAN_IT));

  switch (CAN_IT)
    3966:	687b      	ldr	r3, [r7, #4]
    3968:	2b20      	cmp	r3, #32
    396a:	d068      	beq.n	3a3e <CAN_GetITStatus+0xe6>
    396c:	2b20      	cmp	r3, #32
    396e:	d80d      	bhi.n	398c <CAN_GetITStatus+0x34>
    3970:	2b06      	cmp	r3, #6
    3972:	d030      	beq.n	39d6 <CAN_GetITStatus+0x7e>
    3974:	2b06      	cmp	r3, #6
    3976:	d804      	bhi.n	3982 <CAN_GetITStatus+0x2a>
    3978:	2b04      	cmp	r3, #4
    397a:	d046      	beq.n	3a0a <CAN_GetITStatus+0xb2>
    397c:	2b05      	cmp	r3, #5
    397e:	d01d      	beq.n	39bc <CAN_GetITStatus+0x64>
    3980:	e0b8      	b.n	3af4 <CAN_GetITStatus+0x19c>
    3982:	2b07      	cmp	r3, #7
    3984:	d034      	beq.n	39f0 <CAN_GetITStatus+0x98>
    3986:	2b08      	cmp	r3, #8
    3988:	d04c      	beq.n	3a24 <CAN_GetITStatus+0xcc>
    398a:	e0b3      	b.n	3af4 <CAN_GetITStatus+0x19c>
    398c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3990:	d07c      	beq.n	3a8c <CAN_GetITStatus+0x134>
    3992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3996:	d805      	bhi.n	39a4 <CAN_GetITStatus+0x4c>
    3998:	2b40      	cmp	r3, #64	; 0x40
    399a:	d05d      	beq.n	3a58 <CAN_GetITStatus+0x100>
    399c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    39a0:	d067      	beq.n	3a72 <CAN_GetITStatus+0x11a>
    39a2:	e0a7      	b.n	3af4 <CAN_GetITStatus+0x19c>
    39a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    39a8:	f000 8097 	beq.w	3ada <CAN_GetITStatus+0x182>
    39ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    39b0:	f000 8086 	beq.w	3ac0 <CAN_GetITStatus+0x168>
    39b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    39b8:	d075      	beq.n	3aa6 <CAN_GetITStatus+0x14e>
    39ba:	e09b      	b.n	3af4 <CAN_GetITStatus+0x19c>
  {
    case CAN_IT_RQCP0:
      pendingbitstatus = CheckITStatus(CAN->TSR, TSR_RQCP0);
    39bc:	f246 4300 	movw	r3, #25600	; 0x6400
    39c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    39c4:	689b      	ldr	r3, [r3, #8]
    39c6:	4618      	mov	r0, r3
    39c8:	f04f 0101 	mov.w	r1, #1
    39cc:	f000 f93c 	bl	3c48 <CheckITStatus>
    39d0:	4603      	mov	r3, r0
    39d2:	73fb      	strb	r3, [r7, #15]
      break;
    39d4:	e091      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_RQCP1:
      pendingbitstatus = CheckITStatus(CAN->TSR, TSR_RQCP1);
    39d6:	f246 4300 	movw	r3, #25600	; 0x6400
    39da:	f2c4 0300 	movt	r3, #16384	; 0x4000
    39de:	689b      	ldr	r3, [r3, #8]
    39e0:	4618      	mov	r0, r3
    39e2:	f44f 7180 	mov.w	r1, #256	; 0x100
    39e6:	f000 f92f 	bl	3c48 <CheckITStatus>
    39ea:	4603      	mov	r3, r0
    39ec:	73fb      	strb	r3, [r7, #15]
      break;
    39ee:	e084      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_RQCP2:
      pendingbitstatus = CheckITStatus(CAN->TSR, TSR_RQCP2);
    39f0:	f246 4300 	movw	r3, #25600	; 0x6400
    39f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    39f8:	689b      	ldr	r3, [r3, #8]
    39fa:	4618      	mov	r0, r3
    39fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3a00:	f000 f922 	bl	3c48 <CheckITStatus>
    3a04:	4603      	mov	r3, r0
    3a06:	73fb      	strb	r3, [r7, #15]
      break;
    3a08:	e077      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_FF0:
      pendingbitstatus = CheckITStatus(CAN->RF0R, RF0R_FULL0);
    3a0a:	f246 4300 	movw	r3, #25600	; 0x6400
    3a0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3a12:	68db      	ldr	r3, [r3, #12]
    3a14:	4618      	mov	r0, r3
    3a16:	f04f 0108 	mov.w	r1, #8
    3a1a:	f000 f915 	bl	3c48 <CheckITStatus>
    3a1e:	4603      	mov	r3, r0
    3a20:	73fb      	strb	r3, [r7, #15]
      break;
    3a22:	e06a      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_FOV0:
      pendingbitstatus = CheckITStatus(CAN->RF0R, RF0R_FOVR0);
    3a24:	f246 4300 	movw	r3, #25600	; 0x6400
    3a28:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3a2c:	68db      	ldr	r3, [r3, #12]
    3a2e:	4618      	mov	r0, r3
    3a30:	f04f 0110 	mov.w	r1, #16
    3a34:	f000 f908 	bl	3c48 <CheckITStatus>
    3a38:	4603      	mov	r3, r0
    3a3a:	73fb      	strb	r3, [r7, #15]
      break;
    3a3c:	e05d      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_FF1:
      pendingbitstatus = CheckITStatus(CAN->RF1R, RF1R_FULL1);
    3a3e:	f246 4300 	movw	r3, #25600	; 0x6400
    3a42:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3a46:	691b      	ldr	r3, [r3, #16]
    3a48:	4618      	mov	r0, r3
    3a4a:	f04f 0108 	mov.w	r1, #8
    3a4e:	f000 f8fb 	bl	3c48 <CheckITStatus>
    3a52:	4603      	mov	r3, r0
    3a54:	73fb      	strb	r3, [r7, #15]
      break;
    3a56:	e050      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_FOV1:
      pendingbitstatus = CheckITStatus(CAN->RF1R, RF1R_FOVR1);
    3a58:	f246 4300 	movw	r3, #25600	; 0x6400
    3a5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3a60:	691b      	ldr	r3, [r3, #16]
    3a62:	4618      	mov	r0, r3
    3a64:	f04f 0110 	mov.w	r1, #16
    3a68:	f000 f8ee 	bl	3c48 <CheckITStatus>
    3a6c:	4603      	mov	r3, r0
    3a6e:	73fb      	strb	r3, [r7, #15]
      break;
    3a70:	e043      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_EWG:
      pendingbitstatus = CheckITStatus(CAN->ESR, ESR_EWGF);
    3a72:	f246 4300 	movw	r3, #25600	; 0x6400
    3a76:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3a7a:	699b      	ldr	r3, [r3, #24]
    3a7c:	4618      	mov	r0, r3
    3a7e:	f04f 0101 	mov.w	r1, #1
    3a82:	f000 f8e1 	bl	3c48 <CheckITStatus>
    3a86:	4603      	mov	r3, r0
    3a88:	73fb      	strb	r3, [r7, #15]
      break;
    3a8a:	e036      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_EPV:
      pendingbitstatus = CheckITStatus(CAN->ESR, ESR_EPVF);
    3a8c:	f246 4300 	movw	r3, #25600	; 0x6400
    3a90:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3a94:	699b      	ldr	r3, [r3, #24]
    3a96:	4618      	mov	r0, r3
    3a98:	f04f 0102 	mov.w	r1, #2
    3a9c:	f000 f8d4 	bl	3c48 <CheckITStatus>
    3aa0:	4603      	mov	r3, r0
    3aa2:	73fb      	strb	r3, [r7, #15]
      break;
    3aa4:	e029      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_BOF:
      pendingbitstatus = CheckITStatus(CAN->ESR, ESR_BOFF);
    3aa6:	f246 4300 	movw	r3, #25600	; 0x6400
    3aaa:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3aae:	699b      	ldr	r3, [r3, #24]
    3ab0:	4618      	mov	r0, r3
    3ab2:	f04f 0104 	mov.w	r1, #4
    3ab6:	f000 f8c7 	bl	3c48 <CheckITStatus>
    3aba:	4603      	mov	r3, r0
    3abc:	73fb      	strb	r3, [r7, #15]
      break;
    3abe:	e01c      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_SLK:
      pendingbitstatus = CheckITStatus(CAN->MSR, MSR_SLAKI);
    3ac0:	f246 4300 	movw	r3, #25600	; 0x6400
    3ac4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3ac8:	685b      	ldr	r3, [r3, #4]
    3aca:	4618      	mov	r0, r3
    3acc:	f04f 0110 	mov.w	r1, #16
    3ad0:	f000 f8ba 	bl	3c48 <CheckITStatus>
    3ad4:	4603      	mov	r3, r0
    3ad6:	73fb      	strb	r3, [r7, #15]
      break;
    3ad8:	e00f      	b.n	3afa <CAN_GetITStatus+0x1a2>
    case CAN_IT_WKU:
      pendingbitstatus = CheckITStatus(CAN->MSR, MSR_WKUI);
    3ada:	f246 4300 	movw	r3, #25600	; 0x6400
    3ade:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3ae2:	685b      	ldr	r3, [r3, #4]
    3ae4:	4618      	mov	r0, r3
    3ae6:	f04f 0108 	mov.w	r1, #8
    3aea:	f000 f8ad 	bl	3c48 <CheckITStatus>
    3aee:	4603      	mov	r3, r0
    3af0:	73fb      	strb	r3, [r7, #15]
      break;
    3af2:	e002      	b.n	3afa <CAN_GetITStatus+0x1a2>

    default :
      pendingbitstatus = RESET;
    3af4:	f04f 0300 	mov.w	r3, #0
    3af8:	73fb      	strb	r3, [r7, #15]
      break;
  }

  /* Return the CAN_IT status */
  return  pendingbitstatus;
    3afa:	7bfb      	ldrb	r3, [r7, #15]
}
    3afc:	4618      	mov	r0, r3
    3afe:	f107 0710 	add.w	r7, r7, #16
    3b02:	46bd      	mov	sp, r7
    3b04:	bd80      	pop	{r7, pc}
    3b06:	bf00      	nop

00003b08 <CAN_ClearITPendingBit>:
* Input          : CAN_IT: specifies the interrupt pending bit to clear.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CAN_ClearITPendingBit(u32 CAN_IT)
{
    3b08:	b480      	push	{r7}
    3b0a:	b083      	sub	sp, #12
    3b0c:	af00      	add	r7, sp, #0
    3b0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ITStatus(CAN_IT));

  switch (CAN_IT)
    3b10:	687b      	ldr	r3, [r7, #4]
    3b12:	2b20      	cmp	r3, #32
    3b14:	d04d      	beq.n	3bb2 <CAN_ClearITPendingBit+0xaa>
    3b16:	2b20      	cmp	r3, #32
    3b18:	d80d      	bhi.n	3b36 <CAN_ClearITPendingBit+0x2e>
    3b1a:	2b06      	cmp	r3, #6
    3b1c:	d029      	beq.n	3b72 <CAN_ClearITPendingBit+0x6a>
    3b1e:	2b06      	cmp	r3, #6
    3b20:	d804      	bhi.n	3b2c <CAN_ClearITPendingBit+0x24>
    3b22:	2b04      	cmp	r3, #4
    3b24:	d035      	beq.n	3b92 <CAN_ClearITPendingBit+0x8a>
    3b26:	2b05      	cmp	r3, #5
    3b28:	d01b      	beq.n	3b62 <CAN_ClearITPendingBit+0x5a>
    3b2a:	e088      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    3b2c:	2b07      	cmp	r3, #7
    3b2e:	d028      	beq.n	3b82 <CAN_ClearITPendingBit+0x7a>
    3b30:	2b08      	cmp	r3, #8
    3b32:	d036      	beq.n	3ba2 <CAN_ClearITPendingBit+0x9a>
    3b34:	e083      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    3b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3b3a:	d057      	beq.n	3bec <CAN_ClearITPendingBit+0xe4>
    3b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3b40:	d805      	bhi.n	3b4e <CAN_ClearITPendingBit+0x46>
    3b42:	2b40      	cmp	r3, #64	; 0x40
    3b44:	d03d      	beq.n	3bc2 <CAN_ClearITPendingBit+0xba>
    3b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3b4a:	d042      	beq.n	3bd2 <CAN_ClearITPendingBit+0xca>
    3b4c:	e077      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    3b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3b52:	d065      	beq.n	3c20 <CAN_ClearITPendingBit+0x118>
    3b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3b58:	d06a      	beq.n	3c30 <CAN_ClearITPendingBit+0x128>
    3b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    3b5e:	d052      	beq.n	3c06 <CAN_ClearITPendingBit+0xfe>
    3b60:	e06d      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
  {
    case CAN_IT_RQCP0:
      CAN->TSR = TSR_RQCP0; /* rc_w1*/
    3b62:	f246 4300 	movw	r3, #25600	; 0x6400
    3b66:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3b6a:	f04f 0201 	mov.w	r2, #1
    3b6e:	609a      	str	r2, [r3, #8]
      break;
    3b70:	e065      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_RQCP1:
      CAN->TSR = TSR_RQCP1; /* rc_w1*/
    3b72:	f246 4300 	movw	r3, #25600	; 0x6400
    3b76:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3b7a:	f44f 7280 	mov.w	r2, #256	; 0x100
    3b7e:	609a      	str	r2, [r3, #8]
      break;
    3b80:	e05d      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_RQCP2:
      CAN->TSR = TSR_RQCP2; /* rc_w1*/
    3b82:	f246 4300 	movw	r3, #25600	; 0x6400
    3b86:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3b8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3b8e:	609a      	str	r2, [r3, #8]
      break;
    3b90:	e055      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_FF0:
      CAN->RF0R = RF0R_FULL0; /* rc_w1*/
    3b92:	f246 4300 	movw	r3, #25600	; 0x6400
    3b96:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3b9a:	f04f 0208 	mov.w	r2, #8
    3b9e:	60da      	str	r2, [r3, #12]
      break;
    3ba0:	e04d      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_FOV0:
      CAN->RF0R = RF0R_FOVR0; /* rc_w1*/
    3ba2:	f246 4300 	movw	r3, #25600	; 0x6400
    3ba6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3baa:	f04f 0210 	mov.w	r2, #16
    3bae:	60da      	str	r2, [r3, #12]
      break;
    3bb0:	e045      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_FF1:
      CAN->RF1R = RF1R_FULL1; /* rc_w1*/
    3bb2:	f246 4300 	movw	r3, #25600	; 0x6400
    3bb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3bba:	f04f 0208 	mov.w	r2, #8
    3bbe:	611a      	str	r2, [r3, #16]
      break;
    3bc0:	e03d      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_FOV1:
      CAN->RF1R = RF1R_FOVR1; /* rc_w1*/
    3bc2:	f246 4300 	movw	r3, #25600	; 0x6400
    3bc6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3bca:	f04f 0210 	mov.w	r2, #16
    3bce:	611a      	str	r2, [r3, #16]
      break;
    3bd0:	e035      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_EWG:
      CAN->ESR &= ~ ESR_EWGF; /* rw */
    3bd2:	f246 4300 	movw	r3, #25600	; 0x6400
    3bd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3bda:	f246 4200 	movw	r2, #25600	; 0x6400
    3bde:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3be2:	6992      	ldr	r2, [r2, #24]
    3be4:	f022 0201 	bic.w	r2, r2, #1
    3be8:	619a      	str	r2, [r3, #24]
      break;
    3bea:	e028      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_EPV:
      CAN->ESR &= ~ ESR_EPVF; /* rw */
    3bec:	f246 4300 	movw	r3, #25600	; 0x6400
    3bf0:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3bf4:	f246 4200 	movw	r2, #25600	; 0x6400
    3bf8:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3bfc:	6992      	ldr	r2, [r2, #24]
    3bfe:	f022 0202 	bic.w	r2, r2, #2
    3c02:	619a      	str	r2, [r3, #24]
      break;
    3c04:	e01b      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_BOF:
      CAN->ESR &= ~ ESR_BOFF; /* rw */
    3c06:	f246 4300 	movw	r3, #25600	; 0x6400
    3c0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3c0e:	f246 4200 	movw	r2, #25600	; 0x6400
    3c12:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3c16:	6992      	ldr	r2, [r2, #24]
    3c18:	f022 0204 	bic.w	r2, r2, #4
    3c1c:	619a      	str	r2, [r3, #24]
      break;
    3c1e:	e00e      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_WKU:
      CAN->MSR = MSR_WKUI;  /* rc_w1*/
    3c20:	f246 4300 	movw	r3, #25600	; 0x6400
    3c24:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3c28:	f04f 0208 	mov.w	r2, #8
    3c2c:	605a      	str	r2, [r3, #4]
      break;
    3c2e:	e006      	b.n	3c3e <CAN_ClearITPendingBit+0x136>
    case CAN_IT_SLK:
      CAN->MSR = MSR_SLAKI;  /* rc_w1*/
    3c30:	f246 4300 	movw	r3, #25600	; 0x6400
    3c34:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3c38:	f04f 0210 	mov.w	r2, #16
    3c3c:	605a      	str	r2, [r3, #4]
      break;
    default :
      break;
  }
}
    3c3e:	f107 070c 	add.w	r7, r7, #12
    3c42:	46bd      	mov	sp, r7
    3c44:	bc80      	pop	{r7}
    3c46:	4770      	bx	lr

00003c48 <CheckITStatus>:
*                  It_Bit: specifies the interrupt source bit to check.
* Output         : None.
* Return         : The new state of the CAN Interrupt (SET or RESET).
*******************************************************************************/
static ITStatus CheckITStatus(u32 CAN_Reg, u32 It_Bit)
{
    3c48:	b480      	push	{r7}
    3c4a:	b085      	sub	sp, #20
    3c4c:	af00      	add	r7, sp, #0
    3c4e:	6078      	str	r0, [r7, #4]
    3c50:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
    3c52:	f04f 0300 	mov.w	r3, #0
    3c56:	73fb      	strb	r3, [r7, #15]

  if ((CAN_Reg & It_Bit) != (u32)RESET)
    3c58:	687a      	ldr	r2, [r7, #4]
    3c5a:	683b      	ldr	r3, [r7, #0]
    3c5c:	ea02 0303 	and.w	r3, r2, r3
    3c60:	2b00      	cmp	r3, #0
    3c62:	d003      	beq.n	3c6c <CheckITStatus+0x24>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
    3c64:	f04f 0301 	mov.w	r3, #1
    3c68:	73fb      	strb	r3, [r7, #15]
    3c6a:	e002      	b.n	3c72 <CheckITStatus+0x2a>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
    3c6c:	f04f 0300 	mov.w	r3, #0
    3c70:	73fb      	strb	r3, [r7, #15]
  }

  return pendingbitstatus;
    3c72:	7bfb      	ldrb	r3, [r7, #15]
}
    3c74:	4618      	mov	r0, r3
    3c76:	f107 0714 	add.w	r7, r7, #20
    3c7a:	46bd      	mov	sp, r7
    3c7c:	bc80      	pop	{r7}
    3c7e:	4770      	bx	lr

00003c80 <USART_DeInit>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DeInit(USART_TypeDef* USARTx)
{
    3c80:	b580      	push	{r7, lr}
    3c82:	b082      	sub	sp, #8
    3c84:	af00      	add	r7, sp, #0
    3c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  switch (*(u32*)&USARTx)
    3c88:	f107 0304 	add.w	r3, r7, #4
    3c8c:	681b      	ldr	r3, [r3, #0]
    3c8e:	f644 4200 	movw	r2, #19456	; 0x4c00
    3c92:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3c96:	4293      	cmp	r3, r2
    3c98:	d045      	beq.n	3d26 <USART_DeInit+0xa6>
    3c9a:	f644 4200 	movw	r2, #19456	; 0x4c00
    3c9e:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3ca2:	4293      	cmp	r3, r2
    3ca4:	d80c      	bhi.n	3cc0 <USART_DeInit+0x40>
    3ca6:	f244 4200 	movw	r2, #17408	; 0x4400
    3caa:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3cae:	4293      	cmp	r3, r2
    3cb0:	d01f      	beq.n	3cf2 <USART_DeInit+0x72>
    3cb2:	f644 0200 	movw	r2, #18432	; 0x4800
    3cb6:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3cba:	4293      	cmp	r3, r2
    3cbc:	d026      	beq.n	3d0c <USART_DeInit+0x8c>
    3cbe:	e04b      	b.n	3d58 <USART_DeInit+0xd8>
    3cc0:	f245 0200 	movw	r2, #20480	; 0x5000
    3cc4:	f2c4 0200 	movt	r2, #16384	; 0x4000
    3cc8:	4293      	cmp	r3, r2
    3cca:	d039      	beq.n	3d40 <USART_DeInit+0xc0>
    3ccc:	f643 0200 	movw	r2, #14336	; 0x3800
    3cd0:	f2c4 0201 	movt	r2, #16385	; 0x4001
    3cd4:	4293      	cmp	r3, r2
    3cd6:	d13f      	bne.n	3d58 <USART_DeInit+0xd8>
  {
    case USART1_BASE:
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    3cd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    3cdc:	f04f 0101 	mov.w	r1, #1
    3ce0:	f7fe f9da 	bl	2098 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    3ce4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    3ce8:	f04f 0100 	mov.w	r1, #0
    3cec:	f7fe f9d4 	bl	2098 <RCC_APB2PeriphResetCmd>
      break;
    3cf0:	e032      	b.n	3d58 <USART_DeInit+0xd8>

    case USART2_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    3cf2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3cf6:	f04f 0101 	mov.w	r1, #1
    3cfa:	f7fe f9f9 	bl	20f0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    3cfe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3d02:	f04f 0100 	mov.w	r1, #0
    3d06:	f7fe f9f3 	bl	20f0 <RCC_APB1PeriphResetCmd>
      break;
    3d0a:	e025      	b.n	3d58 <USART_DeInit+0xd8>

    case USART3_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    3d0c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3d10:	f04f 0101 	mov.w	r1, #1
    3d14:	f7fe f9ec 	bl	20f0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    3d18:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3d1c:	f04f 0100 	mov.w	r1, #0
    3d20:	f7fe f9e6 	bl	20f0 <RCC_APB1PeriphResetCmd>
      break;
    3d24:	e018      	b.n	3d58 <USART_DeInit+0xd8>
    
    case UART4_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    3d26:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3d2a:	f04f 0101 	mov.w	r1, #1
    3d2e:	f7fe f9df 	bl	20f0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    3d32:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3d36:	f04f 0100 	mov.w	r1, #0
    3d3a:	f7fe f9d9 	bl	20f0 <RCC_APB1PeriphResetCmd>
      break;
    3d3e:	e00b      	b.n	3d58 <USART_DeInit+0xd8>
    
    case UART5_BASE:
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    3d40:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3d44:	f04f 0101 	mov.w	r1, #1
    3d48:	f7fe f9d2 	bl	20f0 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    3d4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3d50:	f04f 0100 	mov.w	r1, #0
    3d54:	f7fe f9cc 	bl	20f0 <RCC_APB1PeriphResetCmd>
      break;            

    default:
      break;
  }
}
    3d58:	f107 0708 	add.w	r7, r7, #8
    3d5c:	46bd      	mov	sp, r7
    3d5e:	bd80      	pop	{r7, pc}

00003d60 <USART_Init>:
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b08c      	sub	sp, #48	; 0x30
    3d64:	af00      	add	r7, sp, #0
    3d66:	6078      	str	r0, [r7, #4]
    3d68:	6039      	str	r1, [r7, #0]
  u32 tmpreg = 0x00, apbclock = 0x00;
    3d6a:	f04f 0300 	mov.w	r3, #0
    3d6e:	61fb      	str	r3, [r7, #28]
    3d70:	f04f 0300 	mov.w	r3, #0
    3d74:	623b      	str	r3, [r7, #32]
  u32 integerdivider = 0x00;
    3d76:	f04f 0300 	mov.w	r3, #0
    3d7a:	627b      	str	r3, [r7, #36]	; 0x24
  u32 fractionaldivider = 0x00;
    3d7c:	f04f 0300 	mov.w	r3, #0
    3d80:	62bb      	str	r3, [r7, #40]	; 0x28
  u32 usartxbase = 0;
    3d82:	f04f 0300 	mov.w	r3, #0
    3d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  /* The hardware flow control is available only for USART1, USART2 and USART3 */          
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);
    3d88:	f107 0304 	add.w	r3, r7, #4
    3d8c:	681b      	ldr	r3, [r3, #0]
    3d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	8a1b      	ldrh	r3, [r3, #16]
    3d94:	b29b      	uxth	r3, r3
    3d96:	61fb      	str	r3, [r7, #28]
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    3d98:	69fa      	ldr	r2, [r7, #28]
    3d9a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    3d9e:	f2c0 0300 	movt	r3, #0
    3da2:	ea02 0303 	and.w	r3, r2, r3
    3da6:	61fb      	str	r3, [r7, #28]

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
    3da8:	683b      	ldr	r3, [r7, #0]
    3daa:	88db      	ldrh	r3, [r3, #6]
    3dac:	69fa      	ldr	r2, [r7, #28]
    3dae:	ea42 0303 	orr.w	r3, r2, r3
    3db2:	61fb      	str	r3, [r7, #28]
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
    3db4:	687b      	ldr	r3, [r7, #4]
    3db6:	69fa      	ldr	r2, [r7, #28]
    3db8:	b292      	uxth	r2, r2
    3dba:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    3dbc:	687b      	ldr	r3, [r7, #4]
    3dbe:	899b      	ldrh	r3, [r3, #12]
    3dc0:	b29b      	uxth	r3, r3
    3dc2:	61fb      	str	r3, [r7, #28]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    3dc4:	69fa      	ldr	r2, [r7, #28]
    3dc6:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    3dca:	f2c0 0300 	movt	r3, #0
    3dce:	ea02 0303 	and.w	r3, r2, r3
    3dd2:	61fb      	str	r3, [r7, #28]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    3dd4:	683b      	ldr	r3, [r7, #0]
    3dd6:	889a      	ldrh	r2, [r3, #4]
    3dd8:	683b      	ldr	r3, [r7, #0]
    3dda:	891b      	ldrh	r3, [r3, #8]
    3ddc:	ea42 0303 	orr.w	r3, r2, r3
    3de0:	b29a      	uxth	r2, r3
    3de2:	683b      	ldr	r3, [r7, #0]
    3de4:	895b      	ldrh	r3, [r3, #10]
    3de6:	ea42 0303 	orr.w	r3, r2, r3
    3dea:	b29b      	uxth	r3, r3
    3dec:	69fa      	ldr	r2, [r7, #28]
    3dee:	ea42 0303 	orr.w	r3, r2, r3
    3df2:	61fb      	str	r3, [r7, #28]
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
    3df4:	687b      	ldr	r3, [r7, #4]
    3df6:	69fa      	ldr	r2, [r7, #28]
    3df8:	b292      	uxth	r2, r2
    3dfa:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    3dfc:	687b      	ldr	r3, [r7, #4]
    3dfe:	8a9b      	ldrh	r3, [r3, #20]
    3e00:	b29b      	uxth	r3, r3
    3e02:	61fb      	str	r3, [r7, #28]
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    3e04:	69fa      	ldr	r2, [r7, #28]
    3e06:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    3e0a:	f2c0 0300 	movt	r3, #0
    3e0e:	ea02 0303 	and.w	r3, r2, r3
    3e12:	61fb      	str	r3, [r7, #28]

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    3e14:	683b      	ldr	r3, [r7, #0]
    3e16:	899b      	ldrh	r3, [r3, #12]
    3e18:	69fa      	ldr	r2, [r7, #28]
    3e1a:	ea42 0303 	orr.w	r3, r2, r3
    3e1e:	61fb      	str	r3, [r7, #28]

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
    3e20:	687b      	ldr	r3, [r7, #4]
    3e22:	69fa      	ldr	r2, [r7, #28]
    3e24:	b292      	uxth	r2, r2
    3e26:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    3e28:	f107 0308 	add.w	r3, r7, #8
    3e2c:	4618      	mov	r0, r3
    3e2e:	f7fd ffcf 	bl	1dd0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    3e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3e34:	f643 0300 	movw	r3, #14336	; 0x3800
    3e38:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3e3c:	429a      	cmp	r2, r3
    3e3e:	d102      	bne.n	3e46 <USART_Init+0xe6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    3e40:	697b      	ldr	r3, [r7, #20]
    3e42:	623b      	str	r3, [r7, #32]
    3e44:	e001      	b.n	3e4a <USART_Init+0xea>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    3e46:	693b      	ldr	r3, [r7, #16]
    3e48:	623b      	str	r3, [r7, #32]
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
    3e4a:	6a3a      	ldr	r2, [r7, #32]
    3e4c:	4613      	mov	r3, r2
    3e4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3e52:	4413      	add	r3, r2
    3e54:	ea4f 0283 	mov.w	r2, r3, lsl #2
    3e58:	441a      	add	r2, r3
    3e5a:	683b      	ldr	r3, [r7, #0]
    3e5c:	681b      	ldr	r3, [r3, #0]
    3e5e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3e62:	fbb2 f3f3 	udiv	r3, r2, r3
    3e66:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg = (integerdivider / 0x64) << 0x04;
    3e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3e6a:	f248 531f 	movw	r3, #34079	; 0x851f
    3e6e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    3e72:	fba3 1302 	umull	r1, r3, r3, r2
    3e76:	ea4f 1353 	mov.w	r3, r3, lsr #5
    3e7a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3e7e:	61fb      	str	r3, [r7, #28]

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
    3e80:	69fb      	ldr	r3, [r7, #28]
    3e82:	ea4f 1313 	mov.w	r3, r3, lsr #4
    3e86:	f04f 0264 	mov.w	r2, #100	; 0x64
    3e8a:	fb02 f303 	mul.w	r3, r2, r3
    3e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3e90:	ebc3 0302 	rsb	r3, r3, r2
    3e94:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
    3e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3e98:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3e9c:	f103 0232 	add.w	r2, r3, #50	; 0x32
    3ea0:	f248 531f 	movw	r3, #34079	; 0x851f
    3ea4:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    3ea8:	fba3 1302 	umull	r1, r3, r3, r2
    3eac:	ea4f 1353 	mov.w	r3, r3, lsr #5
    3eb0:	f003 030f 	and.w	r3, r3, #15
    3eb4:	69fa      	ldr	r2, [r7, #28]
    3eb6:	ea42 0303 	orr.w	r3, r2, r3
    3eba:	61fb      	str	r3, [r7, #28]

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
    3ebc:	687b      	ldr	r3, [r7, #4]
    3ebe:	69fa      	ldr	r2, [r7, #28]
    3ec0:	b292      	uxth	r2, r2
    3ec2:	811a      	strh	r2, [r3, #8]
}
    3ec4:	f107 0730 	add.w	r7, r7, #48	; 0x30
    3ec8:	46bd      	mov	sp, r7
    3eca:	bd80      	pop	{r7, pc}

00003ecc <USART_StructInit>:
*                    which will be initialized.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    3ecc:	b480      	push	{r7}
    3ece:	b083      	sub	sp, #12
    3ed0:	af00      	add	r7, sp, #0
    3ed2:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    3ed4:	687b      	ldr	r3, [r7, #4]
    3ed6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    3eda:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    3edc:	687b      	ldr	r3, [r7, #4]
    3ede:	f04f 0200 	mov.w	r2, #0
    3ee2:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    3ee4:	687b      	ldr	r3, [r7, #4]
    3ee6:	f04f 0200 	mov.w	r2, #0
    3eea:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	f04f 0200 	mov.w	r2, #0
    3ef2:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    3ef4:	687b      	ldr	r3, [r7, #4]
    3ef6:	f04f 020c 	mov.w	r2, #12
    3efa:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    3efc:	687b      	ldr	r3, [r7, #4]
    3efe:	f04f 0200 	mov.w	r2, #0
    3f02:	819a      	strh	r2, [r3, #12]
}
    3f04:	f107 070c 	add.w	r7, r7, #12
    3f08:	46bd      	mov	sp, r7
    3f0a:	bc80      	pop	{r7}
    3f0c:	4770      	bx	lr
    3f0e:	bf00      	nop

00003f10 <USART_ClockInit>:
*                    the specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    3f10:	b480      	push	{r7}
    3f12:	b085      	sub	sp, #20
    3f14:	af00      	add	r7, sp, #0
    3f16:	6078      	str	r0, [r7, #4]
    3f18:	6039      	str	r1, [r7, #0]
  u32 tmpreg = 0x00;
    3f1a:	f04f 0300 	mov.w	r3, #0
    3f1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	8a1b      	ldrh	r3, [r3, #16]
    3f24:	b29b      	uxth	r3, r3
    3f26:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    3f28:	68fa      	ldr	r2, [r7, #12]
    3f2a:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    3f2e:	f2c0 0300 	movt	r3, #0
    3f32:	ea02 0303 	and.w	r3, r2, r3
    3f36:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    3f38:	683b      	ldr	r3, [r7, #0]
    3f3a:	881a      	ldrh	r2, [r3, #0]
    3f3c:	683b      	ldr	r3, [r7, #0]
    3f3e:	885b      	ldrh	r3, [r3, #2]
    3f40:	ea42 0303 	orr.w	r3, r2, r3
    3f44:	b29a      	uxth	r2, r3
    3f46:	683b      	ldr	r3, [r7, #0]
    3f48:	889b      	ldrh	r3, [r3, #4]
    3f4a:	ea42 0303 	orr.w	r3, r2, r3
    3f4e:	b29a      	uxth	r2, r3
    3f50:	683b      	ldr	r3, [r7, #0]
    3f52:	88db      	ldrh	r3, [r3, #6]
    3f54:	ea42 0303 	orr.w	r3, r2, r3
    3f58:	b29b      	uxth	r3, r3
    3f5a:	68fa      	ldr	r2, [r7, #12]
    3f5c:	ea42 0303 	orr.w	r3, r2, r3
    3f60:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
    3f62:	68fb      	ldr	r3, [r7, #12]
    3f64:	b29a      	uxth	r2, r3
    3f66:	687b      	ldr	r3, [r7, #4]
    3f68:	821a      	strh	r2, [r3, #16]
}
    3f6a:	f107 0714 	add.w	r7, r7, #20
    3f6e:	46bd      	mov	sp, r7
    3f70:	bc80      	pop	{r7}
    3f72:	4770      	bx	lr

00003f74 <USART_ClockStructInit>:
*                    structure which will be initialized.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    3f74:	b480      	push	{r7}
    3f76:	b083      	sub	sp, #12
    3f78:	af00      	add	r7, sp, #0
    3f7a:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    3f7c:	687b      	ldr	r3, [r7, #4]
    3f7e:	f04f 0200 	mov.w	r2, #0
    3f82:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    3f84:	687b      	ldr	r3, [r7, #4]
    3f86:	f04f 0200 	mov.w	r2, #0
    3f8a:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    3f8c:	687b      	ldr	r3, [r7, #4]
    3f8e:	f04f 0200 	mov.w	r2, #0
    3f92:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	f04f 0200 	mov.w	r2, #0
    3f9a:	80da      	strh	r2, [r3, #6]
}
    3f9c:	f107 070c 	add.w	r7, r7, #12
    3fa0:	46bd      	mov	sp, r7
    3fa2:	bc80      	pop	{r7}
    3fa4:	4770      	bx	lr
    3fa6:	bf00      	nop

00003fa8 <USART_Cmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    3fa8:	b480      	push	{r7}
    3faa:	b083      	sub	sp, #12
    3fac:	af00      	add	r7, sp, #0
    3fae:	6078      	str	r0, [r7, #4]
    3fb0:	460b      	mov	r3, r1
    3fb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    3fb4:	78fb      	ldrb	r3, [r7, #3]
    3fb6:	2b00      	cmp	r3, #0
    3fb8:	d008      	beq.n	3fcc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    3fba:	687b      	ldr	r3, [r7, #4]
    3fbc:	899b      	ldrh	r3, [r3, #12]
    3fbe:	b29b      	uxth	r3, r3
    3fc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    3fc4:	b29a      	uxth	r2, r3
    3fc6:	687b      	ldr	r3, [r7, #4]
    3fc8:	819a      	strh	r2, [r3, #12]
    3fca:	e00c      	b.n	3fe6 <USART_Cmd+0x3e>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    3fcc:	687b      	ldr	r3, [r7, #4]
    3fce:	899b      	ldrh	r3, [r3, #12]
    3fd0:	b29b      	uxth	r3, r3
    3fd2:	461a      	mov	r2, r3
    3fd4:	f64d 73ff 	movw	r3, #57343	; 0xdfff
    3fd8:	f2c0 0300 	movt	r3, #0
    3fdc:	ea02 0303 	and.w	r3, r2, r3
    3fe0:	461a      	mov	r2, r3
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	819a      	strh	r2, [r3, #12]
  }
}
    3fe6:	f107 070c 	add.w	r7, r7, #12
    3fea:	46bd      	mov	sp, r7
    3fec:	bc80      	pop	{r7}
    3fee:	4770      	bx	lr

00003ff0 <USART_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
    3ff0:	b480      	push	{r7}
    3ff2:	b087      	sub	sp, #28
    3ff4:	af00      	add	r7, sp, #0
    3ff6:	6078      	str	r0, [r7, #4]
    3ff8:	4613      	mov	r3, r2
    3ffa:	460a      	mov	r2, r1
    3ffc:	807a      	strh	r2, [r7, #2]
    3ffe:	707b      	strb	r3, [r7, #1]
  u32 usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    4000:	f04f 0300 	mov.w	r3, #0
    4004:	60bb      	str	r3, [r7, #8]
    4006:	f04f 0300 	mov.w	r3, #0
    400a:	60fb      	str	r3, [r7, #12]
    400c:	f04f 0300 	mov.w	r3, #0
    4010:	613b      	str	r3, [r7, #16]
  u32 usartxbase = 0x00;
    4012:	f04f 0300 	mov.w	r3, #0
    4016:	617b      	str	r3, [r7, #20]
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */     
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));
    4018:	f107 0304 	add.w	r3, r7, #4
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
    4020:	887b      	ldrh	r3, [r7, #2]
    4022:	b2db      	uxtb	r3, r3
    4024:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4028:	b2db      	uxtb	r3, r3
    402a:	60bb      	str	r3, [r7, #8]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    402c:	887b      	ldrh	r3, [r7, #2]
    402e:	f003 031f 	and.w	r3, r3, #31
    4032:	60fb      	str	r3, [r7, #12]

  itmask = (((u32)0x01) << itpos);
    4034:	68fb      	ldr	r3, [r7, #12]
    4036:	f04f 0201 	mov.w	r2, #1
    403a:	fa02 f303 	lsl.w	r3, r2, r3
    403e:	613b      	str	r3, [r7, #16]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    4040:	68bb      	ldr	r3, [r7, #8]
    4042:	2b01      	cmp	r3, #1
    4044:	d104      	bne.n	4050 <USART_ITConfig+0x60>
  {
    usartxbase += 0x0C;
    4046:	697b      	ldr	r3, [r7, #20]
    4048:	f103 030c 	add.w	r3, r3, #12
    404c:	617b      	str	r3, [r7, #20]
    404e:	e00b      	b.n	4068 <USART_ITConfig+0x78>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    4050:	68bb      	ldr	r3, [r7, #8]
    4052:	2b02      	cmp	r3, #2
    4054:	d104      	bne.n	4060 <USART_ITConfig+0x70>
  {
    usartxbase += 0x10;
    4056:	697b      	ldr	r3, [r7, #20]
    4058:	f103 0310 	add.w	r3, r3, #16
    405c:	617b      	str	r3, [r7, #20]
    405e:	e003      	b.n	4068 <USART_ITConfig+0x78>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    4060:	697b      	ldr	r3, [r7, #20]
    4062:	f103 0314 	add.w	r3, r3, #20
    4066:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    4068:	787b      	ldrb	r3, [r7, #1]
    406a:	2b00      	cmp	r3, #0
    406c:	d007      	beq.n	407e <USART_ITConfig+0x8e>
  {
    *(vu32*)usartxbase  |= itmask;
    406e:	697b      	ldr	r3, [r7, #20]
    4070:	697a      	ldr	r2, [r7, #20]
    4072:	6811      	ldr	r1, [r2, #0]
    4074:	693a      	ldr	r2, [r7, #16]
    4076:	ea41 0202 	orr.w	r2, r1, r2
    407a:	601a      	str	r2, [r3, #0]
    407c:	e008      	b.n	4090 <USART_ITConfig+0xa0>
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
    407e:	697b      	ldr	r3, [r7, #20]
    4080:	697a      	ldr	r2, [r7, #20]
    4082:	6811      	ldr	r1, [r2, #0]
    4084:	693a      	ldr	r2, [r7, #16]
    4086:	ea6f 0202 	mvn.w	r2, r2
    408a:	ea01 0202 	and.w	r2, r1, r2
    408e:	601a      	str	r2, [r3, #0]
  }
}
    4090:	f107 071c 	add.w	r7, r7, #28
    4094:	46bd      	mov	sp, r7
    4096:	bc80      	pop	{r7}
    4098:	4770      	bx	lr
    409a:	bf00      	nop

0000409c <USART_DMACmd>:
*                   This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_DMACmd(USART_TypeDef* USARTx, u16 USART_DMAReq, FunctionalState NewState)
{
    409c:	b480      	push	{r7}
    409e:	b083      	sub	sp, #12
    40a0:	af00      	add	r7, sp, #0
    40a2:	6078      	str	r0, [r7, #4]
    40a4:	4613      	mov	r3, r2
    40a6:	460a      	mov	r2, r1
    40a8:	807a      	strh	r2, [r7, #2]
    40aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_1234_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
    40ac:	787b      	ldrb	r3, [r7, #1]
    40ae:	2b00      	cmp	r3, #0
    40b0:	d009      	beq.n	40c6 <USART_DMACmd+0x2a>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    40b2:	687b      	ldr	r3, [r7, #4]
    40b4:	8a9b      	ldrh	r3, [r3, #20]
    40b6:	b29a      	uxth	r2, r3
    40b8:	887b      	ldrh	r3, [r7, #2]
    40ba:	ea42 0303 	orr.w	r3, r2, r3
    40be:	b29a      	uxth	r2, r3
    40c0:	687b      	ldr	r3, [r7, #4]
    40c2:	829a      	strh	r2, [r3, #20]
    40c4:	e00b      	b.n	40de <USART_DMACmd+0x42>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (u16)~USART_DMAReq;
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	8a9b      	ldrh	r3, [r3, #20]
    40ca:	b29a      	uxth	r2, r3
    40cc:	887b      	ldrh	r3, [r7, #2]
    40ce:	ea6f 0303 	mvn.w	r3, r3
    40d2:	b29b      	uxth	r3, r3
    40d4:	ea02 0303 	and.w	r3, r2, r3
    40d8:	b29a      	uxth	r2, r3
    40da:	687b      	ldr	r3, [r7, #4]
    40dc:	829a      	strh	r2, [r3, #20]
  }
}
    40de:	f107 070c 	add.w	r7, r7, #12
    40e2:	46bd      	mov	sp, r7
    40e4:	bc80      	pop	{r7}
    40e6:	4770      	bx	lr

000040e8 <USART_SetAddress>:
*                  - USART_Address: Indicates the address of the USART node.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_SetAddress(USART_TypeDef* USARTx, u8 USART_Address)
{
    40e8:	b480      	push	{r7}
    40ea:	b083      	sub	sp, #12
    40ec:	af00      	add	r7, sp, #0
    40ee:	6078      	str	r0, [r7, #4]
    40f0:	460b      	mov	r3, r1
    40f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	8a1b      	ldrh	r3, [r3, #16]
    40f8:	b29b      	uxth	r3, r3
    40fa:	461a      	mov	r2, r3
    40fc:	f64f 73f0 	movw	r3, #65520	; 0xfff0
    4100:	f2c0 0300 	movt	r3, #0
    4104:	ea02 0303 	and.w	r3, r2, r3
    4108:	461a      	mov	r2, r3
    410a:	687b      	ldr	r3, [r7, #4]
    410c:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    410e:	687b      	ldr	r3, [r7, #4]
    4110:	8a1b      	ldrh	r3, [r3, #16]
    4112:	b29a      	uxth	r2, r3
    4114:	78fb      	ldrb	r3, [r7, #3]
    4116:	ea42 0303 	orr.w	r3, r2, r3
    411a:	b29a      	uxth	r2, r3
    411c:	687b      	ldr	r3, [r7, #4]
    411e:	821a      	strh	r2, [r3, #16]
}
    4120:	f107 070c 	add.w	r7, r7, #12
    4124:	46bd      	mov	sp, r7
    4126:	bc80      	pop	{r7}
    4128:	4770      	bx	lr
    412a:	bf00      	nop

0000412c <USART_WakeUpConfig>:
*                        - USART_WakeUp_AddressMark: WakeUp by an address mark
* Output         : None
* Return         : None
*******************************************************************************/
void USART_WakeUpConfig(USART_TypeDef* USARTx, u16 USART_WakeUp)
{
    412c:	b480      	push	{r7}
    412e:	b083      	sub	sp, #12
    4130:	af00      	add	r7, sp, #0
    4132:	6078      	str	r0, [r7, #4]
    4134:	460b      	mov	r3, r1
    4136:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    4138:	687b      	ldr	r3, [r7, #4]
    413a:	899b      	ldrh	r3, [r3, #12]
    413c:	b29b      	uxth	r3, r3
    413e:	461a      	mov	r2, r3
    4140:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
    4144:	f2c0 0300 	movt	r3, #0
    4148:	ea02 0303 	and.w	r3, r2, r3
    414c:	461a      	mov	r2, r3
    414e:	687b      	ldr	r3, [r7, #4]
    4150:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    4152:	687b      	ldr	r3, [r7, #4]
    4154:	899b      	ldrh	r3, [r3, #12]
    4156:	b29a      	uxth	r2, r3
    4158:	887b      	ldrh	r3, [r7, #2]
    415a:	ea42 0303 	orr.w	r3, r2, r3
    415e:	b29a      	uxth	r2, r3
    4160:	687b      	ldr	r3, [r7, #4]
    4162:	819a      	strh	r2, [r3, #12]
}
    4164:	f107 070c 	add.w	r7, r7, #12
    4168:	46bd      	mov	sp, r7
    416a:	bc80      	pop	{r7}
    416c:	4770      	bx	lr
    416e:	bf00      	nop

00004170 <USART_ReceiverWakeUpCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4170:	b480      	push	{r7}
    4172:	b083      	sub	sp, #12
    4174:	af00      	add	r7, sp, #0
    4176:	6078      	str	r0, [r7, #4]
    4178:	460b      	mov	r3, r1
    417a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    417c:	78fb      	ldrb	r3, [r7, #3]
    417e:	2b00      	cmp	r3, #0
    4180:	d008      	beq.n	4194 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    4182:	687b      	ldr	r3, [r7, #4]
    4184:	899b      	ldrh	r3, [r3, #12]
    4186:	b29b      	uxth	r3, r3
    4188:	f043 0302 	orr.w	r3, r3, #2
    418c:	b29a      	uxth	r2, r3
    418e:	687b      	ldr	r3, [r7, #4]
    4190:	819a      	strh	r2, [r3, #12]
    4192:	e00c      	b.n	41ae <USART_ReceiverWakeUpCmd+0x3e>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    4194:	687b      	ldr	r3, [r7, #4]
    4196:	899b      	ldrh	r3, [r3, #12]
    4198:	b29b      	uxth	r3, r3
    419a:	461a      	mov	r2, r3
    419c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    41a0:	f2c0 0300 	movt	r3, #0
    41a4:	ea02 0303 	and.w	r3, r2, r3
    41a8:	461a      	mov	r2, r3
    41aa:	687b      	ldr	r3, [r7, #4]
    41ac:	819a      	strh	r2, [r3, #12]
  }
}
    41ae:	f107 070c 	add.w	r7, r7, #12
    41b2:	46bd      	mov	sp, r7
    41b4:	bc80      	pop	{r7}
    41b6:	4770      	bx	lr

000041b8 <USART_LINBreakDetectLengthConfig>:
*                       - USART_LINBreakDetectLength_11b: 11-bit break detection
* Output         : None
* Return         : None
*******************************************************************************/
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, u16 USART_LINBreakDetectLength)
{
    41b8:	b480      	push	{r7}
    41ba:	b083      	sub	sp, #12
    41bc:	af00      	add	r7, sp, #0
    41be:	6078      	str	r0, [r7, #4]
    41c0:	460b      	mov	r3, r1
    41c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    41c4:	687b      	ldr	r3, [r7, #4]
    41c6:	8a1b      	ldrh	r3, [r3, #16]
    41c8:	b29b      	uxth	r3, r3
    41ca:	461a      	mov	r2, r3
    41cc:	f64f 73df 	movw	r3, #65503	; 0xffdf
    41d0:	f2c0 0300 	movt	r3, #0
    41d4:	ea02 0303 	and.w	r3, r2, r3
    41d8:	461a      	mov	r2, r3
    41da:	687b      	ldr	r3, [r7, #4]
    41dc:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    41de:	687b      	ldr	r3, [r7, #4]
    41e0:	8a1b      	ldrh	r3, [r3, #16]
    41e2:	b29a      	uxth	r2, r3
    41e4:	887b      	ldrh	r3, [r7, #2]
    41e6:	ea42 0303 	orr.w	r3, r2, r3
    41ea:	b29a      	uxth	r2, r3
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	821a      	strh	r2, [r3, #16]
}
    41f0:	f107 070c 	add.w	r7, r7, #12
    41f4:	46bd      	mov	sp, r7
    41f6:	bc80      	pop	{r7}
    41f8:	4770      	bx	lr
    41fa:	bf00      	nop

000041fc <USART_LINCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    41fc:	b480      	push	{r7}
    41fe:	b083      	sub	sp, #12
    4200:	af00      	add	r7, sp, #0
    4202:	6078      	str	r0, [r7, #4]
    4204:	460b      	mov	r3, r1
    4206:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4208:	78fb      	ldrb	r3, [r7, #3]
    420a:	2b00      	cmp	r3, #0
    420c:	d008      	beq.n	4220 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    420e:	687b      	ldr	r3, [r7, #4]
    4210:	8a1b      	ldrh	r3, [r3, #16]
    4212:	b29b      	uxth	r3, r3
    4214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4218:	b29a      	uxth	r2, r3
    421a:	687b      	ldr	r3, [r7, #4]
    421c:	821a      	strh	r2, [r3, #16]
    421e:	e00c      	b.n	423a <USART_LINCmd+0x3e>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    4220:	687b      	ldr	r3, [r7, #4]
    4222:	8a1b      	ldrh	r3, [r3, #16]
    4224:	b29b      	uxth	r3, r3
    4226:	461a      	mov	r2, r3
    4228:	f64b 73ff 	movw	r3, #49151	; 0xbfff
    422c:	f2c0 0300 	movt	r3, #0
    4230:	ea02 0303 	and.w	r3, r2, r3
    4234:	461a      	mov	r2, r3
    4236:	687b      	ldr	r3, [r7, #4]
    4238:	821a      	strh	r2, [r3, #16]
  }
}
    423a:	f107 070c 	add.w	r7, r7, #12
    423e:	46bd      	mov	sp, r7
    4240:	bc80      	pop	{r7}
    4242:	4770      	bx	lr

00004244 <USART_SendData>:
*                  - Data: the data to transmit.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_SendData(USART_TypeDef* USARTx, u16 Data)
{
    4244:	b480      	push	{r7}
    4246:	b083      	sub	sp, #12
    4248:	af00      	add	r7, sp, #0
    424a:	6078      	str	r0, [r7, #4]
    424c:	460b      	mov	r3, r1
    424e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
    4250:	887b      	ldrh	r3, [r7, #2]
    4252:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    4256:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    425a:	687a      	ldr	r2, [r7, #4]
    425c:	8093      	strh	r3, [r2, #4]
}
    425e:	f107 070c 	add.w	r7, r7, #12
    4262:	46bd      	mov	sp, r7
    4264:	bc80      	pop	{r7}
    4266:	4770      	bx	lr

00004268 <USART_ReceiveData>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : The received data.
*******************************************************************************/
u16 USART_ReceiveData(USART_TypeDef* USARTx)
{
    4268:	b480      	push	{r7}
    426a:	b083      	sub	sp, #12
    426c:	af00      	add	r7, sp, #0
    426e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
    4270:	687b      	ldr	r3, [r7, #4]
    4272:	889b      	ldrh	r3, [r3, #4]
    4274:	b29b      	uxth	r3, r3
    4276:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    427a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
}
    427e:	4618      	mov	r0, r3
    4280:	f107 070c 	add.w	r7, r7, #12
    4284:	46bd      	mov	sp, r7
    4286:	bc80      	pop	{r7}
    4288:	4770      	bx	lr
    428a:	bf00      	nop

0000428c <USART_SendBreak>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_SendBreak(USART_TypeDef* USARTx)
{
    428c:	b480      	push	{r7}
    428e:	b083      	sub	sp, #12
    4290:	af00      	add	r7, sp, #0
    4292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    4294:	687b      	ldr	r3, [r7, #4]
    4296:	899b      	ldrh	r3, [r3, #12]
    4298:	b29b      	uxth	r3, r3
    429a:	f043 0301 	orr.w	r3, r3, #1
    429e:	b29a      	uxth	r2, r3
    42a0:	687b      	ldr	r3, [r7, #4]
    42a2:	819a      	strh	r2, [r3, #12]
}
    42a4:	f107 070c 	add.w	r7, r7, #12
    42a8:	46bd      	mov	sp, r7
    42aa:	bc80      	pop	{r7}
    42ac:	4770      	bx	lr
    42ae:	bf00      	nop

000042b0 <USART_SetGuardTime>:
*                  - USART_GuardTime: specifies the guard time.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_SetGuardTime(USART_TypeDef* USARTx, u8 USART_GuardTime)
{    
    42b0:	b480      	push	{r7}
    42b2:	b083      	sub	sp, #12
    42b4:	af00      	add	r7, sp, #0
    42b6:	6078      	str	r0, [r7, #4]
    42b8:	460b      	mov	r3, r1
    42ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    42bc:	687b      	ldr	r3, [r7, #4]
    42be:	8b1b      	ldrh	r3, [r3, #24]
    42c0:	b29b      	uxth	r3, r3
    42c2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    42c6:	687a      	ldr	r2, [r7, #4]
    42c8:	8313      	strh	r3, [r2, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (u16)((u16)USART_GuardTime << 0x08);
    42ca:	687b      	ldr	r3, [r7, #4]
    42cc:	8b1b      	ldrh	r3, [r3, #24]
    42ce:	b29a      	uxth	r2, r3
    42d0:	78fb      	ldrb	r3, [r7, #3]
    42d2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    42d6:	b29b      	uxth	r3, r3
    42d8:	ea42 0303 	orr.w	r3, r2, r3
    42dc:	b29a      	uxth	r2, r3
    42de:	687b      	ldr	r3, [r7, #4]
    42e0:	831a      	strh	r2, [r3, #24]
}
    42e2:	f107 070c 	add.w	r7, r7, #12
    42e6:	46bd      	mov	sp, r7
    42e8:	bc80      	pop	{r7}
    42ea:	4770      	bx	lr

000042ec <USART_SetPrescaler>:
*                  - USART_Prescaler: specifies the prescaler clock.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_SetPrescaler(USART_TypeDef* USARTx, u8 USART_Prescaler)
{ 
    42ec:	b480      	push	{r7}
    42ee:	b083      	sub	sp, #12
    42f0:	af00      	add	r7, sp, #0
    42f2:	6078      	str	r0, [r7, #4]
    42f4:	460b      	mov	r3, r1
    42f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    42f8:	687b      	ldr	r3, [r7, #4]
    42fa:	8b1b      	ldrh	r3, [r3, #24]
    42fc:	b29b      	uxth	r3, r3
    42fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    4302:	687a      	ldr	r2, [r7, #4]
    4304:	8313      	strh	r3, [r2, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    4306:	687b      	ldr	r3, [r7, #4]
    4308:	8b1b      	ldrh	r3, [r3, #24]
    430a:	b29a      	uxth	r2, r3
    430c:	78fb      	ldrb	r3, [r7, #3]
    430e:	ea42 0303 	orr.w	r3, r2, r3
    4312:	b29a      	uxth	r2, r3
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	831a      	strh	r2, [r3, #24]
}
    4318:	f107 070c 	add.w	r7, r7, #12
    431c:	46bd      	mov	sp, r7
    431e:	bc80      	pop	{r7}
    4320:	4770      	bx	lr
    4322:	bf00      	nop

00004324 <USART_SmartCardCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4324:	b480      	push	{r7}
    4326:	b083      	sub	sp, #12
    4328:	af00      	add	r7, sp, #0
    432a:	6078      	str	r0, [r7, #4]
    432c:	460b      	mov	r3, r1
    432e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    4330:	78fb      	ldrb	r3, [r7, #3]
    4332:	2b00      	cmp	r3, #0
    4334:	d008      	beq.n	4348 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    4336:	687b      	ldr	r3, [r7, #4]
    4338:	8a9b      	ldrh	r3, [r3, #20]
    433a:	b29b      	uxth	r3, r3
    433c:	f043 0320 	orr.w	r3, r3, #32
    4340:	b29a      	uxth	r2, r3
    4342:	687b      	ldr	r3, [r7, #4]
    4344:	829a      	strh	r2, [r3, #20]
    4346:	e00c      	b.n	4362 <USART_SmartCardCmd+0x3e>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	8a9b      	ldrh	r3, [r3, #20]
    434c:	b29b      	uxth	r3, r3
    434e:	461a      	mov	r2, r3
    4350:	f64f 73df 	movw	r3, #65503	; 0xffdf
    4354:	f2c0 0300 	movt	r3, #0
    4358:	ea02 0303 	and.w	r3, r2, r3
    435c:	461a      	mov	r2, r3
    435e:	687b      	ldr	r3, [r7, #4]
    4360:	829a      	strh	r2, [r3, #20]
  }
}
    4362:	f107 070c 	add.w	r7, r7, #12
    4366:	46bd      	mov	sp, r7
    4368:	bc80      	pop	{r7}
    436a:	4770      	bx	lr

0000436c <USART_SmartCardNACKCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    436c:	b480      	push	{r7}
    436e:	b083      	sub	sp, #12
    4370:	af00      	add	r7, sp, #0
    4372:	6078      	str	r0, [r7, #4]
    4374:	460b      	mov	r3, r1
    4376:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    4378:	78fb      	ldrb	r3, [r7, #3]
    437a:	2b00      	cmp	r3, #0
    437c:	d008      	beq.n	4390 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    437e:	687b      	ldr	r3, [r7, #4]
    4380:	8a9b      	ldrh	r3, [r3, #20]
    4382:	b29b      	uxth	r3, r3
    4384:	f043 0310 	orr.w	r3, r3, #16
    4388:	b29a      	uxth	r2, r3
    438a:	687b      	ldr	r3, [r7, #4]
    438c:	829a      	strh	r2, [r3, #20]
    438e:	e00c      	b.n	43aa <USART_SmartCardNACKCmd+0x3e>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    4390:	687b      	ldr	r3, [r7, #4]
    4392:	8a9b      	ldrh	r3, [r3, #20]
    4394:	b29b      	uxth	r3, r3
    4396:	461a      	mov	r2, r3
    4398:	f64f 73ef 	movw	r3, #65519	; 0xffef
    439c:	f2c0 0300 	movt	r3, #0
    43a0:	ea02 0303 	and.w	r3, r2, r3
    43a4:	461a      	mov	r2, r3
    43a6:	687b      	ldr	r3, [r7, #4]
    43a8:	829a      	strh	r2, [r3, #20]
  }
}
    43aa:	f107 070c 	add.w	r7, r7, #12
    43ae:	46bd      	mov	sp, r7
    43b0:	bc80      	pop	{r7}
    43b2:	4770      	bx	lr

000043b4 <USART_HalfDuplexCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    43b4:	b480      	push	{r7}
    43b6:	b083      	sub	sp, #12
    43b8:	af00      	add	r7, sp, #0
    43ba:	6078      	str	r0, [r7, #4]
    43bc:	460b      	mov	r3, r1
    43be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    43c0:	78fb      	ldrb	r3, [r7, #3]
    43c2:	2b00      	cmp	r3, #0
    43c4:	d008      	beq.n	43d8 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    43c6:	687b      	ldr	r3, [r7, #4]
    43c8:	8a9b      	ldrh	r3, [r3, #20]
    43ca:	b29b      	uxth	r3, r3
    43cc:	f043 0308 	orr.w	r3, r3, #8
    43d0:	b29a      	uxth	r2, r3
    43d2:	687b      	ldr	r3, [r7, #4]
    43d4:	829a      	strh	r2, [r3, #20]
    43d6:	e00c      	b.n	43f2 <USART_HalfDuplexCmd+0x3e>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    43d8:	687b      	ldr	r3, [r7, #4]
    43da:	8a9b      	ldrh	r3, [r3, #20]
    43dc:	b29b      	uxth	r3, r3
    43de:	461a      	mov	r2, r3
    43e0:	f64f 73f7 	movw	r3, #65527	; 0xfff7
    43e4:	f2c0 0300 	movt	r3, #0
    43e8:	ea02 0303 	and.w	r3, r2, r3
    43ec:	461a      	mov	r2, r3
    43ee:	687b      	ldr	r3, [r7, #4]
    43f0:	829a      	strh	r2, [r3, #20]
  }
}
    43f2:	f107 070c 	add.w	r7, r7, #12
    43f6:	46bd      	mov	sp, r7
    43f8:	bc80      	pop	{r7}
    43fa:	4770      	bx	lr

000043fc <USART_IrDAConfig>:
*                       - USART_IrDAMode_Normal
* Output         : None
* Return         : None
*******************************************************************************/
void USART_IrDAConfig(USART_TypeDef* USARTx, u16 USART_IrDAMode)
{
    43fc:	b480      	push	{r7}
    43fe:	b083      	sub	sp, #12
    4400:	af00      	add	r7, sp, #0
    4402:	6078      	str	r0, [r7, #4]
    4404:	460b      	mov	r3, r1
    4406:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	8a9b      	ldrh	r3, [r3, #20]
    440c:	b29b      	uxth	r3, r3
    440e:	461a      	mov	r2, r3
    4410:	f64f 73fb 	movw	r3, #65531	; 0xfffb
    4414:	f2c0 0300 	movt	r3, #0
    4418:	ea02 0303 	and.w	r3, r2, r3
    441c:	461a      	mov	r2, r3
    441e:	687b      	ldr	r3, [r7, #4]
    4420:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    4422:	687b      	ldr	r3, [r7, #4]
    4424:	8a9b      	ldrh	r3, [r3, #20]
    4426:	b29a      	uxth	r2, r3
    4428:	887b      	ldrh	r3, [r7, #2]
    442a:	ea42 0303 	orr.w	r3, r2, r3
    442e:	b29a      	uxth	r2, r3
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	829a      	strh	r2, [r3, #20]
}
    4434:	f107 070c 	add.w	r7, r7, #12
    4438:	46bd      	mov	sp, r7
    443a:	bc80      	pop	{r7}
    443c:	4770      	bx	lr
    443e:	bf00      	nop

00004440 <USART_IrDACmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    4440:	b480      	push	{r7}
    4442:	b083      	sub	sp, #12
    4444:	af00      	add	r7, sp, #0
    4446:	6078      	str	r0, [r7, #4]
    4448:	460b      	mov	r3, r1
    444a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    444c:	78fb      	ldrb	r3, [r7, #3]
    444e:	2b00      	cmp	r3, #0
    4450:	d008      	beq.n	4464 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	8a9b      	ldrh	r3, [r3, #20]
    4456:	b29b      	uxth	r3, r3
    4458:	f043 0302 	orr.w	r3, r3, #2
    445c:	b29a      	uxth	r2, r3
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	829a      	strh	r2, [r3, #20]
    4462:	e00c      	b.n	447e <USART_IrDACmd+0x3e>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	8a9b      	ldrh	r3, [r3, #20]
    4468:	b29b      	uxth	r3, r3
    446a:	461a      	mov	r2, r3
    446c:	f64f 73fd 	movw	r3, #65533	; 0xfffd
    4470:	f2c0 0300 	movt	r3, #0
    4474:	ea02 0303 	and.w	r3, r2, r3
    4478:	461a      	mov	r2, r3
    447a:	687b      	ldr	r3, [r7, #4]
    447c:	829a      	strh	r2, [r3, #20]
  }
}
    447e:	f107 070c 	add.w	r7, r7, #12
    4482:	46bd      	mov	sp, r7
    4484:	bc80      	pop	{r7}
    4486:	4770      	bx	lr

00004488 <USART_GetFlagStatus>:
*                       - USART_FLAG_PE:   Parity Error flag
* Output         : None
* Return         : The new state of USART_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, u16 USART_FLAG)
{
    4488:	b480      	push	{r7}
    448a:	b085      	sub	sp, #20
    448c:	af00      	add	r7, sp, #0
    448e:	6078      	str	r0, [r7, #4]
    4490:	460b      	mov	r3, r1
    4492:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    4494:	f04f 0300 	mov.w	r3, #0
    4498:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
    449a:	687b      	ldr	r3, [r7, #4]
    449c:	881b      	ldrh	r3, [r3, #0]
    449e:	b29a      	uxth	r2, r3
    44a0:	887b      	ldrh	r3, [r7, #2]
    44a2:	ea02 0303 	and.w	r3, r2, r3
    44a6:	b29b      	uxth	r3, r3
    44a8:	2b00      	cmp	r3, #0
    44aa:	d003      	beq.n	44b4 <USART_GetFlagStatus+0x2c>
  {
    bitstatus = SET;
    44ac:	f04f 0301 	mov.w	r3, #1
    44b0:	73fb      	strb	r3, [r7, #15]
    44b2:	e002      	b.n	44ba <USART_GetFlagStatus+0x32>
  }
  else
  {
    bitstatus = RESET;
    44b4:	f04f 0300 	mov.w	r3, #0
    44b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    44ba:	7bfb      	ldrb	r3, [r7, #15]
}
    44bc:	4618      	mov	r0, r3
    44be:	f107 0714 	add.w	r7, r7, #20
    44c2:	46bd      	mov	sp, r7
    44c4:	bc80      	pop	{r7}
    44c6:	4770      	bx	lr

000044c8 <USART_ClearFlag>:
*                          register (USART_SendData()).                        
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClearFlag(USART_TypeDef* USARTx, u16 USART_FLAG)
{
    44c8:	b480      	push	{r7}
    44ca:	b083      	sub	sp, #12
    44cc:	af00      	add	r7, sp, #0
    44ce:	6078      	str	r0, [r7, #4]
    44d0:	460b      	mov	r3, r1
    44d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
    44d4:	887b      	ldrh	r3, [r7, #2]
    44d6:	ea6f 0303 	mvn.w	r3, r3
    44da:	b29a      	uxth	r2, r3
    44dc:	687b      	ldr	r3, [r7, #4]
    44de:	801a      	strh	r2, [r3, #0]
}
    44e0:	f107 070c 	add.w	r7, r7, #12
    44e4:	46bd      	mov	sp, r7
    44e6:	bc80      	pop	{r7}
    44e8:	4770      	bx	lr
    44ea:	bf00      	nop

000044ec <USART_GetITStatus>:
*                       - USART_IT_PE:   Parity Error interrupt
* Output         : None
* Return         : The new state of USART_IT (SET or RESET).
*******************************************************************************/
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, u16 USART_IT)
{
    44ec:	b480      	push	{r7}
    44ee:	b087      	sub	sp, #28
    44f0:	af00      	add	r7, sp, #0
    44f2:	6078      	str	r0, [r7, #4]
    44f4:	460b      	mov	r3, r1
    44f6:	807b      	strh	r3, [r7, #2]
  u32 bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    44f8:	f04f 0300 	mov.w	r3, #0
    44fc:	60bb      	str	r3, [r7, #8]
    44fe:	f04f 0300 	mov.w	r3, #0
    4502:	60fb      	str	r3, [r7, #12]
    4504:	f04f 0300 	mov.w	r3, #0
    4508:	613b      	str	r3, [r7, #16]
  ITStatus bitstatus = RESET;
    450a:	f04f 0300 	mov.w	r3, #0
    450e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */  
  
  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
    4510:	887b      	ldrh	r3, [r7, #2]
    4512:	b2db      	uxtb	r3, r3
    4514:	ea4f 1353 	mov.w	r3, r3, lsr #5
    4518:	b2db      	uxtb	r3, r3
    451a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    451c:	887b      	ldrh	r3, [r7, #2]
    451e:	f003 031f 	and.w	r3, r3, #31
    4522:	60fb      	str	r3, [r7, #12]

  itmask = (u32)0x01 << itmask;
    4524:	68fb      	ldr	r3, [r7, #12]
    4526:	f04f 0201 	mov.w	r2, #1
    452a:	fa02 f303 	lsl.w	r3, r2, r3
    452e:	60fb      	str	r3, [r7, #12]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    4530:	693b      	ldr	r3, [r7, #16]
    4532:	2b01      	cmp	r3, #1
    4534:	d107      	bne.n	4546 <USART_GetITStatus+0x5a>
  {
    itmask &= USARTx->CR1;
    4536:	687b      	ldr	r3, [r7, #4]
    4538:	899b      	ldrh	r3, [r3, #12]
    453a:	b29b      	uxth	r3, r3
    453c:	68fa      	ldr	r2, [r7, #12]
    453e:	ea02 0303 	and.w	r3, r2, r3
    4542:	60fb      	str	r3, [r7, #12]
    4544:	e011      	b.n	456a <USART_GetITStatus+0x7e>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    4546:	693b      	ldr	r3, [r7, #16]
    4548:	2b02      	cmp	r3, #2
    454a:	d107      	bne.n	455c <USART_GetITStatus+0x70>
  {
    itmask &= USARTx->CR2;
    454c:	687b      	ldr	r3, [r7, #4]
    454e:	8a1b      	ldrh	r3, [r3, #16]
    4550:	b29b      	uxth	r3, r3
    4552:	68fa      	ldr	r2, [r7, #12]
    4554:	ea02 0303 	and.w	r3, r2, r3
    4558:	60fb      	str	r3, [r7, #12]
    455a:	e006      	b.n	456a <USART_GetITStatus+0x7e>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    455c:	687b      	ldr	r3, [r7, #4]
    455e:	8a9b      	ldrh	r3, [r3, #20]
    4560:	b29b      	uxth	r3, r3
    4562:	68fa      	ldr	r2, [r7, #12]
    4564:	ea02 0303 	and.w	r3, r2, r3
    4568:	60fb      	str	r3, [r7, #12]
  }
  
  bitpos = USART_IT >> 0x08;
    456a:	887b      	ldrh	r3, [r7, #2]
    456c:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4570:	b29b      	uxth	r3, r3
    4572:	60bb      	str	r3, [r7, #8]

  bitpos = (u32)0x01 << bitpos;
    4574:	68bb      	ldr	r3, [r7, #8]
    4576:	f04f 0201 	mov.w	r2, #1
    457a:	fa02 f303 	lsl.w	r3, r2, r3
    457e:	60bb      	str	r3, [r7, #8]
  bitpos &= USARTx->SR;
    4580:	687b      	ldr	r3, [r7, #4]
    4582:	881b      	ldrh	r3, [r3, #0]
    4584:	b29b      	uxth	r3, r3
    4586:	68ba      	ldr	r2, [r7, #8]
    4588:	ea02 0303 	and.w	r3, r2, r3
    458c:	60bb      	str	r3, [r7, #8]

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
    458e:	68fb      	ldr	r3, [r7, #12]
    4590:	2b00      	cmp	r3, #0
    4592:	d006      	beq.n	45a2 <USART_GetITStatus+0xb6>
    4594:	68bb      	ldr	r3, [r7, #8]
    4596:	2b00      	cmp	r3, #0
    4598:	d003      	beq.n	45a2 <USART_GetITStatus+0xb6>
  {
    bitstatus = SET;
    459a:	f04f 0301 	mov.w	r3, #1
    459e:	75fb      	strb	r3, [r7, #23]
  bitpos = USART_IT >> 0x08;

  bitpos = (u32)0x01 << bitpos;
  bitpos &= USARTx->SR;

  if ((itmask != (u16)RESET)&&(bitpos != (u16)RESET))
    45a0:	e002      	b.n	45a8 <USART_GetITStatus+0xbc>
  {
    bitstatus = SET;
  }
  else
  {
    bitstatus = RESET;
    45a2:	f04f 0300 	mov.w	r3, #0
    45a6:	75fb      	strb	r3, [r7, #23]
  }
  
  return bitstatus;  
    45a8:	7dfb      	ldrb	r3, [r7, #23]
}
    45aa:	4618      	mov	r0, r3
    45ac:	f107 071c 	add.w	r7, r7, #28
    45b0:	46bd      	mov	sp, r7
    45b2:	bc80      	pop	{r7}
    45b4:	4770      	bx	lr
    45b6:	bf00      	nop

000045b8 <USART_ClearITPendingBit>:
*                          USART_DR register (USART_SendData()).  
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClearITPendingBit(USART_TypeDef* USARTx, u16 USART_IT)
{
    45b8:	b480      	push	{r7}
    45ba:	b085      	sub	sp, #20
    45bc:	af00      	add	r7, sp, #0
    45be:	6078      	str	r0, [r7, #4]
    45c0:	460b      	mov	r3, r1
    45c2:	807b      	strh	r3, [r7, #2]
  u16 bitpos = 0x00, itmask = 0x00;
    45c4:	f04f 0300 	mov.w	r3, #0
    45c8:	81bb      	strh	r3, [r7, #12]
    45ca:	f04f 0300 	mov.w	r3, #0
    45ce:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;
    45d0:	887b      	ldrh	r3, [r7, #2]
    45d2:	ea4f 2313 	mov.w	r3, r3, lsr #8
    45d6:	81bb      	strh	r3, [r7, #12]

  itmask = (u16)((u16)0x01 << bitpos);
    45d8:	89bb      	ldrh	r3, [r7, #12]
    45da:	f04f 0201 	mov.w	r2, #1
    45de:	fa02 f303 	lsl.w	r3, r2, r3
    45e2:	81fb      	strh	r3, [r7, #14]
  USARTx->SR = (u16)~itmask;
    45e4:	89fb      	ldrh	r3, [r7, #14]
    45e6:	ea6f 0303 	mvn.w	r3, r3
    45ea:	b29a      	uxth	r2, r3
    45ec:	687b      	ldr	r3, [r7, #4]
    45ee:	801a      	strh	r2, [r3, #0]
}
    45f0:	f107 0714 	add.w	r7, r7, #20
    45f4:	46bd      	mov	sp, r7
    45f6:	bc80      	pop	{r7}
    45f8:	4770      	bx	lr
    45fa:	bf00      	nop

000045fc <NVIC_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_DeInit(void)
{
    45fc:	b480      	push	{r7}
    45fe:	b083      	sub	sp, #12
    4600:	af00      	add	r7, sp, #0
  u32 index = 0;
    4602:	f04f 0300 	mov.w	r3, #0
    4606:	607b      	str	r3, [r7, #4]
  
  NVIC->ICER[0] = 0xFFFFFFFF;
    4608:	f24e 1300 	movw	r3, #57600	; 0xe100
    460c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4610:	f04f 32ff 	mov.w	r2, #4294967295
    4614:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICER[1] = 0x0FFFFFFF;
    4618:	f24e 1300 	movw	r3, #57600	; 0xe100
    461c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4620:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    4624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  NVIC->ICPR[0] = 0xFFFFFFFF;
    4628:	f24e 1300 	movw	r3, #57600	; 0xe100
    462c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4630:	f04f 32ff 	mov.w	r2, #4294967295
    4634:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ICPR[1] = 0x0FFFFFFF;
    4638:	f24e 1300 	movw	r3, #57600	; 0xe100
    463c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4640:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    4644:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
  
  for(index = 0; index < 0x0F; index++)
    4648:	f04f 0300 	mov.w	r3, #0
    464c:	607b      	str	r3, [r7, #4]
    464e:	e00e      	b.n	466e <NVIC_DeInit+0x72>
  {
     NVIC->IPR[index] = 0x00000000;
    4650:	f24e 1300 	movw	r3, #57600	; 0xe100
    4654:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4658:	687a      	ldr	r2, [r7, #4]
    465a:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
    465e:	f04f 0100 	mov.w	r1, #0
    4662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  NVIC->ICER[0] = 0xFFFFFFFF;
  NVIC->ICER[1] = 0x0FFFFFFF;
  NVIC->ICPR[0] = 0xFFFFFFFF;
  NVIC->ICPR[1] = 0x0FFFFFFF;
  
  for(index = 0; index < 0x0F; index++)
    4666:	687b      	ldr	r3, [r7, #4]
    4668:	f103 0301 	add.w	r3, r3, #1
    466c:	607b      	str	r3, [r7, #4]
    466e:	687b      	ldr	r3, [r7, #4]
    4670:	2b0e      	cmp	r3, #14
    4672:	d9ed      	bls.n	4650 <NVIC_DeInit+0x54>
  {
     NVIC->IPR[index] = 0x00000000;
  } 
}
    4674:	f107 070c 	add.w	r7, r7, #12
    4678:	46bd      	mov	sp, r7
    467a:	bc80      	pop	{r7}
    467c:	4770      	bx	lr
    467e:	bf00      	nop

00004680 <NVIC_SCBDeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SCBDeInit(void)
{
    4680:	b480      	push	{r7}
    4682:	b083      	sub	sp, #12
    4684:	af00      	add	r7, sp, #0
  u32 index = 0x00;
    4686:	f04f 0300 	mov.w	r3, #0
    468a:	607b      	str	r3, [r7, #4]
  
  SCB->ICSR = 0x0A000000;
    468c:	f64e 5300 	movw	r3, #60672	; 0xed00
    4690:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4694:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    4698:	605a      	str	r2, [r3, #4]
  SCB->VTOR = 0x00000000;
    469a:	f64e 5300 	movw	r3, #60672	; 0xed00
    469e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    46a2:	f04f 0200 	mov.w	r2, #0
    46a6:	609a      	str	r2, [r3, #8]
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
    46a8:	f64e 5300 	movw	r3, #60672	; 0xed00
    46ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
    46b0:	f240 0200 	movw	r2, #0
    46b4:	f2c0 52fa 	movt	r2, #1530	; 0x5fa
    46b8:	60da      	str	r2, [r3, #12]
  SCB->SCR = 0x00000000;
    46ba:	f64e 5300 	movw	r3, #60672	; 0xed00
    46be:	f2ce 0300 	movt	r3, #57344	; 0xe000
    46c2:	f04f 0200 	mov.w	r2, #0
    46c6:	611a      	str	r2, [r3, #16]
  SCB->CCR = 0x00000000;
    46c8:	f64e 5300 	movw	r3, #60672	; 0xed00
    46cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    46d0:	f04f 0200 	mov.w	r2, #0
    46d4:	615a      	str	r2, [r3, #20]
  for(index = 0; index < 0x03; index++)
    46d6:	f04f 0300 	mov.w	r3, #0
    46da:	607b      	str	r3, [r7, #4]
    46dc:	e00e      	b.n	46fc <NVIC_SCBDeInit+0x7c>
  {
     SCB->SHPR[index] = 0;
    46de:	f64e 5300 	movw	r3, #60672	; 0xed00
    46e2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    46e6:	687a      	ldr	r2, [r7, #4]
    46e8:	f102 0206 	add.w	r2, r2, #6
    46ec:	f04f 0100 	mov.w	r1, #0
    46f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SCB->ICSR = 0x0A000000;
  SCB->VTOR = 0x00000000;
  SCB->AIRCR = AIRCR_VECTKEY_MASK;
  SCB->SCR = 0x00000000;
  SCB->CCR = 0x00000000;
  for(index = 0; index < 0x03; index++)
    46f4:	687b      	ldr	r3, [r7, #4]
    46f6:	f103 0301 	add.w	r3, r3, #1
    46fa:	607b      	str	r3, [r7, #4]
    46fc:	687b      	ldr	r3, [r7, #4]
    46fe:	2b02      	cmp	r3, #2
    4700:	d9ed      	bls.n	46de <NVIC_SCBDeInit+0x5e>
  {
     SCB->SHPR[index] = 0;
  }
  SCB->SHCSR = 0x00000000;
    4702:	f64e 5300 	movw	r3, #60672	; 0xed00
    4706:	f2ce 0300 	movt	r3, #57344	; 0xe000
    470a:	f04f 0200 	mov.w	r2, #0
    470e:	625a      	str	r2, [r3, #36]	; 0x24
  SCB->CFSR = 0xFFFFFFFF;
    4710:	f64e 5300 	movw	r3, #60672	; 0xed00
    4714:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4718:	f04f 32ff 	mov.w	r2, #4294967295
    471c:	629a      	str	r2, [r3, #40]	; 0x28
  SCB->HFSR = 0xFFFFFFFF;
    471e:	f64e 5300 	movw	r3, #60672	; 0xed00
    4722:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4726:	f04f 32ff 	mov.w	r2, #4294967295
    472a:	62da      	str	r2, [r3, #44]	; 0x2c
  SCB->DFSR = 0xFFFFFFFF;
    472c:	f64e 5300 	movw	r3, #60672	; 0xed00
    4730:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4734:	f04f 32ff 	mov.w	r2, #4294967295
    4738:	631a      	str	r2, [r3, #48]	; 0x30
}
    473a:	f107 070c 	add.w	r7, r7, #12
    473e:	46bd      	mov	sp, r7
    4740:	bc80      	pop	{r7}
    4742:	4770      	bx	lr

00004744 <NVIC_PriorityGroupConfig>:
*                         0 bits for subpriority
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_PriorityGroupConfig(u32 NVIC_PriorityGroup)
{
    4744:	b480      	push	{r7}
    4746:	b083      	sub	sp, #12
    4748:	af00      	add	r7, sp, #0
    474a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    474c:	f64e 5300 	movw	r3, #60672	; 0xed00
    4750:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4754:	687a      	ldr	r2, [r7, #4]
    4756:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
    475a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    475e:	60da      	str	r2, [r3, #12]
}
    4760:	f107 070c 	add.w	r7, r7, #12
    4764:	46bd      	mov	sp, r7
    4766:	bc80      	pop	{r7}
    4768:	4770      	bx	lr
    476a:	bf00      	nop

0000476c <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    476c:	b480      	push	{r7}
    476e:	b089      	sub	sp, #36	; 0x24
    4770:	af00      	add	r7, sp, #0
    4772:	6078      	str	r0, [r7, #4]
  u32 tmppriority = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    4774:	f04f 0300 	mov.w	r3, #0
    4778:	60fb      	str	r3, [r7, #12]
    477a:	f04f 0300 	mov.w	r3, #0
    477e:	613b      	str	r3, [r7, #16]
    4780:	f04f 0300 	mov.w	r3, #0
    4784:	617b      	str	r3, [r7, #20]
  u32 tmppre = 0, tmpsub = 0x0F;
    4786:	f04f 0300 	mov.w	r3, #0
    478a:	61bb      	str	r3, [r7, #24]
    478c:	f04f 030f 	mov.w	r3, #15
    4790:	61fb      	str	r3, [r7, #28]
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    4792:	687b      	ldr	r3, [r7, #4]
    4794:	78db      	ldrb	r3, [r3, #3]
    4796:	2b00      	cmp	r3, #0
    4798:	d07f      	beq.n	489a <NVIC_Init+0x12e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    479a:	f64e 5300 	movw	r3, #60672	; 0xed00
    479e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    47a2:	68db      	ldr	r3, [r3, #12]
    47a4:	ea6f 0303 	mvn.w	r3, r3
    47a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    47ac:	ea4f 2313 	mov.w	r3, r3, lsr #8
    47b0:	60fb      	str	r3, [r7, #12]
    tmppre = (0x4 - tmppriority);
    47b2:	68fb      	ldr	r3, [r7, #12]
    47b4:	f1c3 0304 	rsb	r3, r3, #4
    47b8:	61bb      	str	r3, [r7, #24]
    tmpsub = tmpsub >> tmppriority;
    47ba:	68fb      	ldr	r3, [r7, #12]
    47bc:	69fa      	ldr	r2, [r7, #28]
    47be:	fa22 f303 	lsr.w	r3, r2, r3
    47c2:	61fb      	str	r3, [r7, #28]
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    47c4:	687b      	ldr	r3, [r7, #4]
    47c6:	785b      	ldrb	r3, [r3, #1]
    47c8:	461a      	mov	r2, r3
    47ca:	69bb      	ldr	r3, [r7, #24]
    47cc:	fa02 f303 	lsl.w	r3, r2, r3
    47d0:	60fb      	str	r3, [r7, #12]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    47d2:	687b      	ldr	r3, [r7, #4]
    47d4:	789b      	ldrb	r3, [r3, #2]
    47d6:	461a      	mov	r2, r3
    47d8:	69fb      	ldr	r3, [r7, #28]
    47da:	ea02 0303 	and.w	r3, r2, r3
    47de:	68fa      	ldr	r2, [r7, #12]
    47e0:	ea42 0303 	orr.w	r3, r2, r3
    47e4:	60fb      	str	r3, [r7, #12]

    tmppriority = tmppriority << 0x04;
    47e6:	68fb      	ldr	r3, [r7, #12]
    47e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
    47ec:	60fb      	str	r3, [r7, #12]
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    47ee:	687b      	ldr	r3, [r7, #4]
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	f003 0303 	and.w	r3, r3, #3
    47f6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    47fa:	68fa      	ldr	r2, [r7, #12]
    47fc:	fa02 f303 	lsl.w	r3, r2, r3
    4800:	60fb      	str	r3, [r7, #12]
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    4802:	f24e 1300 	movw	r3, #57600	; 0xe100
    4806:	f2ce 0300 	movt	r3, #57344	; 0xe000
    480a:	687a      	ldr	r2, [r7, #4]
    480c:	7812      	ldrb	r2, [r2, #0]
    480e:	ea4f 0292 	mov.w	r2, r2, lsr #2
    4812:	b2d2      	uxtb	r2, r2
    4814:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
    4818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    481c:	613b      	str	r3, [r7, #16]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    481e:	687b      	ldr	r3, [r7, #4]
    4820:	781b      	ldrb	r3, [r3, #0]
    4822:	f003 0303 	and.w	r3, r3, #3
    4826:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    482a:	f04f 02ff 	mov.w	r2, #255	; 0xff
    482e:	fa02 f303 	lsl.w	r3, r2, r3
    4832:	617b      	str	r3, [r7, #20]
    tmpreg &= ~tmpmask;
    4834:	697b      	ldr	r3, [r7, #20]
    4836:	ea6f 0303 	mvn.w	r3, r3
    483a:	693a      	ldr	r2, [r7, #16]
    483c:	ea02 0303 	and.w	r3, r2, r3
    4840:	613b      	str	r3, [r7, #16]
    tmppriority &= tmpmask;  
    4842:	68fa      	ldr	r2, [r7, #12]
    4844:	697b      	ldr	r3, [r7, #20]
    4846:	ea02 0303 	and.w	r3, r2, r3
    484a:	60fb      	str	r3, [r7, #12]
    tmpreg |= tmppriority;
    484c:	693a      	ldr	r2, [r7, #16]
    484e:	68fb      	ldr	r3, [r7, #12]
    4850:	ea42 0303 	orr.w	r3, r2, r3
    4854:	613b      	str	r3, [r7, #16]

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    4856:	f24e 1300 	movw	r3, #57600	; 0xe100
    485a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    485e:	687a      	ldr	r2, [r7, #4]
    4860:	7812      	ldrb	r2, [r2, #0]
    4862:	ea4f 0292 	mov.w	r2, r2, lsr #2
    4866:	b2d2      	uxtb	r2, r2
    4868:	f102 02c0 	add.w	r2, r2, #192	; 0xc0
    486c:	6939      	ldr	r1, [r7, #16]
    486e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
    4872:	f24e 1300 	movw	r3, #57600	; 0xe100
    4876:	f2ce 0300 	movt	r3, #57344	; 0xe000
    487a:	687a      	ldr	r2, [r7, #4]
    487c:	7812      	ldrb	r2, [r2, #0]
    487e:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4882:	b2d2      	uxtb	r2, r2
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
    4884:	6879      	ldr	r1, [r7, #4]
    4886:	7809      	ldrb	r1, [r1, #0]
    4888:	f001 011f 	and.w	r1, r1, #31
    488c:	f04f 0001 	mov.w	r0, #1
    4890:	fa00 f101 	lsl.w	r1, r0, r1
    tmpreg |= tmppriority;

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
    4894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    4898:	e014      	b.n	48c4 <NVIC_Init+0x158>
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
    489a:	f24e 1300 	movw	r3, #57600	; 0xe100
    489e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    48a2:	687a      	ldr	r2, [r7, #4]
    48a4:	7812      	ldrb	r2, [r2, #0]
    48a6:	ea4f 1252 	mov.w	r2, r2, lsr #5
    48aa:	b2d2      	uxtb	r2, r2
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
    48ac:	6879      	ldr	r1, [r7, #4]
    48ae:	7809      	ldrb	r1, [r1, #0]
    48b0:	f001 011f 	and.w	r1, r1, #31
    48b4:	f04f 0001 	mov.w	r0, #1
    48b8:	fa00 f101 	lsl.w	r1, r0, r1
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
    48bc:	f102 0220 	add.w	r2, r2, #32
    48c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
    48c4:	f107 0724 	add.w	r7, r7, #36	; 0x24
    48c8:	46bd      	mov	sp, r7
    48ca:	bc80      	pop	{r7}
    48cc:	4770      	bx	lr
    48ce:	bf00      	nop

000048d0 <NVIC_StructInit>:
*                    will be initialized.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_StructInit(NVIC_InitTypeDef* NVIC_InitStruct)
{
    48d0:	b480      	push	{r7}
    48d2:	b083      	sub	sp, #12
    48d4:	af00      	add	r7, sp, #0
    48d6:	6078      	str	r0, [r7, #4]
  /* NVIC_InitStruct members default value */
  NVIC_InitStruct->NVIC_IRQChannel = 0x00;
    48d8:	687b      	ldr	r3, [r7, #4]
    48da:	f04f 0200 	mov.w	r2, #0
    48de:	701a      	strb	r2, [r3, #0]
  NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority = 0x00;
    48e0:	687b      	ldr	r3, [r7, #4]
    48e2:	f04f 0200 	mov.w	r2, #0
    48e6:	705a      	strb	r2, [r3, #1]
  NVIC_InitStruct->NVIC_IRQChannelSubPriority = 0x00;
    48e8:	687b      	ldr	r3, [r7, #4]
    48ea:	f04f 0200 	mov.w	r2, #0
    48ee:	709a      	strb	r2, [r3, #2]
  NVIC_InitStruct->NVIC_IRQChannelCmd = DISABLE;
    48f0:	687b      	ldr	r3, [r7, #4]
    48f2:	f04f 0200 	mov.w	r2, #0
    48f6:	70da      	strb	r2, [r3, #3]
}
    48f8:	f107 070c 	add.w	r7, r7, #12
    48fc:	46bd      	mov	sp, r7
    48fe:	bc80      	pop	{r7}
    4900:	4770      	bx	lr
    4902:	bf00      	nop

00004904 <NVIC_SETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETPRIMASK(void)
{
    4904:	b580      	push	{r7, lr}
    4906:	af00      	add	r7, sp, #0
  __SETPRIMASK();
    4908:	f000 fba4 	bl	5054 <__SETPRIMASK>
}
    490c:	46bd      	mov	sp, r7
    490e:	bd80      	pop	{r7, pc}

00004910 <NVIC_RESETPRIMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETPRIMASK(void)
{
    4910:	b580      	push	{r7, lr}
    4912:	af00      	add	r7, sp, #0
  __RESETPRIMASK();
    4914:	f000 fb96 	bl	5044 <__RESETPRIMASK>
}
    4918:	46bd      	mov	sp, r7
    491a:	bd80      	pop	{r7, pc}

0000491c <NVIC_SETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SETFAULTMASK(void)
{
    491c:	b580      	push	{r7, lr}
    491e:	af00      	add	r7, sp, #0
  __SETFAULTMASK();
    4920:	f000 fbb0 	bl	5084 <__SETFAULTMASK>
}
    4924:	46bd      	mov	sp, r7
    4926:	bd80      	pop	{r7, pc}

00004928 <NVIC_RESETFAULTMASK>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_RESETFAULTMASK(void)
{
    4928:	b580      	push	{r7, lr}
    492a:	af00      	add	r7, sp, #0
  __RESETFAULTMASK();
    492c:	f000 fba2 	bl	5074 <__RESETFAULTMASK>
}
    4930:	46bd      	mov	sp, r7
    4932:	bd80      	pop	{r7, pc}

00004934 <NVIC_BASEPRICONFIG>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_BASEPRICONFIG(u32 NewPriority)
{
    4934:	b580      	push	{r7, lr}
    4936:	b082      	sub	sp, #8
    4938:	af00      	add	r7, sp, #0
    493a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_BASE_PRI(NewPriority));
  
  __BASEPRICONFIG(NewPriority << 0x04);
    493c:	687b      	ldr	r3, [r7, #4]
    493e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4942:	4618      	mov	r0, r3
    4944:	f000 fbae 	bl	50a4 <__BASEPRICONFIG>
}
    4948:	f107 0708 	add.w	r7, r7, #8
    494c:	46bd      	mov	sp, r7
    494e:	bd80      	pop	{r7, pc}

00004950 <NVIC_GetBASEPRI>:
* Input          : None
* Output         : None
* Return         : BASEPRI register value
*******************************************************************************/
u32 NVIC_GetBASEPRI(void)
{
    4950:	b580      	push	{r7, lr}
    4952:	af00      	add	r7, sp, #0
  return (__GetBASEPRI());
    4954:	f000 fbb2 	bl	50bc <__GetBASEPRI>
    4958:	4603      	mov	r3, r0
}
    495a:	4618      	mov	r0, r3
    495c:	46bd      	mov	sp, r7
    495e:	bd80      	pop	{r7, pc}

00004960 <NVIC_GetCurrentPendingIRQChannel>:
* Input          : None
* Output         : None
* Return         : Pending IRQ Channel Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentPendingIRQChannel(void)
{
    4960:	b480      	push	{r7}
    4962:	af00      	add	r7, sp, #0
  return ((u16)((SCB->ICSR & (u32)0x003FF000) >> 0x0C));
    4964:	f64e 5300 	movw	r3, #60672	; 0xed00
    4968:	f2ce 0300 	movt	r3, #57344	; 0xe000
    496c:	685a      	ldr	r2, [r3, #4]
    496e:	f24f 0300 	movw	r3, #61440	; 0xf000
    4972:	f2c0 033f 	movt	r3, #63	; 0x3f
    4976:	ea02 0303 	and.w	r3, r2, r3
    497a:	ea4f 3313 	mov.w	r3, r3, lsr #12
    497e:	b29b      	uxth	r3, r3
}
    4980:	4618      	mov	r0, r3
    4982:	46bd      	mov	sp, r7
    4984:	bc80      	pop	{r7}
    4986:	4770      	bx	lr

00004988 <NVIC_GetIRQChannelPendingBitStatus>:
* Input          : - NVIC_IRQChannel: specifies the interrupt pending bit to check.
* Output         : None
* Return         : The new state of IRQ Channel pending bit(SET or RESET).
*******************************************************************************/
ITStatus NVIC_GetIRQChannelPendingBitStatus(u8 NVIC_IRQChannel)
{
    4988:	b480      	push	{r7}
    498a:	b085      	sub	sp, #20
    498c:	af00      	add	r7, sp, #0
    498e:	4603      	mov	r3, r0
    4990:	71fb      	strb	r3, [r7, #7]
  ITStatus pendingirqstatus = RESET;
    4992:	f04f 0300 	mov.w	r3, #0
    4996:	72fb      	strb	r3, [r7, #11]
  u32 tmp = 0x00;
    4998:	f04f 0300 	mov.w	r3, #0
    499c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
    499e:	79fb      	ldrb	r3, [r7, #7]
    49a0:	f003 031f 	and.w	r3, r3, #31
    49a4:	f04f 0201 	mov.w	r2, #1
    49a8:	fa02 f303 	lsl.w	r3, r2, r3
    49ac:	60fb      	str	r3, [r7, #12]

  if (((NVIC->ISPR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp)
    49ae:	f24e 1300 	movw	r3, #57600	; 0xe100
    49b2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    49b6:	79fa      	ldrb	r2, [r7, #7]
    49b8:	ea4f 1252 	mov.w	r2, r2, lsr #5
    49bc:	b2d2      	uxtb	r2, r2
    49be:	f102 0240 	add.w	r2, r2, #64	; 0x40
    49c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    49c6:	68fb      	ldr	r3, [r7, #12]
    49c8:	ea02 0203 	and.w	r2, r2, r3
    49cc:	68fb      	ldr	r3, [r7, #12]
    49ce:	429a      	cmp	r2, r3
    49d0:	d103      	bne.n	49da <NVIC_GetIRQChannelPendingBitStatus+0x52>
  {
    pendingirqstatus = SET;
    49d2:	f04f 0301 	mov.w	r3, #1
    49d6:	72fb      	strb	r3, [r7, #11]
    49d8:	e002      	b.n	49e0 <NVIC_GetIRQChannelPendingBitStatus+0x58>
  }
  else
  {
    pendingirqstatus = RESET;
    49da:	f04f 0300 	mov.w	r3, #0
    49de:	72fb      	strb	r3, [r7, #11]
  }
  return pendingirqstatus;
    49e0:	7afb      	ldrb	r3, [r7, #11]
}
    49e2:	4618      	mov	r0, r3
    49e4:	f107 0714 	add.w	r7, r7, #20
    49e8:	46bd      	mov	sp, r7
    49ea:	bc80      	pop	{r7}
    49ec:	4770      	bx	lr
    49ee:	bf00      	nop

000049f0 <NVIC_SetIRQChannelPendingBit>:
* Input          : - NVIC_IRQChannel: specifies the interrupt pending bit to Set.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SetIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
    49f0:	b480      	push	{r7}
    49f2:	b083      	sub	sp, #12
    49f4:	af00      	add	r7, sp, #0
    49f6:	4603      	mov	r3, r0
    49f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  *(vu32*) 0xE000EF00 = (u32)NVIC_IRQChannel;
    49fa:	f64e 7300 	movw	r3, #61184	; 0xef00
    49fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4a02:	79fa      	ldrb	r2, [r7, #7]
    4a04:	601a      	str	r2, [r3, #0]
}
    4a06:	f107 070c 	add.w	r7, r7, #12
    4a0a:	46bd      	mov	sp, r7
    4a0c:	bc80      	pop	{r7}
    4a0e:	4770      	bx	lr

00004a10 <NVIC_ClearIRQChannelPendingBit>:
* Input          : - NVIC_IRQChannel: specifies the interrupt pending bit to clear.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_ClearIRQChannelPendingBit(u8 NVIC_IRQChannel)
{
    4a10:	b480      	push	{r7}
    4a12:	b083      	sub	sp, #12
    4a14:	af00      	add	r7, sp, #0
    4a16:	4603      	mov	r3, r0
    4a18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  NVIC->ICPR[(NVIC_IRQChannel >> 0x05)] = (u32)0x01 << (NVIC_IRQChannel & (u32)0x1F);
    4a1a:	f24e 1300 	movw	r3, #57600	; 0xe100
    4a1e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4a22:	79fa      	ldrb	r2, [r7, #7]
    4a24:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4a28:	b2d2      	uxtb	r2, r2
    4a2a:	79f9      	ldrb	r1, [r7, #7]
    4a2c:	f001 011f 	and.w	r1, r1, #31
    4a30:	f04f 0001 	mov.w	r0, #1
    4a34:	fa00 f101 	lsl.w	r1, r0, r1
    4a38:	f102 0260 	add.w	r2, r2, #96	; 0x60
    4a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4a40:	f107 070c 	add.w	r7, r7, #12
    4a44:	46bd      	mov	sp, r7
    4a46:	bc80      	pop	{r7}
    4a48:	4770      	bx	lr
    4a4a:	bf00      	nop

00004a4c <NVIC_GetCurrentActiveHandler>:
* Input          : None
* Output         : None
* Return         : Active Handler Identifier.
*******************************************************************************/
u16 NVIC_GetCurrentActiveHandler(void)
{
    4a4c:	b480      	push	{r7}
    4a4e:	af00      	add	r7, sp, #0
  return ((u16)(SCB->ICSR & (u32)0x3FF));
    4a50:	f64e 5300 	movw	r3, #60672	; 0xed00
    4a54:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4a58:	685b      	ldr	r3, [r3, #4]
    4a5a:	b29b      	uxth	r3, r3
    4a5c:	ea4f 5383 	mov.w	r3, r3, lsl #22
    4a60:	ea4f 5393 	mov.w	r3, r3, lsr #22
}
    4a64:	4618      	mov	r0, r3
    4a66:	46bd      	mov	sp, r7
    4a68:	bc80      	pop	{r7}
    4a6a:	4770      	bx	lr

00004a6c <NVIC_GetIRQChannelActiveBitStatus>:
* Input          : - NVIC_IRQChannel: specifies the interrupt active bit to check.
* Output         : None
* Return         : The new state of IRQ Channel active bit(SET or RESET).
*******************************************************************************/
ITStatus NVIC_GetIRQChannelActiveBitStatus(u8 NVIC_IRQChannel)
{
    4a6c:	b480      	push	{r7}
    4a6e:	b085      	sub	sp, #20
    4a70:	af00      	add	r7, sp, #0
    4a72:	4603      	mov	r3, r0
    4a74:	71fb      	strb	r3, [r7, #7]
  ITStatus activeirqstatus = RESET;
    4a76:	f04f 0300 	mov.w	r3, #0
    4a7a:	72fb      	strb	r3, [r7, #11]
  u32 tmp = 0x00;
    4a7c:	f04f 0300 	mov.w	r3, #0
    4a80:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_IRQChannel));
  
  tmp = ((u32)0x01 << (NVIC_IRQChannel & (u32)0x1F));
    4a82:	79fb      	ldrb	r3, [r7, #7]
    4a84:	f003 031f 	and.w	r3, r3, #31
    4a88:	f04f 0201 	mov.w	r2, #1
    4a8c:	fa02 f303 	lsl.w	r3, r2, r3
    4a90:	60fb      	str	r3, [r7, #12]

  if (((NVIC->IABR[(NVIC_IRQChannel >> 0x05)]) & tmp) == tmp )
    4a92:	f24e 1300 	movw	r3, #57600	; 0xe100
    4a96:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4a9a:	79fa      	ldrb	r2, [r7, #7]
    4a9c:	ea4f 1252 	mov.w	r2, r2, lsr #5
    4aa0:	b2d2      	uxtb	r2, r2
    4aa2:	f102 0280 	add.w	r2, r2, #128	; 0x80
    4aa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4aaa:	68fb      	ldr	r3, [r7, #12]
    4aac:	ea02 0203 	and.w	r2, r2, r3
    4ab0:	68fb      	ldr	r3, [r7, #12]
    4ab2:	429a      	cmp	r2, r3
    4ab4:	d103      	bne.n	4abe <NVIC_GetIRQChannelActiveBitStatus+0x52>
  {
    activeirqstatus = SET;
    4ab6:	f04f 0301 	mov.w	r3, #1
    4aba:	72fb      	strb	r3, [r7, #11]
    4abc:	e002      	b.n	4ac4 <NVIC_GetIRQChannelActiveBitStatus+0x58>
  }
  else
  {
    activeirqstatus = RESET;
    4abe:	f04f 0300 	mov.w	r3, #0
    4ac2:	72fb      	strb	r3, [r7, #11]
  }
  return activeirqstatus;
    4ac4:	7afb      	ldrb	r3, [r7, #11]
}
    4ac6:	4618      	mov	r0, r3
    4ac8:	f107 0714 	add.w	r7, r7, #20
    4acc:	46bd      	mov	sp, r7
    4ace:	bc80      	pop	{r7}
    4ad0:	4770      	bx	lr
    4ad2:	bf00      	nop

00004ad4 <NVIC_GetCPUID>:
* Input          : None
* Output         : None
* Return         : CPU ID.
*******************************************************************************/
u32 NVIC_GetCPUID(void)
{
    4ad4:	b480      	push	{r7}
    4ad6:	af00      	add	r7, sp, #0
  return (SCB->CPUID);
    4ad8:	f64e 5300 	movw	r3, #60672	; 0xed00
    4adc:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4ae0:	681b      	ldr	r3, [r3, #0]
}
    4ae2:	4618      	mov	r0, r3
    4ae4:	46bd      	mov	sp, r7
    4ae6:	bc80      	pop	{r7}
    4ae8:	4770      	bx	lr
    4aea:	bf00      	nop

00004aec <NVIC_SetVectorTable>:
*                            This value must be a multiple of 0x100.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SetVectorTable(u32 NVIC_VectTab, u32 Offset)
{ 
    4aec:	b480      	push	{r7}
    4aee:	b083      	sub	sp, #12
    4af0:	af00      	add	r7, sp, #0
    4af2:	6078      	str	r0, [r7, #4]
    4af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (u32)0x1FFFFF80);
    4af6:	f64e 5300 	movw	r3, #60672	; 0xed00
    4afa:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4afe:	683a      	ldr	r2, [r7, #0]
    4b00:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    4b04:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4b08:	6879      	ldr	r1, [r7, #4]
    4b0a:	ea42 0201 	orr.w	r2, r2, r1
    4b0e:	609a      	str	r2, [r3, #8]
}
    4b10:	f107 070c 	add.w	r7, r7, #12
    4b14:	46bd      	mov	sp, r7
    4b16:	bc80      	pop	{r7}
    4b18:	4770      	bx	lr
    4b1a:	bf00      	nop

00004b1c <NVIC_GenerateSystemReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateSystemReset(void)
{
    4b1c:	b480      	push	{r7}
    4b1e:	af00      	add	r7, sp, #0
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x04;
    4b20:	f64e 5300 	movw	r3, #60672	; 0xed00
    4b24:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4b28:	f240 0204 	movw	r2, #4
    4b2c:	f2c0 52fa 	movt	r2, #1530	; 0x5fa
    4b30:	60da      	str	r2, [r3, #12]
}
    4b32:	46bd      	mov	sp, r7
    4b34:	bc80      	pop	{r7}
    4b36:	4770      	bx	lr

00004b38 <NVIC_GenerateCoreReset>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_GenerateCoreReset(void)
{
    4b38:	b480      	push	{r7}
    4b3a:	af00      	add	r7, sp, #0
  SCB->AIRCR = AIRCR_VECTKEY_MASK | (u32)0x01;
    4b3c:	f64e 5300 	movw	r3, #60672	; 0xed00
    4b40:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4b44:	f240 0201 	movw	r2, #1
    4b48:	f2c0 52fa 	movt	r2, #1530	; 0x5fa
    4b4c:	60da      	str	r2, [r3, #12]
}
    4b4e:	46bd      	mov	sp, r7
    4b50:	bc80      	pop	{r7}
    4b52:	4770      	bx	lr

00004b54 <NVIC_SystemLPConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemLPConfig(u8 LowPowerMode, FunctionalState NewState)
{
    4b54:	b480      	push	{r7}
    4b56:	b083      	sub	sp, #12
    4b58:	af00      	add	r7, sp, #0
    4b5a:	4602      	mov	r2, r0
    4b5c:	460b      	mov	r3, r1
    4b5e:	71fa      	strb	r2, [r7, #7]
    4b60:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    4b62:	79bb      	ldrb	r3, [r7, #6]
    4b64:	2b00      	cmp	r3, #0
    4b66:	d00d      	beq.n	4b84 <NVIC_SystemLPConfig+0x30>
  {
    SCB->SCR |= LowPowerMode;
    4b68:	f64e 5300 	movw	r3, #60672	; 0xed00
    4b6c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4b70:	f64e 5200 	movw	r2, #60672	; 0xed00
    4b74:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4b78:	6911      	ldr	r1, [r2, #16]
    4b7a:	79fa      	ldrb	r2, [r7, #7]
    4b7c:	ea41 0202 	orr.w	r2, r1, r2
    4b80:	611a      	str	r2, [r3, #16]
    4b82:	e00e      	b.n	4ba2 <NVIC_SystemLPConfig+0x4e>
  }
  else
  {
    SCB->SCR &= (u32)(~(u32)LowPowerMode);
    4b84:	f64e 5300 	movw	r3, #60672	; 0xed00
    4b88:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4b8c:	f64e 5200 	movw	r2, #60672	; 0xed00
    4b90:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4b94:	6911      	ldr	r1, [r2, #16]
    4b96:	79fa      	ldrb	r2, [r7, #7]
    4b98:	ea6f 0202 	mvn.w	r2, r2
    4b9c:	ea01 0202 	and.w	r2, r1, r2
    4ba0:	611a      	str	r2, [r3, #16]
  }
}
    4ba2:	f107 070c 	add.w	r7, r7, #12
    4ba6:	46bd      	mov	sp, r7
    4ba8:	bc80      	pop	{r7}
    4baa:	4770      	bx	lr

00004bac <NVIC_SystemHandlerConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerConfig(u32 SystemHandler, FunctionalState NewState)
{
    4bac:	b480      	push	{r7}
    4bae:	b085      	sub	sp, #20
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	6078      	str	r0, [r7, #4]
    4bb4:	460b      	mov	r3, r1
    4bb6:	70fb      	strb	r3, [r7, #3]
  u32 tmpreg = 0x00;
    4bb8:	f04f 0300 	mov.w	r3, #0
    4bbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CONFIG_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  tmpreg =  (u32)0x01 << (SystemHandler & (u32)0x1F);
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	f003 031f 	and.w	r3, r3, #31
    4bc4:	f04f 0201 	mov.w	r2, #1
    4bc8:	fa02 f303 	lsl.w	r3, r2, r3
    4bcc:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
    4bce:	78fb      	ldrb	r3, [r7, #3]
    4bd0:	2b00      	cmp	r3, #0
    4bd2:	d00d      	beq.n	4bf0 <NVIC_SystemHandlerConfig+0x44>
  {
    SCB->SHCSR |= tmpreg;
    4bd4:	f64e 5300 	movw	r3, #60672	; 0xed00
    4bd8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4bdc:	f64e 5200 	movw	r2, #60672	; 0xed00
    4be0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4be4:	6a51      	ldr	r1, [r2, #36]	; 0x24
    4be6:	68fa      	ldr	r2, [r7, #12]
    4be8:	ea41 0202 	orr.w	r2, r1, r2
    4bec:	625a      	str	r2, [r3, #36]	; 0x24
    4bee:	e00e      	b.n	4c0e <NVIC_SystemHandlerConfig+0x62>
  }
  else
  {
    SCB->SHCSR &= ~tmpreg;
    4bf0:	f64e 5300 	movw	r3, #60672	; 0xed00
    4bf4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4bf8:	f64e 5200 	movw	r2, #60672	; 0xed00
    4bfc:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4c00:	6a51      	ldr	r1, [r2, #36]	; 0x24
    4c02:	68fa      	ldr	r2, [r7, #12]
    4c04:	ea6f 0202 	mvn.w	r2, r2
    4c08:	ea01 0202 	and.w	r2, r1, r2
    4c0c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
    4c0e:	f107 0714 	add.w	r7, r7, #20
    4c12:	46bd      	mov	sp, r7
    4c14:	bc80      	pop	{r7}
    4c16:	4770      	bx	lr

00004c18 <NVIC_SystemHandlerPriorityConfig>:
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SystemHandlerPriorityConfig(u32 SystemHandler, u8 SystemHandlerPreemptionPriority,
                                      u8 SystemHandlerSubPriority)
{
    4c18:	b480      	push	{r7}
    4c1a:	b087      	sub	sp, #28
    4c1c:	af00      	add	r7, sp, #0
    4c1e:	6078      	str	r0, [r7, #4]
    4c20:	4613      	mov	r3, r2
    4c22:	460a      	mov	r2, r1
    4c24:	70fa      	strb	r2, [r7, #3]
    4c26:	70bb      	strb	r3, [r7, #2]
  u32 tmp1 = 0x00, tmp2 = 0xFF, handlermask = 0x00;
    4c28:	f04f 0300 	mov.w	r3, #0
    4c2c:	60bb      	str	r3, [r7, #8]
    4c2e:	f04f 03ff 	mov.w	r3, #255	; 0xff
    4c32:	60fb      	str	r3, [r7, #12]
    4c34:	f04f 0300 	mov.w	r3, #0
    4c38:	613b      	str	r3, [r7, #16]
  u32 tmppriority = 0x00;
    4c3a:	f04f 0300 	mov.w	r3, #0
    4c3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_PRIORITY_SYSTEM_HANDLER(SystemHandler));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(SystemHandlerPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(SystemHandlerSubPriority));
    
  tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
    4c40:	f64e 5300 	movw	r3, #60672	; 0xed00
    4c44:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4c48:	68db      	ldr	r3, [r3, #12]
    4c4a:	ea6f 0303 	mvn.w	r3, r3
    4c4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    4c52:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4c56:	617b      	str	r3, [r7, #20]
  tmp1 = (0x4 - tmppriority);
    4c58:	697b      	ldr	r3, [r7, #20]
    4c5a:	f1c3 0304 	rsb	r3, r3, #4
    4c5e:	60bb      	str	r3, [r7, #8]
  tmp2 = tmp2 >> tmppriority;
    4c60:	697b      	ldr	r3, [r7, #20]
    4c62:	68fa      	ldr	r2, [r7, #12]
    4c64:	fa22 f303 	lsr.w	r3, r2, r3
    4c68:	60fb      	str	r3, [r7, #12]
    
  tmppriority = (u32)SystemHandlerPreemptionPriority << tmp1;
    4c6a:	78fa      	ldrb	r2, [r7, #3]
    4c6c:	68bb      	ldr	r3, [r7, #8]
    4c6e:	fa02 f303 	lsl.w	r3, r2, r3
    4c72:	617b      	str	r3, [r7, #20]
  tmppriority |=  SystemHandlerSubPriority & tmp2;
    4c74:	78ba      	ldrb	r2, [r7, #2]
    4c76:	68fb      	ldr	r3, [r7, #12]
    4c78:	ea02 0303 	and.w	r3, r2, r3
    4c7c:	697a      	ldr	r2, [r7, #20]
    4c7e:	ea42 0303 	orr.w	r3, r2, r3
    4c82:	617b      	str	r3, [r7, #20]

  tmppriority = tmppriority << 0x04;
    4c84:	697b      	ldr	r3, [r7, #20]
    4c86:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4c8a:	617b      	str	r3, [r7, #20]
  tmp1 = SystemHandler & (u32)0xC0;
    4c8c:	687b      	ldr	r3, [r7, #4]
    4c8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4c92:	60bb      	str	r3, [r7, #8]
  tmp1 = tmp1 >> 0x06; 
    4c94:	68bb      	ldr	r3, [r7, #8]
    4c96:	ea4f 1393 	mov.w	r3, r3, lsr #6
    4c9a:	60bb      	str	r3, [r7, #8]
  tmp2 = (SystemHandler >> 0x08) & (u32)0x03;
    4c9c:	687b      	ldr	r3, [r7, #4]
    4c9e:	ea4f 2313 	mov.w	r3, r3, lsr #8
    4ca2:	f003 0303 	and.w	r3, r3, #3
    4ca6:	60fb      	str	r3, [r7, #12]
  tmppriority = tmppriority << (tmp2 * 0x08);
    4ca8:	68fb      	ldr	r3, [r7, #12]
    4caa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4cae:	697a      	ldr	r2, [r7, #20]
    4cb0:	fa02 f303 	lsl.w	r3, r2, r3
    4cb4:	617b      	str	r3, [r7, #20]
  handlermask = (u32)0xFF << (tmp2 * 0x08);
    4cb6:	68fb      	ldr	r3, [r7, #12]
    4cb8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4cbc:	f04f 02ff 	mov.w	r2, #255	; 0xff
    4cc0:	fa02 f303 	lsl.w	r3, r2, r3
    4cc4:	613b      	str	r3, [r7, #16]
  
  SCB->SHPR[tmp1] &= ~handlermask;
    4cc6:	f64e 5300 	movw	r3, #60672	; 0xed00
    4cca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4cce:	68b8      	ldr	r0, [r7, #8]
    4cd0:	f64e 5200 	movw	r2, #60672	; 0xed00
    4cd4:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4cd8:	68b9      	ldr	r1, [r7, #8]
    4cda:	f101 0106 	add.w	r1, r1, #6
    4cde:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    4ce2:	693a      	ldr	r2, [r7, #16]
    4ce4:	ea6f 0202 	mvn.w	r2, r2
    4ce8:	ea01 0102 	and.w	r1, r1, r2
    4cec:	f100 0206 	add.w	r2, r0, #6
    4cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SCB->SHPR[tmp1] |= tmppriority;
    4cf4:	f64e 5300 	movw	r3, #60672	; 0xed00
    4cf8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4cfc:	68b8      	ldr	r0, [r7, #8]
    4cfe:	f64e 5200 	movw	r2, #60672	; 0xed00
    4d02:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4d06:	68b9      	ldr	r1, [r7, #8]
    4d08:	f101 0106 	add.w	r1, r1, #6
    4d0c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    4d10:	697a      	ldr	r2, [r7, #20]
    4d12:	ea41 0102 	orr.w	r1, r1, r2
    4d16:	f100 0206 	add.w	r2, r0, #6
    4d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    4d1e:	f107 071c 	add.w	r7, r7, #28
    4d22:	46bd      	mov	sp, r7
    4d24:	bc80      	pop	{r7}
    4d26:	4770      	bx	lr

00004d28 <NVIC_GetSystemHandlerPendingBitStatus>:
*                       - SystemHandler_SVCall
* Output         : None
* Return         : The new state of System Handler pending bit(SET or RESET).
*******************************************************************************/
ITStatus NVIC_GetSystemHandlerPendingBitStatus(u32 SystemHandler)
{
    4d28:	b480      	push	{r7}
    4d2a:	b087      	sub	sp, #28
    4d2c:	af00      	add	r7, sp, #0
    4d2e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus  = RESET;
    4d30:	f04f 0300 	mov.w	r3, #0
    4d34:	73fb      	strb	r3, [r7, #15]
  u32 tmp = 0x00, tmppos = 0x00;
    4d36:	f04f 0300 	mov.w	r3, #0
    4d3a:	613b      	str	r3, [r7, #16]
    4d3c:	f04f 0300 	mov.w	r3, #0
    4d40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_GET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0A);
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	ea4f 2393 	mov.w	r3, r3, lsr #10
    4d48:	617b      	str	r3, [r7, #20]
  tmppos &= (u32)0x0F;
    4d4a:	697b      	ldr	r3, [r7, #20]
    4d4c:	f003 030f 	and.w	r3, r3, #15
    4d50:	617b      	str	r3, [r7, #20]

  tmppos = (u32)0x01 << tmppos;
    4d52:	697b      	ldr	r3, [r7, #20]
    4d54:	f04f 0201 	mov.w	r2, #1
    4d58:	fa02 f303 	lsl.w	r3, r2, r3
    4d5c:	617b      	str	r3, [r7, #20]

  tmp = SCB->SHCSR & tmppos;
    4d5e:	f64e 5300 	movw	r3, #60672	; 0xed00
    4d62:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4d66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4d68:	697b      	ldr	r3, [r7, #20]
    4d6a:	ea02 0303 	and.w	r3, r2, r3
    4d6e:	613b      	str	r3, [r7, #16]

  if (tmp == tmppos)
    4d70:	693a      	ldr	r2, [r7, #16]
    4d72:	697b      	ldr	r3, [r7, #20]
    4d74:	429a      	cmp	r2, r3
    4d76:	d103      	bne.n	4d80 <NVIC_GetSystemHandlerPendingBitStatus+0x58>
  {
    bitstatus = SET;
    4d78:	f04f 0301 	mov.w	r3, #1
    4d7c:	73fb      	strb	r3, [r7, #15]
    4d7e:	e002      	b.n	4d86 <NVIC_GetSystemHandlerPendingBitStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
    4d80:	f04f 0300 	mov.w	r3, #0
    4d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4d86:	7bfb      	ldrb	r3, [r7, #15]
}
    4d88:	4618      	mov	r0, r3
    4d8a:	f107 071c 	add.w	r7, r7, #28
    4d8e:	46bd      	mov	sp, r7
    4d90:	bc80      	pop	{r7}
    4d92:	4770      	bx	lr

00004d94 <NVIC_SetSystemHandlerPendingBit>:
*                       - SystemHandler_SysTick
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_SetSystemHandlerPendingBit(u32 SystemHandler)
{
    4d94:	b480      	push	{r7}
    4d96:	b085      	sub	sp, #20
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
  u32 tmp = 0x00;
    4d9c:	f04f 0300 	mov.w	r3, #0
    4da0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SET_PENDING_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	f003 031f 	and.w	r3, r3, #31
    4da8:	60fb      	str	r3, [r7, #12]
  /* Set the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << tmp);
    4daa:	f64e 5300 	movw	r3, #60672	; 0xed00
    4dae:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4db2:	f64e 5200 	movw	r2, #60672	; 0xed00
    4db6:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4dba:	6851      	ldr	r1, [r2, #4]
    4dbc:	68fa      	ldr	r2, [r7, #12]
    4dbe:	f04f 0001 	mov.w	r0, #1
    4dc2:	fa00 f202 	lsl.w	r2, r0, r2
    4dc6:	ea41 0202 	orr.w	r2, r1, r2
    4dca:	605a      	str	r2, [r3, #4]
}
    4dcc:	f107 0714 	add.w	r7, r7, #20
    4dd0:	46bd      	mov	sp, r7
    4dd2:	bc80      	pop	{r7}
    4dd4:	4770      	bx	lr
    4dd6:	bf00      	nop

00004dd8 <NVIC_ClearSystemHandlerPendingBit>:
*                       - SystemHandler_SysTick
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_ClearSystemHandlerPendingBit(u32 SystemHandler)
{
    4dd8:	b480      	push	{r7}
    4dda:	b085      	sub	sp, #20
    4ddc:	af00      	add	r7, sp, #0
    4dde:	6078      	str	r0, [r7, #4]
  u32 tmp = 0x00;
    4de0:	f04f 0300 	mov.w	r3, #0
    4de4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CLEAR_SYSTEM_HANDLER(SystemHandler));
  
  /* Get the System Handler pending bit position */
  tmp = SystemHandler & (u32)0x1F;
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	f003 031f 	and.w	r3, r3, #31
    4dec:	60fb      	str	r3, [r7, #12]
  /* Clear the corresponding System Handler pending bit */
  SCB->ICSR |= ((u32)0x01 << (tmp - 0x01));
    4dee:	f64e 5300 	movw	r3, #60672	; 0xed00
    4df2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4df6:	f64e 5200 	movw	r2, #60672	; 0xed00
    4dfa:	f2ce 0200 	movt	r2, #57344	; 0xe000
    4dfe:	6851      	ldr	r1, [r2, #4]
    4e00:	68fa      	ldr	r2, [r7, #12]
    4e02:	f102 32ff 	add.w	r2, r2, #4294967295
    4e06:	f04f 0001 	mov.w	r0, #1
    4e0a:	fa00 f202 	lsl.w	r2, r0, r2
    4e0e:	ea41 0202 	orr.w	r2, r1, r2
    4e12:	605a      	str	r2, [r3, #4]
}
    4e14:	f107 0714 	add.w	r7, r7, #20
    4e18:	46bd      	mov	sp, r7
    4e1a:	bc80      	pop	{r7}
    4e1c:	4770      	bx	lr
    4e1e:	bf00      	nop

00004e20 <NVIC_GetSystemHandlerActiveBitStatus>:
*                       - SystemHandler_SysTick
* Output         : None
* Return         : The new state of System Handler active bit(SET or RESET).
*******************************************************************************/
ITStatus NVIC_GetSystemHandlerActiveBitStatus(u32 SystemHandler)
{
    4e20:	b480      	push	{r7}
    4e22:	b087      	sub	sp, #28
    4e24:	af00      	add	r7, sp, #0
    4e26:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus  = RESET;
    4e28:	f04f 0300 	mov.w	r3, #0
    4e2c:	73fb      	strb	r3, [r7, #15]

  u32 tmp = 0x00, tmppos = 0x00;
    4e2e:	f04f 0300 	mov.w	r3, #0
    4e32:	613b      	str	r3, [r7, #16]
    4e34:	f04f 0300 	mov.w	r3, #0
    4e38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_GET_ACTIVE_SYSTEM_HANDLER(SystemHandler));
  
  tmppos = (SystemHandler >> 0x0E) & (u32)0x0F;
    4e3a:	687b      	ldr	r3, [r7, #4]
    4e3c:	ea4f 3393 	mov.w	r3, r3, lsr #14
    4e40:	f003 030f 	and.w	r3, r3, #15
    4e44:	617b      	str	r3, [r7, #20]

  tmppos = (u32)0x01 << tmppos;
    4e46:	697b      	ldr	r3, [r7, #20]
    4e48:	f04f 0201 	mov.w	r2, #1
    4e4c:	fa02 f303 	lsl.w	r3, r2, r3
    4e50:	617b      	str	r3, [r7, #20]

  tmp = SCB->SHCSR & tmppos;
    4e52:	f64e 5300 	movw	r3, #60672	; 0xed00
    4e56:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4e5c:	697b      	ldr	r3, [r7, #20]
    4e5e:	ea02 0303 	and.w	r3, r2, r3
    4e62:	613b      	str	r3, [r7, #16]

  if (tmp == tmppos)
    4e64:	693a      	ldr	r2, [r7, #16]
    4e66:	697b      	ldr	r3, [r7, #20]
    4e68:	429a      	cmp	r2, r3
    4e6a:	d103      	bne.n	4e74 <NVIC_GetSystemHandlerActiveBitStatus+0x54>
  {
    bitstatus = SET;
    4e6c:	f04f 0301 	mov.w	r3, #1
    4e70:	73fb      	strb	r3, [r7, #15]
    4e72:	e002      	b.n	4e7a <NVIC_GetSystemHandlerActiveBitStatus+0x5a>
  }
  else
  {
    bitstatus = RESET;
    4e74:	f04f 0300 	mov.w	r3, #0
    4e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    4e7a:	7bfb      	ldrb	r3, [r7, #15]
}
    4e7c:	4618      	mov	r0, r3
    4e7e:	f107 071c 	add.w	r7, r7, #28
    4e82:	46bd      	mov	sp, r7
    4e84:	bc80      	pop	{r7}
    4e86:	4770      	bx	lr

00004e88 <NVIC_GetFaultHandlerSources>:
*                       - SystemHandler_DebugMonitor
* Output         : None
* Return         : Source of the fault handler.
*******************************************************************************/
u32 NVIC_GetFaultHandlerSources(u32 SystemHandler)
{
    4e88:	b480      	push	{r7}
    4e8a:	b087      	sub	sp, #28
    4e8c:	af00      	add	r7, sp, #0
    4e8e:	6078      	str	r0, [r7, #4]
  u32 faultsources = 0x00;
    4e90:	f04f 0300 	mov.w	r3, #0
    4e94:	60fb      	str	r3, [r7, #12]
  u32 tmpreg = 0x00, tmppos = 0x00;
    4e96:	f04f 0300 	mov.w	r3, #0
    4e9a:	613b      	str	r3, [r7, #16]
    4e9c:	f04f 0300 	mov.w	r3, #0
    4ea0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FAULT_SOURCE_SYSTEM_HANDLER(SystemHandler));
  
  tmpreg = (SystemHandler >> 0x12) & (u32)0x03;
    4ea2:	687b      	ldr	r3, [r7, #4]
    4ea4:	ea4f 4393 	mov.w	r3, r3, lsr #18
    4ea8:	f003 0303 	and.w	r3, r3, #3
    4eac:	613b      	str	r3, [r7, #16]
  tmppos = (SystemHandler >> 0x14) & (u32)0x03;
    4eae:	687b      	ldr	r3, [r7, #4]
    4eb0:	ea4f 5313 	mov.w	r3, r3, lsr #20
    4eb4:	f003 0303 	and.w	r3, r3, #3
    4eb8:	617b      	str	r3, [r7, #20]

  if (tmpreg == 0x00)
    4eba:	693b      	ldr	r3, [r7, #16]
    4ebc:	2b00      	cmp	r3, #0
    4ebe:	d106      	bne.n	4ece <NVIC_GetFaultHandlerSources+0x46>
  {
    faultsources = SCB->HFSR;
    4ec0:	f64e 5300 	movw	r3, #60672	; 0xed00
    4ec4:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4eca:	60fb      	str	r3, [r7, #12]
    4ecc:	e020      	b.n	4f10 <NVIC_GetFaultHandlerSources+0x88>
  }
  else if (tmpreg == 0x01)
    4ece:	693b      	ldr	r3, [r7, #16]
    4ed0:	2b01      	cmp	r3, #1
    4ed2:	d117      	bne.n	4f04 <NVIC_GetFaultHandlerSources+0x7c>
  {
    faultsources = SCB->CFSR >> (tmppos * 0x08);
    4ed4:	f64e 5300 	movw	r3, #60672	; 0xed00
    4ed8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4ede:	697b      	ldr	r3, [r7, #20]
    4ee0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    4ee4:	fa22 f303 	lsr.w	r3, r2, r3
    4ee8:	60fb      	str	r3, [r7, #12]
    if (tmppos != 0x02)
    4eea:	697b      	ldr	r3, [r7, #20]
    4eec:	2b02      	cmp	r3, #2
    4eee:	d004      	beq.n	4efa <NVIC_GetFaultHandlerSources+0x72>
    {
      faultsources &= (u32)0x0F;
    4ef0:	68fb      	ldr	r3, [r7, #12]
    4ef2:	f003 030f 	and.w	r3, r3, #15
    4ef6:	60fb      	str	r3, [r7, #12]
    }
    else
    {
      faultsources &= (u32)0xFF;
    4ef8:	e00a      	b.n	4f10 <NVIC_GetFaultHandlerSources+0x88>
    4efa:	68fb      	ldr	r3, [r7, #12]
    4efc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4f00:	60fb      	str	r3, [r7, #12]
    4f02:	e005      	b.n	4f10 <NVIC_GetFaultHandlerSources+0x88>
    }
  }
  else
  {
    faultsources = SCB->DFSR;
    4f04:	f64e 5300 	movw	r3, #60672	; 0xed00
    4f08:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    4f0e:	60fb      	str	r3, [r7, #12]
  }
  return faultsources;
    4f10:	68fb      	ldr	r3, [r7, #12]
}
    4f12:	4618      	mov	r0, r3
    4f14:	f107 071c 	add.w	r7, r7, #28
    4f18:	46bd      	mov	sp, r7
    4f1a:	bc80      	pop	{r7}
    4f1c:	4770      	bx	lr
    4f1e:	bf00      	nop

00004f20 <NVIC_GetFaultAddress>:
*                       - SystemHandler_BusFault
* Output         : None
* Return         : Fault address.
*******************************************************************************/
u32 NVIC_GetFaultAddress(u32 SystemHandler)
{
    4f20:	b480      	push	{r7}
    4f22:	b085      	sub	sp, #20
    4f24:	af00      	add	r7, sp, #0
    4f26:	6078      	str	r0, [r7, #4]
  u32 faultaddress = 0x00;
    4f28:	f04f 0300 	mov.w	r3, #0
    4f2c:	60bb      	str	r3, [r7, #8]
  u32 tmp = 0x00;
    4f2e:	f04f 0300 	mov.w	r3, #0
    4f32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FAULT_ADDRESS_SYSTEM_HANDLER(SystemHandler));
  
  tmp = (SystemHandler >> 0x16) & (u32)0x01;
    4f34:	687b      	ldr	r3, [r7, #4]
    4f36:	ea4f 5393 	mov.w	r3, r3, lsr #22
    4f3a:	f003 0301 	and.w	r3, r3, #1
    4f3e:	60fb      	str	r3, [r7, #12]

  if (tmp == 0x00)
    4f40:	68fb      	ldr	r3, [r7, #12]
    4f42:	2b00      	cmp	r3, #0
    4f44:	d106      	bne.n	4f54 <NVIC_GetFaultAddress+0x34>
  {
    faultaddress = SCB->MMFAR;
    4f46:	f64e 5300 	movw	r3, #60672	; 0xed00
    4f4a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4f50:	60bb      	str	r3, [r7, #8]
    4f52:	e005      	b.n	4f60 <NVIC_GetFaultAddress+0x40>
  }
  else
  {
    faultaddress = SCB->BFAR;
    4f54:	f64e 5300 	movw	r3, #60672	; 0xed00
    4f58:	f2ce 0300 	movt	r3, #57344	; 0xe000
    4f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4f5e:	60bb      	str	r3, [r7, #8]
  }
  return faultaddress;
    4f60:	68bb      	ldr	r3, [r7, #8]
}
    4f62:	4618      	mov	r0, r3
    4f64:	f107 0714 	add.w	r7, r7, #20
    4f68:	46bd      	mov	sp, r7
    4f6a:	bc80      	pop	{r7}
    4f6c:	4770      	bx	lr
    4f6e:	bf00      	nop

00004f70 <__WFI>:
; Return         : None
;******************************************************************************/

#warning "DON'T USE THESE FUNCTIONS. THEY ARE ST'S MACROS!!!"

void  __WFI() {
    4f70:	b480      	push	{r7}
    4f72:	af00      	add	r7, sp, #0
    asm("WFI");
    4f74:	bf30      	wfi
    asm("BX r14");
    4f76:	4770      	bx	lr
}
    4f78:	46bd      	mov	sp, r7
    4f7a:	bc80      	pop	{r7}
    4f7c:	4770      	bx	lr
    4f7e:	bf00      	nop

00004f80 <__WFE>:
; Description    : Assembler function for the WFE instruction.
; Input          : None
; Return         : None
;******************************************************************************/

void  __WFE() {
    4f80:	b480      	push	{r7}
    4f82:	af00      	add	r7, sp, #0
    asm("WFE");
    4f84:	bf20      	wfe
    asm("BX r14");
    4f86:	4770      	bx	lr
}
    4f88:	46bd      	mov	sp, r7
    4f8a:	bc80      	pop	{r7}
    4f8c:	4770      	bx	lr
    4f8e:	bf00      	nop

00004f90 <__SEV>:
; Description    : Assembler function for the SEV instruction.
; Input          : None
; Return         : None
;******************************************************************************/

void  __SEV() {
    4f90:	b480      	push	{r7}
    4f92:	af00      	add	r7, sp, #0
    asm("SEV");
    4f94:	bf40      	sev
    asm("BX r14");
    4f96:	4770      	bx	lr
}
    4f98:	46bd      	mov	sp, r7
    4f9a:	bc80      	pop	{r7}
    4f9c:	4770      	bx	lr
    4f9e:	bf00      	nop

00004fa0 <__ISB>:
; Description    : Assembler function for the ISB instruction.
; Input          : None
; Return         : None
;******************************************************************************/

void  __ISB() {
    4fa0:	b480      	push	{r7}
    4fa2:	af00      	add	r7, sp, #0
    asm("ISB");
    4fa4:	f3bf 8f6f 	isb	sy
    asm("BX r14");
    4fa8:	4770      	bx	lr
}
    4faa:	46bd      	mov	sp, r7
    4fac:	bc80      	pop	{r7}
    4fae:	4770      	bx	lr

00004fb0 <__DSB>:
; Description    : Assembler function for the DSB instruction.
; Input          : None
; Return         : None
;******************************************************************************/

void  __DSB() {
    4fb0:	b480      	push	{r7}
    4fb2:	af00      	add	r7, sp, #0
    asm("DSB");
    4fb4:	f3bf 8f4f 	dsb	sy
    asm("BX r14");
    4fb8:	4770      	bx	lr
}
    4fba:	46bd      	mov	sp, r7
    4fbc:	bc80      	pop	{r7}
    4fbe:	4770      	bx	lr

00004fc0 <__DMB>:
; Description    : Assembler function for the DMB instruction.
; Input          : None
; Return         : None
;******************************************************************************/

void  __DMB() {
    4fc0:	b480      	push	{r7}
    4fc2:	af00      	add	r7, sp, #0
    asm("DMB");
    4fc4:	f3bf 8f5f 	dmb	sy
    asm("BX r14");
    4fc8:	4770      	bx	lr
}
    4fca:	46bd      	mov	sp, r7
    4fcc:	bc80      	pop	{r7}
    4fce:	4770      	bx	lr

00004fd0 <__SVC>:
; Description    : Assembler function for the SVC instruction.
; Input          : None
; Return         : None
;******************************************************************************/

void  __SVC() {
    4fd0:	b480      	push	{r7}
    4fd2:	af00      	add	r7, sp, #0
    asm("SVC 1");
    4fd4:	df01      	svc	1
    asm("BX r14");
    4fd6:	4770      	bx	lr
}
    4fd8:	46bd      	mov	sp, r7
    4fda:	bc80      	pop	{r7}
    4fdc:	4770      	bx	lr
    4fde:	bf00      	nop

00004fe0 <__MRS_CONTROL>:
; Description    : Assembler function for the MRS instruction.
; Input          : None
; Return         : - r4 : Cortex-M3 CONTROL register value.
;******************************************************************************/

void  __MRS_CONTROL() {
    4fe0:	b480      	push	{r7}
    4fe2:	af00      	add	r7, sp, #0
    asm("MRS  r0,control");
    4fe4:	f3ef 8014 	mrs	r0, CONTROL
    asm("BX r14");
    4fe8:	4770      	bx	lr
}
    4fea:	46bd      	mov	sp, r7
    4fec:	bc80      	pop	{r7}
    4fee:	4770      	bx	lr

00004ff0 <__MSR_CONTROL>:
; Description    : Assembler function for the MSR instruction.
; Input          : - R0 : Cortex-M3 CONTROL register new value.  
; Return         : None
;******************************************************************************/

void  __MSR_CONTROL() {
    4ff0:	b480      	push	{r7}
    4ff2:	af00      	add	r7, sp, #0
    asm("MSR control, r0");
    4ff4:	f380 8814 	msr	CONTROL, r0
    asm("ISB");
    4ff8:	f3bf 8f6f 	isb	sy
    asm("BX r14");
    4ffc:	4770      	bx	lr
}
    4ffe:	46bd      	mov	sp, r7
    5000:	bc80      	pop	{r7}
    5002:	4770      	bx	lr

00005004 <__MRS_PSP>:
; Description    : Assembler function for the MRS instruction.
; Input          : None
; Return         : - r0 : Process Stack value.
;******************************************************************************/

void  __MRS_PSP() {
    5004:	b480      	push	{r7}
    5006:	af00      	add	r7, sp, #0
    asm("MRS r0, psp");
    5008:	f3ef 8009 	mrs	r0, PSP
    asm("BX r14");
    500c:	4770      	bx	lr
}
    500e:	46bd      	mov	sp, r7
    5010:	bc80      	pop	{r7}
    5012:	4770      	bx	lr

00005014 <__MSR_PSP>:
; Description    : Assembler function for the MSR instruction.
; Input          : - r0 : Process Stack new value.  
; Return         : None
;******************************************************************************/

void  __MSR_PSP() {
    5014:	b480      	push	{r7}
    5016:	af00      	add	r7, sp, #0
    asm("MSR psp,  r0");
    5018:	f380 8809 	msr	PSP, r0
    asm("BX r14");
    501c:	4770      	bx	lr
}
    501e:	46bd      	mov	sp, r7
    5020:	bc80      	pop	{r7}
    5022:	4770      	bx	lr

00005024 <__MRS_MSP>:
; Description    : Assembler function for the MRS instruction.
; Input          : None
; Return         : - r0 : Main Stack value.
;******************************************************************************/

void  __MRS_MSP() {
    5024:	b480      	push	{r7}
    5026:	af00      	add	r7, sp, #0
    asm("MRS r0, msp");
    5028:	f3ef 8008 	mrs	r0, MSP
    asm("BX r14");
    502c:	4770      	bx	lr
}
    502e:	46bd      	mov	sp, r7
    5030:	bc80      	pop	{r7}
    5032:	4770      	bx	lr

00005034 <__MSR_MSP>:
; Description    : Assembler function for the MSR instruction.
; Input          : - r0 : Main Stack new value.  
; Return         : None
;******************************************************************************/

void  __MSR_MSP() {
    5034:	b480      	push	{r7}
    5036:	af00      	add	r7, sp, #0
    asm("MSR msp, r0");
    5038:	f380 8808 	msr	MSP, r0
    asm("BX r14");
    503c:	4770      	bx	lr
}
    503e:	46bd      	mov	sp, r7
    5040:	bc80      	pop	{r7}
    5042:	4770      	bx	lr

00005044 <__RESETPRIMASK>:
; Description    : Assembler function to reset the PRIMASK.
; Input          : None 
; Return         : None
;******************************************************************************/

void  __RESETPRIMASK() {
    5044:	b480      	push	{r7}
    5046:	af00      	add	r7, sp, #0
    asm("CPSIE i");
    5048:	b662      	cpsie	i
    asm("BX r14");
    504a:	4770      	bx	lr
}
    504c:	46bd      	mov	sp, r7
    504e:	bc80      	pop	{r7}
    5050:	4770      	bx	lr
    5052:	bf00      	nop

00005054 <__SETPRIMASK>:
; Description    : Assembler function to set the PRIMASK.
; Input          : None 
; Return         : None
;******************************************************************************/

void  __SETPRIMASK() {
    5054:	b480      	push	{r7}
    5056:	af00      	add	r7, sp, #0
    asm("CPSID i");
    5058:	b672      	cpsid	i
    asm("BX r14");
    505a:	4770      	bx	lr
}
    505c:	46bd      	mov	sp, r7
    505e:	bc80      	pop	{r7}
    5060:	4770      	bx	lr
    5062:	bf00      	nop

00005064 <__READ_PRIMASK>:
; Description    :Assembler function to get the PRIMASK value.
; Input          : None 
; Return         : - r0 : PRIMASK register value 
;******************************************************************************/

void  __READ_PRIMASK() {
    5064:	b480      	push	{r7}
    5066:	af00      	add	r7, sp, #0
    asm("MRS r0, PRIMASK");
    5068:	f3ef 8010 	mrs	r0, PRIMASK
    asm("BX r14");
    506c:	4770      	bx	lr
}
    506e:	46bd      	mov	sp, r7
    5070:	bc80      	pop	{r7}
    5072:	4770      	bx	lr

00005074 <__RESETFAULTMASK>:
; Description    : Assembler function to reset the FAULTMASK.
; Input          : None 
; Return         : None
;******************************************************************************/

void  __RESETFAULTMASK() {
    5074:	b480      	push	{r7}
    5076:	af00      	add	r7, sp, #0
    asm("CPSIE f");
    5078:	b661      	cpsie	f
    asm("BX r14");
    507a:	4770      	bx	lr
}
    507c:	46bd      	mov	sp, r7
    507e:	bc80      	pop	{r7}
    5080:	4770      	bx	lr
    5082:	bf00      	nop

00005084 <__SETFAULTMASK>:
; Description    : Assembler function to set the FAULTMASK.
; Input          : None 
; Return         : None
;******************************************************************************/

void  __SETFAULTMASK() {
    5084:	b480      	push	{r7}
    5086:	af00      	add	r7, sp, #0
    asm("CPSID f");
    5088:	b671      	cpsid	f
    asm("BX r14");
    508a:	4770      	bx	lr
}
    508c:	46bd      	mov	sp, r7
    508e:	bc80      	pop	{r7}
    5090:	4770      	bx	lr
    5092:	bf00      	nop

00005094 <__READ_FAULTMASK>:
; Description    : Assembler function to get the FAULTMASK value.
; Input          : None 
; Return         : - r0 : FAULTMASK register value 
;******************************************************************************/

void  __READ_FAULTMASK() {
    5094:	b480      	push	{r7}
    5096:	af00      	add	r7, sp, #0
    asm("MRS r0, FAULTMASK");
    5098:	f3ef 8013 	mrs	r0, FAULTMASK
    asm("BX r14");
    509c:	4770      	bx	lr
}
    509e:	46bd      	mov	sp, r7
    50a0:	bc80      	pop	{r7}
    50a2:	4770      	bx	lr

000050a4 <__BASEPRICONFIG>:
; Description    : Assembler function to set the Base Priority.
; Input          : - r0 : Base Priority new value  
; Return         : None
;******************************************************************************/

void  __BASEPRICONFIG(unsigned long basepri) {
    50a4:	b480      	push	{r7}
    50a6:	b083      	sub	sp, #12
    50a8:	af00      	add	r7, sp, #0
    50aa:	6078      	str	r0, [r7, #4]
    asm("MSR basepri, r0");
    50ac:	f380 8811 	msr	BASEPRI, r0
    asm("BX r14");
    50b0:	4770      	bx	lr
}
    50b2:	f107 070c 	add.w	r7, r7, #12
    50b6:	46bd      	mov	sp, r7
    50b8:	bc80      	pop	{r7}
    50ba:	4770      	bx	lr

000050bc <__GetBASEPRI>:
; Description    : Assembler function to get the Base Priority value.
; Input          : None 
; Return         : - r0 : Base Priority value 
;******************************************************************************/

void  __GetBASEPRI() {
    50bc:	b480      	push	{r7}
    50be:	af00      	add	r7, sp, #0
    asm("MRS r0, basepri_max");
    50c0:	f3ef 8012 	mrs	r0, BASEPRI_MASK
    asm("BX r14");
    50c4:	4770      	bx	lr
}
    50c6:	46bd      	mov	sp, r7
    50c8:	bc80      	pop	{r7}
    50ca:	4770      	bx	lr

000050cc <__REV_HalfWord>:
; Description    : Reverses the byte order in HalfWord(16-bit) input variable.
; Input          : - r0 : specifies the input variable
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/

void  __REV_HalfWord() {
    50cc:	b480      	push	{r7}
    50ce:	af00      	add	r7, sp, #0
    asm("REV16 r0, r0");
    50d0:	ba40      	rev16	r0, r0
    asm("BX r14");
    50d2:	4770      	bx	lr
}
    50d4:	46bd      	mov	sp, r7
    50d6:	bc80      	pop	{r7}
    50d8:	4770      	bx	lr
    50da:	bf00      	nop

000050dc <__REV_Word>:
; Description    : Reverses the byte order in Word(32-bit) input variable.
; Input          : - r0 : specifies the input variable
; Return         : - r0 : holds tve variable value after byte reversing.
;******************************************************************************/

void  __REV_Word() {
    50dc:	b480      	push	{r7}
    50de:	af00      	add	r7, sp, #0
    asm("REV r0, r0");
    50e0:	ba00      	rev	r0, r0
    asm("BX r14");
    50e2:	4770      	bx	lr
}
    50e4:	46bd      	mov	sp, r7
    50e6:	bc80      	pop	{r7}
    50e8:	4770      	bx	lr
    50ea:	bf00      	nop

000050ec <f_cpu>:
    50ec:	a200 044a                                   ..J.

000050f0 <.LC0>:
    50f0:	5355202b 	.word	0x5355202b
    50f4:	20545241 	.word	0x20545241
    50f8:	64756142 	.word	0x64756142
    50fc:	74617220 	.word	0x74617220
    5100:	30203a65 	.word	0x30203a65
    5104:	00000078 	.word	0x00000078

00005108 <.LC1>:
    5108:	0000002e 	.word	0x0000002e

0000510c <.LC2>:
    510c:	4553202b 	.word	0x4553202b
    5110:	41435f52 	.word	0x41435f52
    5114:	00203a4e 	.word	0x00203a4e

00005118 <.LC3>:
    5118:	7a737546 	.word	0x7a737546
    511c:	63656e65 	.word	0x63656e65
    5120:	2772656b 	.word	0x2772656b
    5124:	65732073 	.word	0x65732073
    5128:	6c616972 	.word	0x6c616972
    512c:	4e41432d 	.word	0x4e41432d
    5130:	6e6f6320 	.word	0x6e6f6320
    5134:	74726576 	.word	0x74726576
    5138:	202c7265 	.word	0x202c7265
    513c:	656c6552 	.word	0x656c6552
    5140:	20657361 	.word	0x20657361
    5144:	002e5649 	.word	0x002e5649

00005148 <.LC4>:
    5148:	7246202b 	.word	0x7246202b
    514c:	6d206565 	.word	0x6d206565
    5150:	726f6d65 	.word	0x726f6d65
    5154:	30203a79 	.word	0x30203a79
    5158:	00000078 	.word	0x00000078

0000515c <.LC5>:
    515c:	74796220 	.word	0x74796220
    5160:	202c7365 	.word	0x202c7365
    5164:	6f6d656d 	.word	0x6f6d656d
    5168:	69207972 	.word	0x69207972
    516c:	7375206e 	.word	0x7375206e
    5170:	30203a65 	.word	0x30203a65
    5174:	00000078 	.word	0x00000078

00005178 <.LC6>:
    5178:	74796220 	.word	0x74796220
    517c:	002e7365 	.word	0x002e7365

00005180 <.LC7>:
    5180:	4143202b 	.word	0x4143202b
    5184:	6142204e 	.word	0x6142204e
    5188:	72206475 	.word	0x72206475
    518c:	3a657461 	.word	0x3a657461
    5190:	00783020 	.word	0x00783020

00005194 <.LC8>:
    5194:	6964202c 	.word	0x6964202c
    5198:	6f736976 	.word	0x6f736976
    519c:	30203a72 	.word	0x30203a72
    51a0:	00000078 	.word	0x00000078

000051a4 <.LC9>:
    51a4:	6946202b 	.word	0x6946202b
    51a8:	7265746c 	.word	0x7265746c
    51ac:	00783020 	.word	0x00783020

000051b0 <.LC10>:
    51b0:	614d203a 	.word	0x614d203a
    51b4:	203a6b73 	.word	0x203a6b73
    51b8:	00007830 	.word	0x00007830

000051bc <.LC11>:
    51bc:	6449202c 	.word	0x6449202c
    51c0:	7830203a 	.word	0x7830203a
    51c4:	00000000 	.word	0x00000000

000051c8 <.LC12>:
    51c8:	5452202c 	.word	0x5452202c
    51cc:	00000052 	.word	0x00000052

000051d0 <.LC13>:
    51d0:	6e49202d 	.word	0x6e49202d
    51d4:	696c6176 	.word	0x696c6176
    51d8:	69662064 	.word	0x69662064
    51dc:	7265746c 	.word	0x7265746c
    51e0:	6d756e20 	.word	0x6d756e20
    51e4:	2e726562 	.word	0x2e726562
    51e8:	00000000 	.word	0x00000000

000051ec <.LC14>:
    51ec:	654d202b 	.word	0x654d202b
    51f0:	67617373 	.word	0x67617373
    51f4:	75732065 	.word	0x75732065
    51f8:	73656363 	.word	0x73656363
    51fc:	6c756673 	.word	0x6c756673
    5200:	7320796c 	.word	0x7320796c
    5204:	2e746e65 	.word	0x2e746e65
    5208:	00000000 	.word	0x00000000

0000520c <.LC15>:
    520c:	6e55202d 	.word	0x6e55202d
    5210:	656c6261 	.word	0x656c6261
    5214:	206f7420 	.word	0x206f7420
    5218:	646e6573 	.word	0x646e6573
    521c:	73656d20 	.word	0x73656d20
    5220:	65676173 	.word	0x65676173
    5224:	0000002e 	.word	0x0000002e

00005228 <.LC16>:
    5228:	6e49202d 	.word	0x6e49202d
    522c:	696c6176 	.word	0x696c6176
    5230:	6f632064 	.word	0x6f632064
    5234:	6e616d6d 	.word	0x6e616d6d
    5238:	00002e64 	.word	0x00002e64

0000523c <.LC17>:
    523c:	00000a0d 	.word	0x00000a0d

00005240 <.LC18>:
    5240:	0000000a 	.word	0x0000000a

00005244 <.LC19>:
    5244:	64692023 	.word	0x64692023
    5248:	7830203a 	.word	0x7830203a
    524c:	00000000 	.word	0x00000000

00005250 <.LC20>:
    5250:	656c202c 	.word	0x656c202c
    5254:	6874676e 	.word	0x6874676e
    5258:	0000203a 	.word	0x0000203a

0000525c <.LC21>:
    525c:	6164202c 	.word	0x6164202c
    5260:	203a6174 	.word	0x203a6174
    5264:	00007830 	.word	0x00007830

00005268 <xtab>:
    5268:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    5278:	00000000                                ....

0000527c <APBAHBPrescTable>:
    527c:	00000000 04030201 04030201 09080706     ................

0000528c <ADCPrescTable>:
    528c:	08060402                                ....

Disassembly of section .data:

20000000 <_data>:
20000000:	000004b0 	.word	0x000004b0

Disassembly of section .bss:

20000004 <_bss>:
	...

2000010c <usart2can>:
	...

20000214 <can_filter>:
	...

2000024c <can_id>:
	...

20000284 <can_baudrate>:
20000284:	00000000                                ....

20000288 <line>:
	...

200002c8 <cr_needed>:
200002c8:	00000000                                ....

200002cc <counter>:
200002cc:	00000000                                ....

200002d0 <line_len>:
200002d0:	00000000                                ....

200002d4 <TxMessage>:
	...

200002e8 <RxMessage>:
	...
