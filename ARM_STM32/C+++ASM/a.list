
a:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000007c  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  20000000  0000007c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .ctors        00000004  20000028  000000a4  00010028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000004  2000002c  000000a8  0001002c  2**2
                  ALLOC
  4 .debug_abbrev 000001cf  00000000  00000000  0001002c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000349  00000000  00000000  000101fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000075  00000000  00000000  00010544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  000105bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000032  00000000  00000000  00010614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000050  00000000  00000000  00010646  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000040  00000000  00000000  00010696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000138  00000000  00000000  000106d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000054  00000000  00000000  0001080e  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000010  00000000  00000000  00010862  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <_start>:
int main();

void _start(void) {
   0:	b500      	push	{lr}
    while(1) {
        main();
   2:	f000 f803 	bl	c <main>
   6:	f000 f801 	bl	c <main>
   a:	e7fa      	b.n	2 <_start+0x2>

0000000c <main>:
            return u = int_div(c + d, (a - b));
        }

        inline int int_div(signed int a, signed int b) {
            register signed int result;
            asm("sdiv %0, %1, %2" : "=r" (result) : "r" (a), "r" (b));
   c:	2303      	movs	r3, #3
   e:	2205      	movs	r2, #5
  10:	fb93 f2f2 	sdiv	r2, r3, r2
        }

        int g() { return f(); };

        int t(int a, int b, int c, int d) {
            return u = int_div(c + d, (a - b));
  14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  18:	3213      	adds	r2, #19
  1a:	fb92 f2f3 	sdiv	r2, r2, r3
  1e:	f240 032c 	movw	r3, #44	; 0x2c
  22:	f2c2 0300 	movt	r3, #8192	; 0x2000
  26:	601a      	str	r2, [r3, #0]
  28:	f240 0100 	movw	r1, #0	; 0x0
  2c:	f240 0354 	movw	r3, #84	; 0x54
  30:	f2c2 0100 	movt	r1, #8192	; 0x2000
  34:	f2c0 0300 	movt	r3, #0	; 0x0
  38:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
  3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40:	18c0      	adds	r0, r0, r3
} t;

int main() {
    t.t(0x11, 0x12, 0x13, t.int_div(3, 5));
    return tab[t.g()] + non_const_tab[t.f()];
}
  42:	4770      	bx	lr

00000044 <_GLOBAL__I_non_const_tab>:
    private:
        int u;
 
    public:
        A() {
            u = 89;
  44:	f240 032c 	movw	r3, #44	; 0x2c
  48:	f2c2 0300 	movt	r3, #8192	; 0x2000
  4c:	2259      	movs	r2, #89
  4e:	601a      	str	r2, [r3, #0]
} t;

int main() {
    t.t(0x11, 0x12, 0x13, t.int_div(3, 5));
    return tab[t.g()] + non_const_tab[t.f()];
}
  50:	4770      	bx	lr
  52:	46c0      	nop			(mov r8, r8)

00000054 <e_text>:
  54:	00000001 	.word	0x00000001
  58:	00000002 	.word	0x00000002
  5c:	00000003 	.word	0x00000003
  60:	00000004 	.word	0x00000004
  64:	00000005 	.word	0x00000005
  68:	00000006 	.word	0x00000006
  6c:	00000007 	.word	0x00000007
  70:	00000008 	.word	0x00000008
  74:	00000009 	.word	0x00000009
  78:	0000000a 	.word	0x0000000a

Disassembly of section .data:

20000000 <non_const_tab>:
20000000:	00000100 00000101 00000102 00000102     ................
20000010:	00000103 00000104 00000105 00000106     ................
20000020:	00000107 00000108                       ........

Disassembly of section .bss:

2000002c <t>:
2000002c:	00000000                                ....
