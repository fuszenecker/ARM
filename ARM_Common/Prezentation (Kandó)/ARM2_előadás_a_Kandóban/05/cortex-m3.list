
cortex-m3:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  20000000  000000cc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

00000000 <_pointers>:
   0:	2000fffc 	.word	0x2000fffc

00000004 <vectors>:
   4:	00000061 00000049 00000000 0000004d     a...I.......M...
	...
  2c:	00000051 00000000 00000000 00000000     Q...............
  3c:	00000055 00000059 0000005d              U...Y...]...

00000048 <nmi_handler>:
	for (;;)
		main();
}

void nmi_handler()
{
  48:	e7fe      	b.n	48 <nmi_handler>
  4a:	bf00      	nop

0000004c <mmu_handler>:
	for(;;);
}

void mmu_handler()
{
  4c:	e7fe      	b.n	4c <mmu_handler>
  4e:	bf00      	nop

00000050 <svc_handler>:
	for(;;);
}

void svc_handler()
{
  50:	e7fe      	b.n	50 <svc_handler>
  52:	bf00      	nop

00000054 <systick_handler>:
	for(;;);
}

void systick_handler()
{
  54:	e7fe      	b.n	54 <systick_handler>
  56:	bf00      	nop

00000058 <irq0_handler>:
	for(;;);
}

void irq0_handler()
{
  58:	e7fe      	b.n	58 <irq0_handler>
  5a:	bf00      	nop

0000005c <irq1_handler>:
	for(;;);
}

void irq1_handler()
{
  5c:	e7fe      	b.n	5c <irq1_handler>
  5e:	bf00      	nop

00000060 <_start>:
	irq1_handler,
	// and so on...
};

void _start()
{
  60:	b508      	push	{r3, lr}
	unsigned int *p = &_etext, *q = (unsigned int *) &_data;

	for (; q <= &_edata; *p++ = *q++);
  62:	f240 0200 	movw	r2, #0
  66:	f2c2 0200 	movt	r2, #8192	; 0x2000
  6a:	f240 0304 	movw	r3, #4
  6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
  72:	429a      	cmp	r2, r3
  74:	d80e      	bhi.n	94 <_start+0x34>
  76:	4613      	mov	r3, r2
	// and so on...
};

void _start()
{
	unsigned int *p = &_etext, *q = (unsigned int *) &_data;
  78:	f240 02cc 	movw	r2, #204	; 0xcc
  7c:	f2c0 0200 	movt	r2, #0

	for (; q <= &_edata; *p++ = *q++);
  80:	f240 0104 	movw	r1, #4
  84:	f2c2 0100 	movt	r1, #8192	; 0x2000
  88:	f853 0b04 	ldr.w	r0, [r3], #4
  8c:	f842 0b04 	str.w	r0, [r2], #4
  90:	428b      	cmp	r3, r1
  92:	d9f9      	bls.n	88 <_start+0x28>

	for (;;)
		main();
  94:	f000 f80c 	bl	b0 <main>
  98:	e7fc      	b.n	94 <_start+0x34>
  9a:	bf00      	nop

0000009c <delay>:

void delay(int d)
{
	int z;

	for (z = 0; z < d; z++)
  9c:	2800      	cmp	r0, #0
  9e:	dd06      	ble.n	ae <delay+0x12>
  a0:	f04f 0300 	mov.w	r3, #0
		asm("nop");
  a4:	bf00      	nop

void delay(int d)
{
	int z;

	for (z = 0; z < d; z++)
  a6:	f103 0301 	add.w	r3, r3, #1
  aa:	4283      	cmp	r3, r0
  ac:	d1fa      	bne.n	a4 <delay+0x8>
  ae:	4770      	bx	lr

000000b0 <main>:
		asm("nop");
}

int main()
{
  b0:	b510      	push	{r4, lr}
	int c;

	for (c = 0; c < 10; c++)
  b2:	f04f 0400 	mov.w	r4, #0
		delay(c);
  b6:	4620      	mov	r0, r4
  b8:	f7ff fff0 	bl	9c <delay>

int main()
{
	int c;

	for (c = 0; c < 10; c++)
  bc:	f104 0401 	add.w	r4, r4, #1
  c0:	2c0a      	cmp	r4, #10
  c2:	d1f8      	bne.n	b6 <main+0x6>
		delay(c);
	
	return 0;
}
  c4:	f04f 0000 	mov.w	r0, #0
  c8:	bd10      	pop	{r4, pc}
  ca:	bf00      	nop

Disassembly of section .data:

20000000 <_data>:
20000000:	deadbeef 	.word	0xdeadbeef
